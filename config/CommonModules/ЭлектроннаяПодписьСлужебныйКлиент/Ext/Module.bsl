////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронная подпись".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Возвращает менеджер криптографии (на клиенте) для указанной программы.
//
// Параметры:
//  Операция       - Строка - если не пустая, то должна содержать одну из строк, которые определяют
//                   операцию для вставки в описание ошибки: Подписание, ПроверкаПодписи, Шифрование,
//                   Расшифровка, ПроверкаСертификата, ПолучениеСертификатов.
//
//  ПоказатьОшибку - Булево - если Истина, тогда будет открыта форма ОшибкаОбращенияКПрограмме
//                   из которой можно перейти к списку установленных программ
//                   в форму персональных настроек на страницу "Установленные программы",
//                   в которой можно увидеть почему программу не удалось задействовать,
//                   а также открыть инструкцию по установке.
//
//  ОписаниеОшибки - Строка - возвращаемое описание ошибки, если возвращено значение Неопределено.
//                 - Структура - содержит ошибки обращения к программам, если возвращено Неопределено.
//                    * ОписаниеОшибки   - Строка - описание ошибки, когда оно возвращается строкой.
//                    * ЗаголовокОшибки  - Строка - заголовок ошибки, который соответствует операции.
//                    * Описание         - Строка - описание общей ошибки.
//                    * Общая            - Булево - если Истина, то содержит описание ошибки для всех программ,
//                                                  иначе альтернативное описание массиву Ошибки.
//                    * КАдминистратору  - Булево - для исправления общей ошибки требуются права администратора.
//                    * Ошибки           - Массив - содержит структуры описания ошибок программ со свойствами:
//                         * Программа       - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования.
//                         * Описание        - Строка - содержит представление ошибки.
//                         * ИзИсключения    - Булево - описание содержит краткое представление информации об ошибке.
//                         * НеУказанПуть    - Булево - описание содержит ошибку о неуказанном пути для ОС Linux.
//                         * КАдминистратору - Булево - для исправления ошибки требуются права администратора.
//
//  Программа      - Неопределено - возвращает менеджер криптографии первой
//                   программы из справочника для которой удалось его создать.
//                 - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования - программа
//                   для которой нужно создать и вернуть менеджер криптографии.
//
// Возвращаемое значение:
//   МенеджерКриптографии - менеджер криптографии.
//   Неопределено - произошла ошибка, описание которой в параметре ОписаниеОшибки.
//
Функция МенеджерКриптографии(Операция, ПоказатьОшибку = Истина, ОписаниеОшибки = "", Программа = Неопределено) Экспорт
	
	ЗаголовокФормы = НСтр("ru = 'Требуется программа электронной подписи и шифрования'");
	
	Если Операция = "Подписание" Тогда
		ЗаголовокОшибки = НСтр("ru = 'Не удалось подписать данные по причине:'");
		
	ИначеЕсли Операция = "ПроверкаПодписи" Тогда
		ЗаголовокОшибки = НСтр("ru = 'Не удалось проверить подпись по причине:'");
		
	ИначеЕсли Операция = "Шифрование" Тогда
		ЗаголовокОшибки = НСтр("ru = 'Не удалось зашифровать данные по причине:'");
		
	ИначеЕсли Операция = "Расшифровка" Тогда
		ЗаголовокОшибки = НСтр("ru = 'Не удалось расшифровать данные по причине:'");
		
	ИначеЕсли Операция = "ПроверкаСертификата" Тогда
		ЗаголовокОшибки = НСтр("ru = 'Не удалось проверить сертификат по причине:'");
		
	ИначеЕсли Операция = "ПолучениеСертификатов" Тогда
		ЗаголовокОшибки = НСтр("ru = 'Не удалось получить сертификаты по причине:'");
		
	ИначеЕсли Операция <> "" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка в функции МенеджерКриптографии.
			           |Неверное значение параметра Операция ""%1"".'"), Операция);
		
	ИначеЕсли ТипЗнч(ОписаниеОшибки) = Тип("Структура")
	        И ОписаниеОшибки.Свойство("ЗаголовокОшибки") Тогда
		
		ЗаголовокОшибки = ОписаниеОшибки.ЗаголовокОшибки;
	Иначе
		ЗаголовокОшибки = НСтр("ru = 'Не удалось выполнить операцию по причине:'");
	КонецЕсли;
	
	СвойстваОшибки = Новый Структура;
	СвойстваОшибки.Вставить("ЗаголовокОшибки", ЗаголовокОшибки);
	СвойстваОшибки.Вставить("Общая", Ложь);
	СвойстваОшибки.Вставить("КАдминистратору", Ложь);
	
	Если Не ПодключитьРасширениеРаботыСКриптографией() Тогда
		ТекстОшибки =
			НСтр("ru = 'В обозреватель интернет требуется установить расширение
			           |для работы с электронной подписью и шифрованием.'");
		
		СвойстваОшибки.Вставить("Описание", ТекстОшибки);
		СвойстваОшибки.Вставить("Общая",  Истина);
		СвойстваОшибки.Вставить("Ошибки", Новый Массив);
		СвойстваОшибки.Вставить("Расширение", Истина);
		
		СвойстваОшибки.Вставить("ОписаниеОшибки", ЗаголовокОшибки + Символы.ПС + ТекстОшибки);
		Если ТипЗнч(ОписаниеОшибки) = Тип("Структура") Тогда
			ОписаниеОшибки = СвойстваОшибки;
		Иначе
			ОписаниеОшибки = СвойстваОшибки.ОписаниеОшибки;
		КонецЕсли;
		Если ПоказатьОшибку Тогда
			ПоказатьОшибкуОбращенияКПрограмме(
				ЗаголовокФормы, ЗаголовокОшибки, СвойстваОшибки, Новый Структура);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоLinux = ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент();
	
	Ошибки = Новый Массив;
	Менеджер = ЭлектроннаяПодписьСлужебныйКлиентСервер.МенеджерКриптографии(
		Программа, ЭтоLinux, Ошибки, Ложь);
	
	Если Менеджер <> Неопределено Тогда
		Возврат Менеджер;
	КонецЕсли;
	
	СвойстваОшибки.Вставить("Ошибки", Ошибки);
	
	Если Ошибки.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не предусмотрено использование ни одной программы.'");
		СвойстваОшибки.Вставить("Описание", ТекстОшибки);
		СвойстваОшибки.Общая = Истина;
		СвойстваОшибки.КАдминистратору = Истина;
		Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоПолноправныйПользователь Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + НСтр("ru = 'Обратитесь к администратору.'");
		КонецЕсли;
		СвойстваОшибки.Вставить("Инструкция", Истина);
		СвойстваОшибки.Вставить("НастройкаПрограмм", Истина);
	Иначе
		Если ЗначениеЗаполнено(Программа) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Программа %1 не доступна или не установлена на компьютере.'"), Программа);
		Иначе
			ТекстОшибки = НСтр("ru = 'Ни одна из программ не доступна или не установлена на компьютере.'");
		КонецЕсли;
		СвойстваОшибки.Вставить("Описание", ТекстОшибки);
	КонецЕсли;
	
	СвойстваОшибки.Вставить("ОписаниеОшибки", ЗаголовокОшибки + Символы.ПС + ТекстОшибки);
	Если ТипЗнч(ОписаниеОшибки) = Тип("Структура") Тогда
		ОписаниеОшибки = СвойстваОшибки;
	Иначе
		ОписаниеОшибки = СвойстваОшибки.ОписаниеОшибки;
	КонецЕсли;
	
	Если ПоказатьОшибку = Истина Тогда
		ПоказатьОшибкуОбращенияКПрограмме(
			ЗаголовокФормы, ЗаголовокОшибки, СвойстваОшибки, Новый Структура);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Готовит строку для использования в качестве имени файла.
Функция ПодготовитьСтрокуДляИмениФайла(Строка, ЗаменаПробела = Неопределено) Экспорт
	
	ЗаменаСимволов = Новый Соответствие;
	ЗаменаСимволов.Вставить("\", " ");
	ЗаменаСимволов.Вставить("/", " ");
	ЗаменаСимволов.Вставить("*", " ");
	ЗаменаСимволов.Вставить("<", " ");
	ЗаменаСимволов.Вставить(">", " ");
	ЗаменаСимволов.Вставить("|", " ");
	ЗаменаСимволов.Вставить(":", "");
	ЗаменаСимволов.Вставить("""", "");
	ЗаменаСимволов.Вставить("?", "");
	ЗаменаСимволов.Вставить(Символы.ВК, "");
	ЗаменаСимволов.Вставить(Символы.ПС, " ");
	ЗаменаСимволов.Вставить(Символы.Таб, " ");
	ЗаменаСимволов.Вставить(Символы.НПП, " ");
	// замена символов кавычек
	ЗаменаСимволов.Вставить(Символ(171), "");
	ЗаменаСимволов.Вставить(Символ(187), "");
	ЗаменаСимволов.Вставить(Символ(8195), "");
	ЗаменаСимволов.Вставить(Символ(8194), "");
	ЗаменаСимволов.Вставить(Символ(8216), "");
	ЗаменаСимволов.Вставить(Символ(8218), "");
	ЗаменаСимволов.Вставить(Символ(8217), "");
	ЗаменаСимволов.Вставить(Символ(8220), "");
	ЗаменаСимволов.Вставить(Символ(8222), "");
	ЗаменаСимволов.Вставить(Символ(8221), "");
	
	СтрокаПодготовленная = "";
	
	КоличествоСимволов = СтрДлина(Строка);
	
	Для НомерСимвола = 1 По КоличествоСимволов Цикл
		Символ = Сред(Строка, НомерСимвола, 1);
		Если ЗаменаСимволов[Символ] <> Неопределено Тогда
			Символ = ЗаменаСимволов[Символ];
		КонецЕсли;
		СтрокаПодготовленная = СтрокаПодготовленная + Символ;
	КонецЦикла;
	
	Если ЗаменаПробела <> Неопределено Тогда
		СтрокаПодготовленная = СтрЗаменить(ЗаменаПробела, " ", ЗаменаПробела);
	КонецЕсли;
	
	Возврат СокрЛП(СтрокаПодготовленная);
	
КонецФункции

// Только для внутреннего назначения.
//
// Параметры:
//  ПараметрыСоздания - Структура - со свойствами:
//   * ВЛичныйСписок    - Булево - если не указано, значит Ложь.
//                        Если Истина, то реквизит Пользователь будет заполнено текущим пользователем.
//   * Организация      - СправочникСсылка.Организации - значение по умолчанию.
//   * СкрытьЗаявление  - Булево - не предлагать создать заявление на выпуск сертификата.
//   * СоздатьЗаявление - Булево - сразу открыть форму создания заявления на выпуск сертификата.
//
Процедура ДобавитьСертификат(ПараметрыСоздания = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыСоздания) <> Тип("Структура") Тогда
		ПараметрыСоздания = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыСоздания.Свойство("ВЛичныйСписок") Тогда
		ПараметрыСоздания.Вставить("ВЛичныйСписок", Ложь);
	КонецЕсли;
	
	Если Не ПараметрыСоздания.Свойство("Организация") Тогда
		ПараметрыСоздания.Вставить("Организация", Неопределено);
	КонецЕсли;
	
	Если ПараметрыСоздания.Свойство("СоздатьЗаявление") И ПараметрыСоздания.СоздатьЗаявление = Истина Тогда
		ПослеВыбораНазначенияДобавляемогоСертификата("ЗаявлениеНаВыпускСертификата", ПараметрыСоздания);
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСоздания.Свойство("СкрытьЗаявление") Тогда
		ПараметрыСоздания.Вставить("СкрытьЗаявление", Истина);
	КонецЕсли;
	
	Форма = ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ДобавлениеСертификата",
		Новый Структура("СкрытьЗаявление", ПараметрыСоздания.СкрытьЗаявление),,,,,
		Новый ОписаниеОповещения("ПослеВыбораНазначенияДобавляемогоСертификата", ЭтотОбъект, ПараметрыСоздания));
	
	Если Форма = Неопределено Тогда
		ПослеВыбораНазначенияДобавляемогоСертификата("ДляПодписанияШифрованияИРасшифровки", ПараметрыСоздания);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего назначения.
Процедура ПослеВыбораНазначенияДобавляемогоСертификата(Назначение, ПараметрыСоздания) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	Если Назначение = "ЗаявлениеНаВыпускСертификата" Тогда
		
		ПараметрыФормы.Вставить("ЛичныйСписокПриДобавлении", ПараметрыСоздания.ВЛичныйСписок);
		ПараметрыФормы.Вставить("Организация", ПараметрыСоздания.Организация);
		ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата",
			ПараметрыФормы);
		
	ИначеЕсли Назначение = "ТолькоДляШифрованияИзФайла" Тогда
		ДобавитьСертификатТолькоДляШифрованияИзФайла(ПараметрыСоздания.ВЛичныйСписок);
	
	ИначеЕсли Назначение = "ТолькоДляШифрования" Тогда
		
		ОшибкаПолученияСертификатовНаКлиенте = Новый Структура;
		СвойстваСертификатовНаКлиенте = Новый Массив;
		
		МенеджерКриптографии = МенеджерКриптографии("ПолучениеСертификатов", Ложь,
			ОшибкаПолученияСертификатовНаКлиенте);
		
		ЭлектроннаяПодписьСлужебныйКлиентСервер.ДобавитьСвойстваСертификатовИзХранилища(
			СвойстваСертификатовНаКлиенте, МенеджерКриптографии, Ложь, Ложь);
		
		ПараметрыФормы.Вставить("СвойстваСертификатовНаКлиенте", СвойстваСертификатовНаКлиенте);
		ПараметрыФормы.Вставить("ОшибкаПолученияСертификатовНаКлиенте", ОшибкаПолученияСертификатовНаКлиенте);
		ПараметрыФормы.Вставить("ЛичныйСписокПриДобавлении", ПараметрыСоздания.ВЛичныйСписок);
		Форма = ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ДобавлениеСертификатаДляШифрования",
			ПараметрыФормы);
	Иначе
		ПараметрыФормы.Вставить("ДляШифрованияИРасшифровки", Неопределено);
		
		Если Назначение = "ДляШифрованияИРасшифровки" Тогда
			ПараметрыФормы.Вставить("ДляШифрованияИРасшифровки", Истина);
		
		ИначеЕсли Назначение <> "ДляПодписанияШифрованияИРасшифровки" Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ДобавлениеВСписок", Истина);
		ПараметрыФормы.Вставить("ЛичныйСписокПриДобавлении", ПараметрыСоздания.ВЛичныйСписок);
		ПараметрыФормы.Вставить("Организация", ПараметрыСоздания.Организация);
		ВыборСертификатаДляПодписанияИлиРасшифровки(ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего назначения.
Процедура ДобавитьСертификатТолькоДляШифрованияИзФайла(ВЛичныйСписок = Ложь) Экспорт
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		ОбработкаПродолжения = Новый ОписаниеОповещения(
			"ДобавитьСертификатТолькоДляШифрованияПриНачалеПомещенияФайла", ЭтотОбъект, ВЛичныйСписок);
		
		НачатьПомещениеФайла(ОбработкаПродолжения, ПоместитьВоВременноеХранилище(Неопределено));
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = НСтр("ru = 'Выберите файл сертификата (только для шифрования)'");
	Диалог.Фильтр = НСтр("ru = 'Сертификат X.509 (*.cer;*.crt)|*.cer;*.crt|Все файлы(*.*)|*.*'");
	
	ПомещенныеФайлы = Новый Массив;
	Если Не ПоместитьФайлы(, ПомещенныеФайлы, Диалог, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСертификатТолькоДляШифрованияПослеПомещенияФайла(ПомещенныеФайлы[0].Хранение, ВЛичныйСписок);
	
КонецПроцедуры

// Только для внутреннего назначения.
Процедура ДобавитьСертификатТолькоДляШифрованияПриНачалеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла, ВЛичныйСписок) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСертификатТолькоДляШифрованияПослеПомещенияФайла(Адрес, ВЛичныйСписок);
	
КонецПроцедуры

// Только для внутреннего назначения.
Процедура ДобавитьСертификатТолькоДляШифрованияПослеПомещенияФайла(Адрес, ВЛичныйСписок)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресДанныхСертификата", Адрес);
	ПараметрыФормы.Вставить("ЛичныйСписокПриДобавлении", ВЛичныйСписок);
	Форма = ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ДобавлениеСертификатаДляШифрования",
		ПараметрыФормы);
	
	Если Форма = Неопределено Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Файл сертификата должен быть в формате DER X.509, операция прервана.'"));
			Возврат;
	КонецЕсли;
	
	Если Не Форма.Открыта() Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Открыть", НСтр("ru = 'Открыть'"));
		Кнопки.Добавить("Отмена",  НСтр("ru = 'Отмена'"));
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ДобавитьСертификатТолькоДляШифрованияПослеПредупрежденияОСуществующем",
				ЭтотОбъект, Форма.Сертификат),
			НСтр("ru = 'Сертификат уже добавлен.'"), Кнопки);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего назначения.
Процедура ДобавитьСертификатТолькоДляШифрованияПослеПредупрежденияОСуществующем(Ответ, Сертификат) Экспорт
	
	Если Ответ <> "Открыть" Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.ОткрытьСертификат(Сертификат);
	
КонецПроцедуры


// Только для внутреннего использования.
Процедура ПоказатьОшибкуОбращенияКПрограмме(ЗаголовокФормы, ЗаголовокОшибки, ОшибкаНаКлиенте, ОшибкаНаСервере,
				ДополнительныеПараметры = Неопределено, ОбработкаПродолжения = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказатьИнструкцию",                Ложь);
	ПараметрыФормы.Вставить("ПоказатьПереходКНастройкеПрограмм", Ложь);
	ПараметрыФормы.Вставить("ПоказатьУстановкуРасширения",       Ложь);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДополнительныеПараметры);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗаголовокФормы",  ЗаголовокФормы);
	ПараметрыФормы.Вставить("ЗаголовокОшибки", ЗаголовокОшибки);
	
	ПараметрыФормы.Вставить("ОшибкаНаКлиенте", ОшибкаНаКлиенте);
	ПараметрыФормы.Вставить("ОшибкаНаСервере", ОшибкаНаСервере);
	
	ПараметрыФормы.Вставить("РасширениеПодключено", ПодключитьРасширениеРаботыСКриптографией());
	
	ОткрытьФорму("Справочник.ПрограммыЭлектроннойПодписиИШифрования.Форма.ОшибкаОбращенияКПрограмме",
		ПараметрыФормы,,, ВариантОткрытияОкна.ОтдельноеОкно, , ОбработкаПродолжения);
	
КонецПроцедуры


// Только для внутреннего использования.
Процедура УстановитьПарольСертификата(СертификатСсылка, Пароль, ПояснениеПароля = Неопределено) Экспорт
	
	ФормаПередачаПараметров().УстановитьПарольСертификата(СертификатСсылка, Пароль, ПояснениеПароля);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ОткрытьНовуюФорму(ВидФормы, КлиентскиеПараметры, СерверныеПараметры, ОбработкаЗавершения) Экспорт
	
	ОписаниеДанных = КлиентскиеПараметры.ОписаниеДанных;
	
	СерверныеПараметры.Вставить("БезПодтверждения", Ложь);
	
	Если СерверныеПараметры.Свойство("ОтборСертификатов")
	   И ТипЗнч(СерверныеПараметры.ОтборСертификатов) = Тип("Массив")
	   И СерверныеПараметры.ОтборСертификатов.Количество() = 1
	   И ОписаниеДанных.Свойство("БезПодтверждения")
	   И ОписаниеДанных.БезПодтверждения Тогда
		
		СерверныеПараметры.Вставить("БезПодтверждения", Истина);
	КонецЕсли;
	
	НастроитьПредставлениеДанных(ОписаниеДанных, СерверныеПараметры);
	
	СерверныеПараметры.Вставить("ОтпечаткиСертификатовНаКлиенте", ОтпечаткиСертификатовНаКлиенте());
	
	ФормаПередачаПараметров().ОткрытьНовуюФорму(ВидФормы,
		СерверныеПараметры, КлиентскиеПараметры, ОбработкаЗавершения);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура НастроитьПредставлениеДанных(ОписаниеДанных, СерверныеПараметры) Экспорт
	
	ЭтоНаборЭлементовДанных = Ложь;
	
	Если ОписаниеДанных.Свойство("СписокПредставлений") Тогда
		СписокПредставлений = ОписаниеДанных.СписокПредставлений;
	Иначе
		СписокПредставлений = Новый Массив;
		
		Если ОписаниеДанных.Свойство("Данные")
		 Или ОписаниеДанных.Свойство("Объект") Тогда
			
			ЗаполнитьСписокПредставлений(СписокПредставлений, ОписаниеДанных);
		Иначе
			Для каждого ЭлементДанных Из ОписаниеДанных.НаборДанных Цикл
				ЗаполнитьСписокПредставлений(СписокПредставлений, ЭлементДанных);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийСписокПредставлений = Новый СписокЗначений;
	
	Для каждого ЭлементСписка Из СписокПредставлений Цикл
		Если ТипЗнч(ЭлементСписка) = Тип("Строка") Тогда
			Представление = ЭлементСписка.Представление;
			Значение = Неопределено;
		ИначеЕсли ТипЗнч(ЭлементСписка) = Тип("Структура") Тогда
			Представление = ЭлементСписка.Представление;
			Значение = ЭлементСписка.Значение;
		Иначе // Ссылка
			Представление = "";
			Значение = ЭлементСписка.Значение;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
			Представление = ЭлементСписка.Представление;
		Иначе
			Представление = Строка(ЭлементСписка.Значение);
		КонецЕсли;
		ТекущийСписокПредставлений.Добавить(Значение, Представление);
	КонецЦикла;
	
	Если ТекущийСписокПредставлений.Количество() > 1 Тогда
		СерверныеПараметры.Вставить("ПредставлениеДанныхОткрывается", Истина);
		СерверныеПараметры.Вставить("ПредставлениеДанных", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ОписаниеДанных.ПредставлениеНабора, ОписаниеДанных.НаборДанных.Количество()));
	Иначе
		СерверныеПараметры.Вставить("ПредставлениеДанныхОткрывается",
			ЗначениеЗаполнено(ТекущийСписокПредставлений[0].Значение));
		
		СерверныеПараметры.Вставить("ПредставлениеДанных",
			ТекущийСписокПредставлений[0].Представление);
	КонецЕсли;
	
	ОписаниеДанных.Вставить("ТекущийСписокПредставлений", ТекущийСписокПредставлений);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура НачалоВыбораСертификатаПриУстановленномОтборе(Форма) Экспорт
	
	ДоступныеСертификаты = "";
	НедоступныеСертификаты = "";
	
	Текст = НСтр("ru = 'Сертификаты, которые могут быть использованы для этой операции ограничены.'");
	
	Для каждого ЭлементСписка Из Форма.ОтборСертификатов Цикл
		Если Форма.СертификатСписокВыбора.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
			НедоступныеСертификаты = НедоступныеСертификаты + Символы.ПС + Строка(ЭлементСписка.Значение);
		Иначе
			ДоступныеСертификаты = ДоступныеСертификаты + Символы.ПС + Строка(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДоступныеСертификаты) Тогда
		Заголовок = НСтр("ru = 'Следующие разрешенные сертификаты доступны для выбора:'");
		Текст = Текст + Символы.ПС + Символы.ПС + Заголовок + Символы.ПС + СокрЛП(ДоступныеСертификаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НедоступныеСертификаты) Тогда
		Если ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().СоздаватьЭлектронныеПодписиНаСервере Тогда
			Если ЗначениеЗаполнено(ДоступныеСертификаты) Тогда
				Заголовок = НСтр("ru = 'Следующие разрешенные сертификаты не найдены ни на компьютере, ни на сервере:'");
			Иначе
				Заголовок = НСтр("ru = 'Ни один из следующих разрешенных сертификатов не найден ни на компьютере, ни на сервере:'");
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ДоступныеСертификаты) Тогда
				Заголовок = НСтр("ru = 'Следующие разрешенные сертификаты не найдены на компьютере:'");
			Иначе
				Заголовок = НСтр("ru = 'Ни один из следующих разрешенных сертификатов не найден на компьютере:'");
			КонецЕсли;
		КонецЕсли;
		Текст = Текст + Символы.ПС + Символы.ПС + Заголовок + Символы.ПС + СокрЛП(НедоступныеСертификаты);
	КонецЕсли;
	
	ПоказатьПредупреждение(, Текст);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ВыборСертификатаДляПодписанияИлиРасшифровки(СерверныеПараметры, ВладелецНовойФормы = Неопределено) Экспорт
	
	Если ВладелецНовойФормы = Неопределено Тогда
		ВладелецНовойФормы = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ОшибкаПолученияСертификатовНаКлиенте = Новый Структура;
	СвойстваСертификатовНаКлиенте = Новый Массив;
	
	МенеджерКриптографии = МенеджерКриптографии("ПолучениеСертификатов",
		Ложь, ОшибкаПолученияСертификатовНаКлиенте);
	
	ЭлектроннаяПодписьСлужебныйКлиентСервер.ДобавитьСвойстваСертификатовИзХранилища(
		СвойстваСертификатовНаКлиенте, МенеджерКриптографии, Истина, Ложь);
	
	СерверныеПараметры.Вставить("СвойстваСертификатовНаКлиенте", СвойстваСертификатовНаКлиенте);
	СерверныеПараметры.Вставить("ОшибкаПолученияСертификатовНаКлиенте", ОшибкаПолученияСертификатовНаКлиенте);
	
	ФормаПередачаПараметров().ОткрытьНовуюФорму("ВыборСертификатаДляПодписанияИлиРасшифровки",
		СерверныеПараметры, , , ВладелецНовойФормы);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПроверитьСертификатСправочника(Сертификат, ДополнительныеПараметры) Экспорт
	
	СерверныеПараметры = Новый Структура;
	СерверныеПараметры.Вставить("ЗаголовокФормы");
	СерверныеПараметры.Вставить("ПроверкаПриВыборе");
	СерверныеПараметры.Вставить("ПараметрыДополнительныхПроверок");
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СерверныеПараметры, ДополнительныеПараметры);
	КонецЕсли;
	
	СерверныеПараметры.Вставить("Сертификат", Сертификат);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		КлиентскиеПараметры = ДополнительныеПараметры;
	Иначе
		КлиентскиеПараметры = Новый Структура;
	КонецЕсли;
	
	ВладелецФормы = Неопределено;
	КлиентскиеПараметры.Свойство("ВладелецФормы", ВладелецФормы);
	
	ОбработкаЗавершения = Неопределено;
	КлиентскиеПараметры.Свойство("ОбработкаЗавершения", ОбработкаЗавершения);
	
	ФормаПередачаПараметров().ОткрытьНовуюФорму("ПроверкаСертификата",
		СерверныеПараметры, КлиентскиеПараметры, ОбработкаЗавершения, ВладелецФормы);
	
КонецПроцедуры


// Только для внутреннего использования.
Процедура СтандартноеЗавершение(Успех, КлиентскиеПараметры) Экспорт
	
	КлиентскиеПараметры.ОписаниеДанных.Вставить("Успех", Успех = Истина);
	
	Если КлиентскиеПараметры.ОбработкаРезультата <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(КлиентскиеПараметры.ОбработкаРезультата,
			КлиентскиеПараметры.ОписаниеДанных);
	КонецЕсли;
	
КонецПроцедуры


// Только для внутреннего использования.
Процедура СохранитьДанныеВместеСПодписьюНачало(Результат, ПараметрыВыполнения) Экспорт
	
	СохранятьВсеПодписи = ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки(
		).ДействияПриСохраненииСЭП = "СохранятьВсеПодписи";
	
	ОписаниеДанных = ПараметрыВыполнения.ОписаниеДанных;
	
	СерверныеПараметры = Новый Структура;
	СерверныеПараметры.Вставить("ЗаголовокДанных",     НСтр("ru = 'Данные'"));
	СерверныеПараметры.Вставить("ПоказатьКомментарий", Ложь);
	ЗаполнитьЗначенияСвойств(СерверныеПараметры, ОписаниеДанных);
	
	СерверныеПараметры.Вставить("СохранятьВсеПодписи", СохранятьВсеПодписи);
	СерверныеПараметры.Вставить("Объект", ОписаниеДанных.Объект);
	
	НастроитьПредставлениеДанных(ОписаниеДанных, СерверныеПараметры);
	
	ФормаСохранения = ОткрытьФорму("ОбщаяФорма.СохранениеВместеСЭлектроннойПодписью", СерверныеПараметры,,,,,
		Новый ОписаниеОповещения("СохранитьДанныеВместеСПодписьюПродолжение", ЭтотОбъект, ПараметрыВыполнения));
	
	Завершить = Ложь;
	
	Если ФормаСохранения = Неопределено Тогда
		Завершить = Истина;
	Иначе
		ФормаСохранения.ОписаниеДанных = ОписаниеДанных;
		
		Если СохранятьВсеПодписи Тогда
			СохранитьДанныеВместеСПодписьюПродолжение(ФормаСохранения.ТаблицаПодписей, ПараметрыВыполнения);
			Возврат;
			
		ИначеЕсли Не ФормаСохранения.Открыта() Тогда
			Завершить = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Завершить И ПараметрыВыполнения.ОбработкаРезультата <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработкаРезультата, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура СохранитьДанныеВместеСПодписьюПродолжение(КоллекцияПодписей, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(КоллекцияПодписей) <> Тип("ДанныеФормыКоллекция") Тогда
		Если ПараметрыВыполнения.ОбработкаРезультата <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработкаРезультата, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("КоллекцияПодписей", КоллекцияПодписей);
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОписаниеДанных.Данные,
		Новый ОписаниеОповещения("СохранитьДанныеВместеСПодписьюПродолжениеПослеВыбораПодписей",
			ЭтотОбъект, ПараметрыВыполнения));
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура СохранитьДанныеВместеСПодписьюПродолжениеПослеВыбораПодписей(ПолноеИмяФайла, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(ПолноеИмяФайла) <> Тип("Строка") Или ПустаяСтрока(ПолноеИмяФайла) Тогда
		Если ПараметрыВыполнения.ОбработкаРезультата <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработкаРезультата, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОсновнойФайл = Новый Файл(ПолноеИмяФайла);
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		ПутьКФайлам = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ОсновнойФайл.Путь);
		ПолучаемыеФайлы = Новый Массив;
	КонецЕсли;
	
	ИменаФайлов = Новый Соответствие;
	ИменаФайлов.Вставить(ОсновнойФайл.Имя, Истина);
	ЕстьПолученныеФайлы = Ложь;
	
	РасширениеДляФайловПодписи = ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	
	Для Каждого ОписаниеПодписи Из ПараметрыВыполнения.КоллекцияПодписей Цикл
		Если Не ОписаниеПодписи.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяФайлаПодписи = ОписаниеПодписи.ИмяФайлаПодписи;
		
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда 
			ИмяФайлаПодписи = ОсновнойФайл.ИмяБезРасширения + " - "
				+ Строка(ОписаниеПодписи.КомуВыданСертификат) + "." + РасширениеДляФайловПодписи;
		КонецЕсли;
		
		ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи);
		ФайлПоИмени = Новый Файл(ИмяФайлаПодписи);
		ИмяФайлаПодписиБезРасширения = ФайлПоИмени.ИмяБезРасширения;
		
		Счетчик = 0;
		Пока Истина Цикл
			Счетчик = Счетчик + 1;
			
			Если ПодключитьРасширениеРаботыСФайлами() Тогда
				ПолноеИмяФайла = ПутьКФайлам + ИмяФайлаПодписи;
				
				ФайлПоИмени = Новый Файл(ПолноеИмяФайла);
				ФайлСуществует = ФайлПоИмени.Существует();
			Иначе
				ПолноеИмяФайла = ИмяФайлаПодписи;
				ФайлСуществует = ИменаФайлов[ПолноеИмяФайла] <> Неопределено;
			КонецЕсли;
			
			Если Не ФайлСуществует Тогда
				Прервать;
			КонецЕсли;
			
			ИмяФайлаПодписи = ИмяФайлаПодписиБезРасширения + " (" + Строка(Счетчик) + ")" + "." + РасширениеДляФайловПодписи;
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи);
		КонецЦикла;
		
		Файл = Новый Файл(ПолноеИмяФайла);
		ИменаФайлов.Вставить(Файл.Имя, Ложь);
		
		Если ПодключитьРасширениеРаботыСФайлами() Тогда
			Описание = Новый ОписаниеПередаваемогоФайла(Файл.Имя, ОписаниеПодписи.АдресПодписи);
			ПолучаемыеФайлы.Добавить(Описание);
		Иначе
			// Сохранение Файла из базы данных на диск.
			Если ПолучитьФайл(ОписаниеПодписи.АдресПодписи, Файл.Имя) Тогда
				ЕстьПолученныеФайлы = Истина;
				ИменаФайлов.Вставить(Файл.Имя, Ложь);
			КонецЕсли;
			УдалитьИзВременногоХранилища(ОписаниеПодписи.АдресПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		// Сохранение Файла из базы данных на диск.
		ПолученныеФайлы = Новый Массив;
		Вызовы = Новый Массив;
		Вызов = Новый Массив;
		Вызов.Добавить("ПолучитьФайлы");
		Вызов.Добавить(ПолучаемыеФайлы);
		Вызов.Добавить(ПолученныеФайлы);
		Вызов.Добавить(ПутьКФайлам);
		Вызов.Добавить(Ложь);
		Вызовы.Добавить(Вызов);
		Если ЗапроситьРазрешениеПользователя(Вызовы) Тогда
			ЕстьПолученныеФайлы = ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, ПутьКФайлам, Ложь);
			Для каждого ПолученныйФайл Из ПолученныеФайлы Цикл
				Файл = Новый Файл(ПолученныйФайл.Имя);
				ИменаФайлов.Вставить(Описание.Имя, Файл.Имя);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого ОписаниеПодписи Из ПараметрыВыполнения.КоллекцияПодписей Цикл
			УдалитьИзВременногоХранилища(ОписаниеПодписи.АдресПодписи);
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьПолученныеФайлы
	   И ПараметрыВыполнения.КоллекцияПодписей.Количество() <> 0 Тогда
		
		Если ПодключитьРасширениеРаботыСФайлами() Тогда
			Текст = НСтр("ru = 'Каталог:'") + Символы.ПС;
			Текст = Текст + ПутьКФайлам;
			Текст = Текст + Символы.ПС + Символы.ПС;
		Иначе
			Текст = "";
		КонецЕсли;
		
		Текст = Текст + НСтр("ru = 'Файлы:'") + Символы.ПС;
		
		Для Каждого КлючИЗначение Из ИменаФайлов Цикл
			Текст = Текст + КлючИЗначение.Ключ + Символы.ПС;
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура("Текст", Текст);
		ОткрытьФорму("ОбщаяФорма.ОтчетОСохраненииФайловЭлектронныхПодписей", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры


// Только для внутреннего использования.
Процедура ОткрытьИнструкциюПоРаботеСПрограммами() Экспорт
	
	Раздел = "БухгалтерскийИНалоговыйУчет";
	ЭлектроннаяПодписьПереопределяемыйКлиент.ПриОпределенииРазделаСтатьиНаИТС(Раздел);
	
	Если Раздел = "УчетВГосударственныхУчреждениях" Тогда
		ПерейтиПоНавигационнойСсылке("http://its.1c.ru/bmk/bud/digsig");
	Иначе
		ПерейтиПоНавигационнойСсылке("http://its.1c.ru/bmk/comm/digsig");
	КонецЕсли;
	
КонецПроцедуры


// Продолжение процедуры ЭлектроннаяПодписьКлиент.УстановитьРасширение.
Процедура УстановитьРасширениеПродолжение(РасширениеДляРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ОбработчикРезультата = ДополнительныеПараметры.ОбработчикРезультата;
	ТекстВопроса         = ДополнительныеПараметры.ТекстВопроса;
	ЗаголовокВопроса     = ДополнительныеПараметры.ЗаголовокВопроса;
	БезВопроса           = ДополнительныеПараметры.БезВопроса;
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		Если ОбработчикРезультата <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОбработчикРезультата, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПодключитьРасширениеРаботыСКриптографией() Тогда
		Если ОбработчикРезультата <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОбработчикРезультата, Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Обработчик = Новый ОписаниеОповещения("УстановитьРасширениеПослеОтвета", ЭтотОбъект, ДополнительныеПараметры);
	
	Если БезВопроса Тогда
		ВыполнитьОбработкуОповещения(Обработчик, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокВопроса", ЗаголовокВопроса);
	ПараметрыФормы.Вставить("ТекстВопроса", ТекстВопроса);
	
	ОткрытьФорму("ОбщаяФорма.ВопросОбУстановкеРасширенияРаботыСКриптографией",
		ПараметрыФормы,,,,, Обработчик);
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.УстановитьРасширение.
Процедура УстановитьРасширениеПослеОтвета(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Обработчик = Новый ОписаниеОповещения("УстановитьРасширениеПослеЗавершения", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСКриптографией(Обработчик);
	Иначе
		Если ДополнительныеПараметры.ОбработчикРезультата <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.УстановитьРасширение.
Процедура УстановитьРасширениеПослеЗавершения(ДополнительныеПараметры) Экспорт
	
	Результат = ПодключитьРасширениеРаботыСКриптографией();
	
	Если ДополнительныеПараметры.ОбработчикРезультата <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Результат);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции управляемых форм.

// Только для внутреннего использования.
Функция ПродолжитьОткрытиеНачало(Форма, КлиентскиеПараметры, Шифрование = Ложь, Расшифровка = Ложь) Экспорт
	
	Если Не Шифрование Тогда
		ВходныеПараметры = Неопределено;
		КлиентскиеПараметры.ОписаниеДанных.Свойство("ПараметрыДополнительныхДействий", ВходныеПараметры);
		ВыходныеПараметры = Форма.ВыходныеПараметрыДополнительныхДействий;
		Форма.ВыходныеПараметрыДополнительныхДействий = Неопределено;
		ЭлектроннаяПодписьПереопределяемыйКлиент.ПередНачаломОперации(
			?(Расшифровка, "Расшифровка", "Подписание"), ВходныеПараметры, ВыходныеПараметры);
	КонецЕсли;
	
	Если ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().СоздаватьЭлектронныеПодписиНаСервере Тогда
		Если ЗначениеЗаполнено(Форма.МенеджерКриптографииНаСервереОписаниеОшибки) Тогда
			ОписаниеОшибки = Новый Структура;
			МенеджерКриптографии("ПолучениеСертификатов",
				Ложь, ОписаниеОшибки);
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ПоказатьОшибкуОбращенияКПрограмме(
					НСтр("ru = 'Требуется программа электронной подписи и шифрования'"),
					"", ОписаниеОшибки, Форма.МенеджерКриптографииНаСервереОписаниеОшибки);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если МенеджерКриптографии("ПолучениеСертификатов") = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Только для внутреннего использования.
Функция ОтпечаткиСертификатовНаКлиенте() Экспорт
	
	ОтпечаткиСертификатовНаКлиенте = Новый Массив;
	МенеджерКриптографии = МенеджерКриптографии("ПолучениеСертификатов", Ложь);
	
	ЭлектроннаяПодписьСлужебныйКлиентСервер.ДобавитьОтпечаткиСертификатовИзЛичногоХранилища(
		ОтпечаткиСертификатовНаКлиенте, МенеджерКриптографии);
	
	Возврат ОтпечаткиСертификатовНаКлиенте;
	
КонецФункции

// Только для внутреннего использования.
Процедура ОбработатьПарольВФорме(Форма, ВнутренниеДанные, СвойстваПароля, ДополнительныеПараметры = Неопределено, НовыйПароль = Null) Экспорт
	
	Если ТипЗнч(СвойстваПароля) <> Тип("Структура") Тогда
		СвойстваПароля = Новый Структура;
		СвойстваПароля.Вставить("Значение", Неопределено);
		СвойстваПароля.Вставить("ОбработкаПоясненияПароля", Неопределено);
		СвойстваПароля.Вставить("ПарольПроверен", Ложь); // Включается когда указан НовыйПароль и
		// при успешном выполнении операции. Разрешает запоминание без проверки.
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Сертификат", Форма.Сертификат);
	ДополнительныеПараметры.Вставить("УсиленнаяЗащитаЗакрытогоКлюча",
		Форма.СертификатУсиленнаяЗащитаЗакрытогоКлюча);
	
	Если Не ДополнительныеПараметры.Свойство("ПриИзмененииРеквизитаПароль") Тогда
		ДополнительныеПараметры.Вставить("ПриИзмененииРеквизитаПароль", Ложь);
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("ПриИзмененииРеквизитаЗапомнитьПароль") Тогда
		ДополнительныеПараметры.Вставить("ПриИзмененииРеквизитаЗапомнитьПароль", Ложь);
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("ПриУспешномВыполненииОперации") Тогда
		ДополнительныеПараметры.Вставить("ПриУспешномВыполненииОперации", Ложь);
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("ПриИзмененииСвойствСертификата") Тогда
		ДополнительныеПараметры.Вставить("ПриИзмененииСвойствСертификата", Ложь);
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПарольВПамяти", Ложь);
	ДополнительныеПараметры.Вставить("ПарольУстановленПрограммно", Ложь);
	ДополнительныеПараметры.Вставить("ПояснениеПароля");
	
	ОбработатьПароль(ВнутренниеДанные, Форма.Пароль, СвойстваПароля, Форма.ЗапомнитьПароль,
		ДополнительныеПараметры, НовыйПароль);
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Найти("Страницы") = Неопределено
	 Или Элементы.Найти("СтраницаПояснениеУсиленногоПароля") = Неопределено
	 Или Элементы.Найти("СтраницаЗапоминаниеПароля") = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.УсиленнаяЗащитаЗакрытогоКлюча Тогда
		Элементы.ПарольЗаголовок.Доступность = Ложь;
		Элементы.Пароль.Доступность = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПояснениеУсиленногоПароля;
	Иначе
		Элементы.ПарольЗаголовок.Доступность = Истина;
		
		Если ДополнительныеПараметры.ПарольУстановленПрограммно Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПояснениеУстановленногоПароля;
			ПояснениеПароля = ДополнительныеПараметры.ПояснениеПароля;
			Элементы.ПояснениеУстановленногоПароля.Заголовок   = ПояснениеПароля.ТекстПояснения;
			Элементы.ПояснениеУстановленногоПароля.Гиперссылка = ПояснениеПароля.ПояснениеГиперссылка;
			Элементы.ПояснениеУстановленногоПароляРасширеннаяПодсказка.Заголовок = ПояснениеПароля.ТекстПодсказки;
			СвойстваПароля.ОбработкаПоясненияПароля = ПояснениеПароля.ОбработкаДействия;
			Элементы.Пароль.Доступность = Истина;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗапоминаниеПароля;
			Элементы.Пароль.Доступность = Не ДополнительныеПараметры.ПарольВПамяти;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПарольУказан",
		ДополнительныеПараметры.ПарольУстановленПрограммно Или ДополнительныеПараметры.ПарольВПамяти);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПояснениеУстановленногоПароляНажатие(Форма, Элемент, СвойстваПароля) Экспорт
	
	Если ТипЗнч(СвойстваПароля.ОбработкаПоясненияПароля) = Тип("ОписаниеОповещения") Тогда
		Результат = Новый Структура;
		Результат.Вставить("Сертификат", Форма.Сертификат);
		Результат.Вставить("Действие", "ПояснениеНажатие");
		ВыполнитьОбработкуОповещения(СвойстваПароля.ОбработкаПоясненияПароля, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПояснениеУстановленногоПароляОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылка,
			СтандартнаяОбработка, СвойстваПароля) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(СвойстваПароля.ОбработкаПоясненияПароля) = Тип("ОписаниеОповещения") Тогда
		Результат = Новый Структура;
		Результат.Вставить("Сертификат", Форма.Сертификат);
		Результат.Вставить("Действие", НавигационнаяСсылка);
		ВыполнитьОбработкуОповещения(СвойстваПароля.ОбработкаПоясненияПароля, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПредставлениеДанныхНажатие(Форма, Элемент, СтандартнаяОбработка, ОписаниеДанных) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекущийСписокПредставлений = ОписаниеДанных.ТекущийСписокПредставлений;
	
	Если ТекущийСписокПредставлений.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокПредставленийДанных", ТекущийСписокПредставлений);
		ПараметрыФормы.Вставить("ПредставлениеДанных", Форма.ПредставлениеДанных);
		ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПросмотрДанных",
			ПараметрыФормы, Элемент);
	Иначе
		ПоказатьЗначение(, ТекущийСписокПредставлений[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

// Для процедур УстановитьПарольСертификата, ОткрытьНовуюФорму, ВыборСертификатаДляПодписанияИлиРасшифровки,
// ПроверитьСертификатСправочника.
//
Функция ФормаПередачаПараметров()
	
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыЭлектроннойПодписиИШифрования";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Новый Соответствие);
	КонецЕсли;
	
	Форма = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыЭлектроннойПодписиИШифрования"].Получить("ФормаПередачаПараметров");
	
	Если Форма = Неопределено Тогда
		Форма = ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПередачаПараметров");
		ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыЭлектроннойПодписиИШифрования"].Вставить("ФормаПередачаПараметров", Форма);
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции

// Для процедуры ОбработатьПарольВФорме.
Процедура ОбработатьПароль(ВнутренниеДанные, РеквизитПароль, СвойстваПароля,
			РеквизитЗапомнитьПароль, ДополнительныеПараметры, НовыйПароль = Null)
	
	Сертификат = ДополнительныеПараметры.Сертификат;
	
	ХранилищеПаролей = ВнутренниеДанные.Получить("ХранилищеПаролей");
	Если ХранилищеПаролей = Неопределено Тогда
		ХранилищеПаролей = Новый Соответствие;
		ВнутренниеДанные.Вставить("ХранилищеПаролей", ХранилищеПаролей);
	КонецЕсли;
	
	УстановленныеПароли = ВнутренниеДанные.Получить("УстановленныеПароли");
	Если УстановленныеПароли = Неопределено Тогда
		УстановленныеПароли = Новый Соответствие;
		ВнутренниеДанные.Вставить("УстановленныеПароли", УстановленныеПароли);
		ВнутренниеДанные.Вставить("ПоясненияУстановленныхПаролей", Новый Соответствие);
	КонецЕсли;
	
	УстановленныйПароль = УстановленныеПароли.Получить(Сертификат);
	ДополнительныеПараметры.Вставить("ПарольУстановленПрограммно", УстановленныйПароль <> Неопределено);
	Если УстановленныйПароль <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ПояснениеПароля",
			ВнутренниеДанные.Получить("ПоясненияУстановленныхПаролей").Получить(Сертификат));
	КонецЕсли;
	
	Если ДополнительныеПараметры.УсиленнаяЗащитаЗакрытогоКлюча Тогда
		СвойстваПароля.Значение = "";
		СвойстваПароля.ПарольПроверен = Ложь;
		РеквизитПароль = "";
		Значение = ХранилищеПаролей.Получить(Сертификат);
		Если Значение <> Неопределено Тогда
			ХранилищеПаролей.Удалить(Сертификат);
			Значение = Неопределено;
		КонецЕсли;
		ДополнительныеПараметры.Вставить("ПарольВПамяти", Ложь);
		
		Возврат;
	КонецЕсли;
	
	Пароль = ХранилищеПаролей.Получить(Сертификат);
	ДополнительныеПараметры.Вставить("ПарольВПамяти", Пароль <> Неопределено);
	
	Если ДополнительныеПараметры.ПриИзмененииРеквизитаПароль Тогда
		СвойстваПароля.Значение = РеквизитПароль;
		СвойстваПароля.ПарольПроверен = Ложь;
		РеквизитПароль = ?(СвойстваПароля.Значение <> "", "****************", "");
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПриИзмененииРеквизитаЗапомнитьПароль Тогда
		Если Не РеквизитЗапомнитьПароль Тогда
			Значение = ХранилищеПаролей.Получить(Сертификат);
			Если Значение <> Неопределено Тогда
				ХранилищеПаролей.Удалить(Сертификат);
				Значение = Неопределено;
			КонецЕсли;
			ДополнительныеПараметры.Вставить("ПарольВПамяти", Ложь);
			
		ИначеЕсли СвойстваПароля.ПарольПроверен Тогда
			ХранилищеПаролей.Вставить(Сертификат, СвойстваПароля.Значение);
			ДополнительныеПараметры.Вставить("ПарольВПамяти", Истина);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПриУспешномВыполненииОперации Тогда
		Если РеквизитЗапомнитьПароль
		   И НЕ ДополнительныеПараметры.ПарольУстановленПрограммно Тогда
			
			ХранилищеПаролей.Вставить(Сертификат, СвойстваПароля.Значение);
			ДополнительныеПараметры.Вставить("ПарольВПамяти", Истина);
			СвойстваПароля.ПарольПроверен = Истина;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПарольУстановленПрограммно Тогда
		Если НовыйПароль <> Null Тогда
			СвойстваПароля.Значение = Строка(НовыйПароль);
		Иначе
			СвойстваПароля.Значение = Строка(УстановленныйПароль);
		КонецЕсли;
		СвойстваПароля.ПарольПроверен = Ложь;
		РеквизитПароль = ?(СвойстваПароля.Значение <> "", "****************", "");
		
		Возврат;
	КонецЕсли;
	
	Если НовыйПароль <> Null Тогда
		// Установка нового пароля к новому сертификату.
		Если НовыйПароль <> Неопределено Тогда
			СвойстваПароля.Значение = Строка(НовыйПароль);
			СвойстваПароля.ПарольПроверен = Истина;
			НовыйПароль = "";
			Если ХранилищеПаролей.Получить(Сертификат) <> Неопределено Или РеквизитЗапомнитьПароль Тогда
				ХранилищеПаролей.Вставить(Сертификат, СвойстваПароля.Значение);
				ДополнительныеПараметры.Вставить("ПарольВПамяти", Истина);
			КонецЕсли;
		ИначеЕсли ХранилищеПаролей.Получить(Сертификат) <> Неопределено Тогда
			// Удаление сохраненного пароля из хранилища.
			РеквизитЗапомнитьПароль = Ложь;
			ХранилищеПаролей.Удалить(Сертификат);
			ДополнительныеПараметры.Вставить("ПарольВПамяти", Ложь);
		КонецЕсли;
		РеквизитПароль = ?(СвойстваПароля.Значение <> "", "****************", "");
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПриИзмененииСвойствСертификата Тогда
		Возврат;
	КонецЕсли;
	
	// Получение пароля из хранилища.
	Значение = ХранилищеПаролей.Получить(Сертификат);
	ДополнительныеПараметры.Вставить("ПарольВПамяти", Значение <> Неопределено);
	РеквизитЗапомнитьПароль = ДополнительныеПараметры.ПарольВПамяти;
	СвойстваПароля.Значение = Строка(Значение);
	СвойстваПароля.ПарольПроверен = ДополнительныеПараметры.ПарольВПамяти;
	Значение = Неопределено;
	РеквизитПароль = ?(СвойстваПароля.Значение <> "", "****************", "");
	
КонецПроцедуры

// Для процедуры НастроитьПредставлениеДанных.
Процедура ЗаполнитьСписокПредставлений(СписокПредставлений, ЭлементДанных)
	
	ЭлементСписка = Новый Структура("Значение, Представление", Неопределено, "");
	СписокПредставлений.Добавить(ЭлементСписка);
	
	Если ЭлементДанных.Свойство("Представление")
	   И ТипЗнч(ЭлементДанных.Представление) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭлементСписка, ЭлементДанных.Представление);
		Возврат;
	КонецЕсли;
	
	Если ЭлементДанных.Свойство("Представление")
	   И ТипЗнч(ЭлементДанных.Представление) <> Тип("Строка") Тогда
	
		ЭлементСписка.Значение = ЭлементДанных.Представление;
		
	ИначеЕсли ЭлементДанных.Свойство("Объект")
	        И ТипЗнч(ЭлементДанных.Объект) <> Тип("ОписаниеОповещения") Тогда
		
		ЭлементСписка.Значение = ЭлементДанных.Объект;
	КонецЕсли;
	
	Если ЭлементДанных.Свойство("Представление") Тогда
		ЭлементСписка.Представление = ЭлементДанных.Представление;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
