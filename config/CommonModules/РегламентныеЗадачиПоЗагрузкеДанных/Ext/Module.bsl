Функция МожноЗапускРегламентныхЗаданий() Экспорт
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().Имя = Константы.ПользовательДляРегламентныхЗаданий.Получить().Наименование;
КонецФункции

Процедура ПодключениеКОфиснойБазе () Экспорт
	V8 = Новый COMОбъект("V83.COMConnector");    
	Попытка               
    	Connect = V8.Connect("srvr = """+Константы.Сервер1с8.Получить()+"""; ref = """+Константы.ИмяБазы1с8.Получить()+"""; usr = """+Константы.Пользователь1с8.Получить()+"""; pwd = """+Константы.Пароль1с8.Получить()+"""");       	
	Исключение        
    	Сообщить("Подключение не удалось");       
    КонецПопытки;

	Если Connect <> Неопределено Тогда
		мВыводВЛог("*******ПОДКЛЮЧИЛИСЬ К БАЗЕ*******");
		ЗагрузкаМагазинов(Connect);
		ОбновлениеПользователей(Connect);
		ОбновлениеСправочникаПодразделения_НД_РД_УМ(Connect);
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузкаМагазинов(База)
	Запрос = База.NewObject("Запрос");     
   	Запрос.Текст = "ВЫБРАТЬ
	|Склады.Наименование,
	|Склады.Родитель,
	|Склады.Подразделение.Код КАК Код,
	|Склады.Подразделение.МагазинНеРаботает КАК МагазинНеРаботает
	|ИЗ
	|Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.ВидСклада <> ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Оптовый) ИЛИ Склады.ВидСклада есть NULL";     
	
	Выборка = Запрос.Выполнить().Выбрать();          
	КолНовыхГородов = 0;
	КолНовыхМагазинов = 0;
	Пока Выборка.Следующий() Цикл 
		Если Выборка.Родитель.Наименование = "" Тогда
			ИскомыйГород = Справочники.Города.НайтиПоНаименованию(Выборка.Наименование);
			Если ИскомыйГород = Справочники.Города.ПустаяСсылка() ИЛИ ИскомыйГород = Неопределено Тогда
				НовГород = Справочники.Города.СоздатьЭлемент();
				НовГород.Наименование = Выборка.Наименование;
				НовГород.Записать();
				КолНовыхГородов = КолНовыхГородов + 1;
			КонецЕсли;	
		Иначе
			ИскомаяГруппа = Справочники.Подразделения.НайтиПоНаименованию(Выборка.Родитель.Наименование);
			Если ИскомаяГруппа = Справочники.Подразделения.ПустаяСсылка() ИЛИ ИскомаяГруппа = Неопределено Тогда
				ИскомаяГруппа = Справочники.Подразделения.СоздатьГруппу();
				ИскомаяГруппа.Наименование = Выборка.Родитель.Наименование;
				ИскомаяГруппа.Записать();
			КонецЕсли;
			ИскомыйМагазин = Справочники.Подразделения.НайтиПоРеквизиту("КодПодразделенияУТ",Выборка.Код);
			//Дьяченко А. 200319
			//Если ИскомыйМагазин = Справочники.Подразделения.ПустаяСсылка() ИЛИ ИскомыйМагазин = Неопределено Тогда
			Если (ИскомыйМагазин = Справочники.Подразделения.ПустаяСсылка() ИЛИ ИскомыйМагазин = Неопределено) И ЗначениеЗаполнено("Выборка.Код") Тогда
				НовПодр = Справочники.Подразделения.СоздатьЭлемент();
				НовПодр.Родитель = ИскомаяГруппа;
				НовПодр.Наименование = Выборка.Наименование;
				НовПодр.КодПодразделенияУТ = Выборка.Код;
				НовПодр.Закрыт = Выборка.МагазинНеРаботает;
				НовПодр.Записать();
				КолНовыхМагазинов = КолНовыхМагазинов + 1;
				ИскомыйМагазин = НовПодр.Ссылка;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ИскомыйМагазин.КодПодразделенияУТ) и НЕ ИскомыйМагазин.ЭтоГруппа Тогда
				СпрОбъект = ИскомыйМагазин.ПолучитьОбъект();
				СпрОбъект.КодПодразделенияУТ = Выборка.Код;
				СпрОбъект.Записать();
			КонецЕСли;
		КонецЕсли;
	КонецЦикла;
	ТекстСообщения = "Обновление магазинов и городов завершено. Записано новых городов = "+КолНовыхГородов + ", новых магазинов = " + КолНовыхМагазинов;
	мВыводВЛог(ТекстСообщения);
	Сообщить(ТекстСообщения);
	
	//Запись в никуда|	|	|
	//			     v  v   v
	//ЗаписьЖурналаРегистрации("Обновление городов и подразделений",,,,"Обновление магазинов и городов завершено. Записано новых городов = "+КолНовыхГородов + ", новых магазинов = " + КолНовыхМагазинов);
		
КонецПроцедуры

Процедура ОбновлениеПользователей(База)
	
	МассивКодыДолжности 													= База.NewObject("Массив");
	ВыборкаДолжности 														= Справочники.Должности.Выбрать();
	Пока ВыборкаДолжности.Следующий() Цикл
		МассивКодыДолжности.Добавить(Прав(ВыборкаДолжности.Код,5));
	КонецЦикла;
	
	МассивКодыСотрудники 													= База.NewObject("Массив");
	ВыборкаСотрудники 														= Справочники.Сотрудники.Выбрать();
	Пока ВыборкаСотрудники.Следующий() Цикл
		Если НЕ ВыборкаСотрудники.Уволен Тогда
			МассивКодыСотрудники.Добавить(ВыборкаСотрудники.Код);
		КонецЕсли;
	КонецЦикла;
																			
	Запрос 																	= База.NewObject("Запрос");
	Запрос.Текст 															= "
																			|ВЫБРАТЬ
																			|	НазначенияСрезПоследних.Сотрудник КАК Сотрудник,
																			|	НазначенияСрезПоследних.Сотрудник.Наименование КАК СотрудникНаименование,
																			|	НазначенияСрезПоследних.Должность,
																			|	НазначенияСрезПоследних.Должность.Наименование КАК ДолжностьНаименование,
																			|	НазначенияСрезПоследних.Уволен
																			|ИЗ
																			|	РегистрСведений.Назначения.СрезПоследних(,ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидОперацииНазначение.КадроваяКомиссия)) КАК НазначенияСрезПоследних
																			|ГДЕ
																			|	(НазначенияСрезПоследних.Сотрудник.Код В (&МассивКодыСотрудники)
																			|				И НазначенияСрезПоследних.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияЗП.ПустаяСсылка)
																			|			ИЛИ НазначенияСрезПоследних.Должность.Код В (&МассивКодыДолжности))
																			|УПОРЯДОЧИТЬ ПО
																			|	НазначенияСрезПоследних.Сотрудник.Наименование";
	
	Запрос.УстановитьПараметр("МассивКодыСотрудники",МассивКодыСотрудники);
	Запрос.УстановитьПараметр("МассивКодыДолжности",МассивКодыДолжности);
	
	РезультатЗапроса 														= Запрос.Выполнить();
	ТаблицаРезультат 														= РезультатЗапроса.Выгрузить();
	
	новСотрудники 															= 0;
	обновленоСотрудников 													= 0;
	новПользователи															= 0;
	обновленоПользователей 													= 0;
	Для Каждого ВыборкаДетальныеЗаписи Из ТаблицаРезультат Цикл 
		ИскСотрудник 														= Справочники.Сотрудники.НайтиПоКоду(ВыборкаДетальныеЗаписи.Сотрудник.Код);
		Если НЕ ЗначениеЗаполнено(ИскСотрудник) Тогда
			ИскСотрудникОбъект 												= Справочники.Сотрудники.СоздатьЭлемент();
			ИскСотрудникОбъект.Наименование 								= ВыборкаДетальныеЗаписи.Сотрудник.Наименование;
			ИскСотрудникОбъект.Код 											= ВыборкаДетальныеЗаписи.Сотрудник.Код; 
			новСотрудники 													= новСотрудники+1;
		Иначе
			ИскСотрудникОбъект 												= ИскСотрудник.ПолучитьОбъект();
			ИскСотрудникОбъект.Наименование									= ВыборкаДетальныеЗаписи.СотрудникНаименование;
			обновленоСотрудников 											= обновленоСотрудников + 1;
		КонецЕсли;
		КодДолжности 														= СокрЛП(ВыборкаДетальныеЗаписи.Должность.Код);
		Пока СтрДлина(КодДолжности) < 9 Цикл
			КодДолжности 													= "0" + КодДолжности;
		КонецЦикла;
		ИскСотрудникОбъект.Должность 										= Справочники.Должности.НайтиПоКоду(КодДолжности);
		ИскСотрудникОбъект.Уволен 											= ВыборкаДетальныеЗаписи.Уволен;
		ИскСотрудникОбъект.Записать();
		ИскСотрудник 														= ИскСотрудникОбъект.Ссылка;
		
		Запрос 																= Новый Запрос;
		Запрос.Текст 														= 
																			"ВЫБРАТЬ ПЕРВЫЕ 1
																			|	Пользователи.Ссылка
																			|ИЗ
																			|	Справочник.Пользователи КАК Пользователи
																			|ГДЕ
																			|	(Пользователи.СоотвСотрудник = &СоотвСотрудник
																			|			ИЛИ Пользователи.Наименование = &Наименование)
																			|	И Пользователи.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("СоотвСотрудник", ИскСотрудник);
		Запрос.УстановитьПараметр("Наименование", ИскСотрудник.Наименование);
		
		РезультатЗапроса	 												= Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи 												= РезультатЗапроса.Выбрать();
		ИскПользователь 													= Справочники.Пользователи.ПустаяСсылка();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИскПользователь 												= ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	 
		Если НЕ ЗначениеЗаполнено(ИскПользователь) Тогда
			ИскПользовательОбъект 											= Справочники.Пользователи.СоздатьЭлемент();
			ИскПользовательОбъект.Наименование								= ИскСотрудник.Наименование;
			ИскПользовательОбъект.СоотвСотрудник 							= ИскСотрудник;
			ИскПользовательОбъект.ПервыйЗапуск 								= Истина;
			УникальныйИдентификаторПользователяИБ 							= Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
			УстановитьПароль 												= Истина;
			новПользователи 												= новПользователи + 1;
		Иначе
			ИскПользовательОбъект 											= ИскПользователь.ПолучитьОбъект();
			ИскПользовательОбъект.Наименование 								= ИскСотрудникОбъект.Наименование;
			ИскПользовательОбъект.СоотвСотрудник 							= ИскСотрудник;
			УникальныйИдентификаторПользователяИБ 							= ИскПользовательОбъект.ИдентификаторПользователяИБ;
			УстановитьПароль 												= Ложь;
			обновленоПользователей 											= обновленоПользователей + 1;
		КонецЕсли;
		Результат 															= Новый Структура;
		Результат.Вставить("АутентификацияOpenID",      Ложь); 
		Результат.Вставить("АутентификацияОС",          Ложь);
		Результат.Вставить("АутентификацияСтандартная", Истина);
		Результат.Вставить("ВходВПрограммуРазрешен",    НЕ ИскСотрудник.Уволен); 
		Результат.Вставить("Действие",                  "Записать"); 
		Результат.Вставить("ЗапрещеноИзменятьПароль",   Ложь);
		Результат.Вставить("Имя",                       ИскСотрудник.Наименование);
		Результат.Вставить("ОсновнойИнтерфейс",         "");
		Если УстановитьПароль Тогда
			Результат.Вставить("Пароль",                    Прав(ИскСотрудник.Код,4));
			Результат.Вставить("ПарольУстановлен",          Истина); 
		КонецЕсли;
		Результат.Вставить("ПоказыватьВСпискеВыбора",   НЕ ИскСотрудник.Уволен);
		Результат.Вставить("ПолноеИмя",                 ИскСотрудник.Наименование);
		Результат.Вставить("ПользовательОС",            "");
		Результат.Вставить("РежимЗапуска",              "Авто");
		Результат.Вставить("УникальныйИдентификатор",   УникальныйИдентификаторПользователяИБ);
		Результат.Вставить("Язык",   "Русский");	
		
		ИскПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", Результат);
		
		ИскПользовательОбъект.ДополнительныеСвойства.Вставить("ГруппаНовогоПользователя", Справочники.ГруппыПользователей.ПустаяСсылка());
		ИскПользовательОбъект.Записать();

		Если УстановитьПароль Тогда
			Сообщить("Создан пользователь " + ИскПользовательОбъект);
		Иначе
			Сообщить("Обновлен пользователь " + ИскПользовательОбъект);
		КонецЕсли;
		
		ПользовательИБ 														= ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИскПользовательОбъект.ИдентификаторПользователяИБ);
		
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.БазовыеПрава);
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЗапускВебКлиента);
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЗапускТолстогоКлиента);
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЗапускТонкогоКлиента);
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЧтениеБазовойНСИ);
		
		Если ИскПользовательОбъект.СоотвСотрудник.Должность.РегиональныйДиректор Тогда
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.РД);
		Иначе
			ПользовательИБ.Роли.Удалить(Метаданные.Роли.РД);
		КонецЕсли;
		
		Если ИскПользовательОбъект.СоотвСотрудник.Должность.ДепартаментПерсонала Тогда
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.HR);
		Иначе
			ПользовательИБ.Роли.Удалить(Метаданные.Роли.HR);
		КонецЕсли;
		
		Если ИскПользовательОбъект.СоотвСотрудник.Должность.ДепартаментАудитаИКонтроля Тогда
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ДАиК);
		Иначе
			ПользовательИБ.Роли.Удалить(Метаданные.Роли.ДАиК);
		КонецЕсли;
		
		Если ИскПользовательОбъект.СоотвСотрудник.Должность.Директор Тогда
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.Директора);
		Иначе
			ПользовательИБ.Роли.Удалить(Метаданные.Роли.Директора);
		КонецЕсли;
		
		Если ИскПользовательОбъект.СоотвСотрудник.Должность.УправляющиеМагазинами Тогда
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.УправляющиеМагазинами);
		Иначе
			ПользовательИБ.Роли.Удалить(Метаданные.Роли.УправляющиеМагазинами);
		КонецЕсли;
		
		//----------
		//Мулько К.П.
		//06.08.2019
		Если (ИскПользовательОбъект.СоотвСотрудник.Должность.РегиональныйДиректор) Или 
			 (ИскПользовательОбъект.СоотвСотрудник.Должность.НациональныйДиректор) Или
			 (ИскПользовательОбъект.СоотвСотрудник.Должность.ОтделОперационногоКонтроля) Тогда
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЗаполнениеСквозногоЛистаПроверки);
		Иначе
			ПользовательИБ.Роли.Удалить(Метаданные.Роли.ЗаполнениеСквозногоЛистаПроверки);
		КонецЕсли;
		
		Если ИскПользовательОбъект.СоотвСотрудник.Должность.ОтделОперационногоКонтроля Тогда
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.СпециалистОперационногоКонтроля);
		Иначе
			ПользовательИБ.Роли.Удалить(Метаданные.Роли.СпециалистОперационногоКонтроля);
		КонецЕсли;
		//----------
		
		ПользовательИБ.Записать();
	КонецЦикла;
	
	Сообщение = "Было добавлено "+новСотрудники + " сотрудников. Обновлено " + обновленоСотрудников + "" 
	+ Символы.ПС + "Было добавлено "+новПользователи + " пользователей. Обновлено " + обновленоПользователей;
	Сообщить(Сообщение);
	
	мВыводВЛог(Сообщение);
	//ЗаписьЖурналаРегистрации("Обновление пользователей",,,,Сообщение);
		

КонецПроцедуры
	
Процедура ОбновлениеСправочникаПодразделения_НД_РД_УМ(База)
	Запрос 																	= База.NewObject("Запрос");
	Запрос.Текст 															= "ВЫБРАТЬ
																			|	НазначенияСрезПоследних.Подразделение КАК ПодразделениеЗП,
																			|	НазначенияСрезПоследних.Сотрудник,
																			|	НазначенияСрезПоследних.Сотрудник.Код
																			|ПОМЕСТИТЬ ВТ_УМ
																			|ИЗ
																			|	РегистрСведений.Назначения.СрезПоследних(, ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидОперацииНазначение.КадроваяКомиссия)) КАК НазначенияСрезПоследних
																			|ГДЕ
																			|	НазначенияСрезПоследних.Должность.Код = ""00281""
																			|	И НазначенияСрезПоследних.Уволен <> ИСТИНА
																			|;
																			|
																			|////////////////////////////////////////////////////////////////////////////////
																			|ВЫБРАТЬ
																			|	Подразделения.Ссылка,
																			|	Подразделения.Код,
																			|	Подразделения.Наименование КАК Наименование,
																			|	Подразделения.ПодразделениеЗП.Ссылка,
																			|	Подразделения.ПодразделениеЗП.Код,
																			|	Подразделения.ПодразделениеЗП.Наименование,
																			|	ВТ_УМ.СотрудникКод КАК КодУМ,
																			|	ВТ_УМ.Сотрудник,
																			|	Подразделения.ПодразделениеЗП.Регионал.Код КАК КодРД,
																			|	Подразделения.ПодразделениеЗП.Регионал,
																			|	Подразделения.ПодразделениеЗП.Национал.Код КАК КодНД,
																			|	Подразделения.ПодразделениеЗП.Национал
																			|ИЗ
																			|	Справочник.Подразделения КАК Подразделения
																			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УМ КАК ВТ_УМ
																			|		ПО Подразделения.ПодразделениеЗП = ВТ_УМ.ПодразделениеЗП
																			|ГДЕ
																			|	Подразделения.ПодразделениеЗП <> ЗНАЧЕНИЕ(Справочник.ПодразделенияЗП.ПустаяСсылка)
																			|
																			|УПОРЯДОЧИТЬ ПО
																			|	Наименование";
				
	РезультатЗапроса 														= Запрос.Выполнить();
	Выборка 																= РезультатЗапроса.Выбрать();
			
	Пока Выборка.Следующий() Цикл
				
		Пользователь_УМ														= НайтиПользователяПоКодуСотрудника(Выборка.КодУМ);	
		Пользователь_РД														= НайтиПользователяПоКодуСотрудника(Выборка.КодРД);
		Пользователь_НД														= НайтиПользователяПоКодуСотрудника(Выборка.КодНД);
		
		НайденоеПодразделение 												= Справочники.Подразделения.НайтиПоРеквизиту("КодПодразделенияУТ", Выборка.Код);	
		Если НЕ НайденоеПодразделение.Пустая() Тогда 
			ОбъектПодразделение												= НайденоеПодразделение.ПолучитьОбъект();
			
			Если ОбъектПодразделение.Ссылка<>Пользователь_УМ Тогда 
				ОбъектПодразделение.Управляющий								= Пользователь_УМ;
			КонецЕсли;	
			Если ОбъектПодразделение.Ссылка<>Пользователь_РД Тогда 
				ОбъектПодразделение.РД										= Пользователь_РД;
			КонецЕсли;
			Если ОбъектПодразделение.Ссылка<>Пользователь_НД Тогда 
				ОбъектПодразделение.НД										= Пользователь_НД;
			КонецЕсли;
			
			ОбъектПодразделение.Записать();
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры	

Функция НайтиПользователяПоКодуСотрудника (КодСотрудника)
	Запрос 																	= Новый Запрос;
	Запрос.Текст 															= 
																				"ВЫБРАТЬ
																				|	Пользователи.Ссылка
																				|ИЗ
																				|	Справочник.Пользователи КАК Пользователи
																				|ГДЕ
																				|	Пользователи.СоотвСотрудник.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", КодСотрудника);	
	Выборка 																= Запрос.Выполнить().Выбрать();	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;		
	КонецЕсли;
	
	Возврат	Справочники.Пользователи.ПустаяСсылка();
КонецФункции	


Процедура мВыводВЛог(СтрокаЛога) Экспорт
    Сообщить(СтрокаЛога);
   
    ТекстовыйДокумент = Новый ТекстовыйДокумент;
    кодировка = "UTF8" ;
    ТекДата = Формат(ТекущаяДата(),"ДФ=_dd.MM.yy");
    ИмяФайлаЛога = "Выгрузка из УТ в Учет Проверок"+ТекДата+".txt";
    //ПутьКФайлу = КаталогВременныхФайлов()+ИмяФайлаЛога;
    ИмяКаталога = "C:\mail\логи\";
    КаталогНаДиске = Новый Файл(ИмяКаталога);
    Если НЕ КаталогНаДиске.Существует() Тогда
        СоздатьКаталог(ИмяКаталога);
    КонецЕсли;
    ПутьКФайлу = ИмяКаталога+ИмяФайлаЛога;
   
    МассивФайлов = НайтиФайлы(ПутьКФайлу);
    Если МассивФайлов.Количество() > 0 Тогда
        ТекстовыйДокумент.Прочитать(ПутьКФайлу,кодировка);
    КонецЕсли;
    СтрокаЛога = "[" + ТекущаяДата() + "] " + СтрокаЛога;
    ТекстовыйДокумент.ДобавитьСтроку(СтрокаЛога);
    ТекстовыйДокумент.Записать(ПутьКФайлу,кодировка);
КонецПроцедуры
	

#Область Старье
//Процедура ОбновлениеПользователей2()
//	
//	СписокДолжности = Новый ТаблицаЗначений;
//	СписокДолжности.Колонки.Добавить("Переносить",Новый ОписаниеТипов("Булево"));
//	СписокДолжности.Колонки.Добавить("Должность",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
//	СписокДолжности.Колонки.Добавить("Колво",Новый ОписаниеТипов("Число"));
//	
//	Сотр = Новый ТаблицаЗначений;
//	Сотр.Колонки.Добавить("СотрудникКод",Новый ОписаниеТипов("Строка"));
//	Сотр.Колонки.Добавить("СотрудникНаименование",Новый ОписаниеТипов("Строка"));
//	Сотр.Колонки.Добавить("СотрудникПолноеНаименование",Новый ОписаниеТипов("Строка"));
//	Сотр.Колонки.Добавить("ДолжностьКод",Новый ОписаниеТипов("Строка"));
//	Сотр.Колонки.Добавить("ДолжностьНаименование",Новый ОписаниеТипов("Строка"));
//	
//	V77 = Новый COMОбъект("V77.Application");
//	Каталог = СокрЛП(Константы.ПутьКБазе1с7.Получить());
//	Стр    = " /d""" + Каталог+ """ /n"""  + СокрЛП(Константы.Пользователь1с7.Получить())  + """ /p"+СокрЛП(Константы.Пароль1с7.Получить());
//	
//	Открыта = V77.Initialize(V77.RMTrade,Стр,"NO_SPLASH_SHOW");
//	   
//	Если Открыта = 0  Тогда
//	    Сообщить("Базу данных открыть не удалось!",СтатусСообщения.Информация);
//	    Возврат;
//	Иначе
//		Сообщить("База открыта");
//	КонецЕсли;
//	ЗапросСотрудники = V77.CreateObject("Запрос");
//	ТекстЗапр =  "//{{ЗАПРОС(Заполнить)
//	 |Обрабатывать НепомеченныеНаУдаление;
//	 |Сотрудник=Справочник.Назначения.Владелец;
//	 |Должность=Справочник.Назначения.МестоРаботы.Должность;
//	 |ДатаОкончанияДействия=Справочник.Назначения.Владелец.ДатаОкончанияДействия; 
//	 |Условие (ПустоеЗначение(ДатаОкончанияДействия)=1); 
//	 |Условие (Лев(Сотрудник.Код,2)=""Б-"");
//	 |Группировка Сотрудник Упорядочить по Сотрудник.Код;     
//	 |";

//	  
//	Если ЗапросСотрудники.Выполнить(ТекстЗапр) = 0 Тогда
//	    Сообщить("Не удалось выполнить запрос ");
//		Возврат;
//	КонецЕсли;
//	Пока ЗапросСотрудники.Группировка(1)=1 Цикл 
//		Если Справочники.Должности.НайтиПоНаименованию(ЗапросСотрудники.Должность.Наименование) <> Справочники.Должности.ПустаяСсылка() Тогда
//			НоваяСтрока = Сотр.Добавить();
//			НоваяСтрока.СотрудникКод = ЗапросСотрудники.Сотрудник.Код;
//			НоваяСтрока.СотрудникНаименование = ЗапросСотрудники.Сотрудник.Наименование;
//			НоваяСтрока.СотрудникПолноеНаименование = ЗапросСотрудники.Сотрудник.ФизическоеЛицо.Наименование;
//			НоваяСтрока.ДолжностьКод = ЗапросСотрудники.Должность.Код;
//			НоваяСтрока.ДолжностьНаименование = ЗапросСотрудники.Должность.Наименование;
//		КонецЕсли;
//	КонецЦикла;
//	V77 = "";
//	новДолжности = 0;
//	новСотрудники = 0;
//	новПользователи = 0;

//	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
//	Для Каждого СтрСотрудник из Сотр Цикл
//		Если Справочники.Должности.НайтиПоКоду(СтрСотрудник.ДолжностьКод)=Справочники.Должности.ПустаяСсылка() Тогда
//			НовДолжность=Справочники.Должности.СоздатьЭлемент();
//			НовДолжность.Код = СтрСотрудник.ДолжностьКод;
//			НовДолжность.Наименование=СтрСотрудник.ДолжностьНаименование;
//			НовДолжность.Записать();
//			новДолжности=новДолжности+1;
//		КонецЕсли;
//		Если Справочники.Сотрудники.НайтиПоКоду(СтрСотрудник.СотрудникКод) = Справочники.Сотрудники.ПустаяСсылка() Тогда
//			НовСотрудник = Справочники.Сотрудники.СоздатьЭлемент();
//			НовСотрудник.Наименование=СтрСотрудник.СотрудникПолноеНаименование;
//			НовСотрудник.Код=СтрСотрудник.СотрудникКод;
//			НовСотрудник.Должность = Справочники.Должности.НайтиПоКоду(СтрСотрудник.ДолжностьКод);
//			НовСотрудник.Записать();
//			новСотрудники=новСотрудники+1;
//		КонецЕсли;
//		Если Справочники.Пользователи.НайтиПоНаименованию(СтрСотрудник.СотрудникНаименование) = Справочники.Пользователи.ПустаяСсылка() Тогда
//			НовПользователь =  Справочники.Пользователи.СоздатьЭлемент();
//			НовПользователь.Наименование = СтрСотрудник.СотрудникНаименование;
//			НовПользователь.СоотвСотрудник = Справочники.Сотрудники.НайтиПоНаименованию(СтрСотрудник.СотрудникПолноеНаименование);
//			новПользователь.ПервыйЗапуск = Истина;
//			новПользователи =новПользователи +1;
//			
//			Результат = Новый Структура;
//		    Результат.Вставить("АутентификацияOpenID",      Ложь); 
//			Результат.Вставить("АутентификацияОС",          Ложь);
//			Результат.Вставить("АутентификацияСтандартная", Истина);
//			Результат.Вставить("ВходВПрограммуРазрешен",    Истина); 
//			Результат.Вставить("Действие",                  "Записать"); 
//			Результат.Вставить("ЗапрещеноИзменятьПароль",   Ложь);
//			Результат.Вставить("Имя",                       СтрСотрудник.СотрудникНаименование);
//			Результат.Вставить("ОсновнойИнтерфейс",         "");
//			Результат.Вставить("Пароль",                    Прав(СтрСотрудник.СотрудникКод,4));
//			Результат.Вставить("ПарольУстановлен",          Ложь); 
//			Результат.Вставить("ПоказыватьВСпискеВыбора",   Истина);
//			Результат.Вставить("ПолноеИмя",                 СтрСотрудник.СотрудникПолноеНаименование);
//			Результат.Вставить("ПользовательОС",            "");
//			Результат.Вставить("РежимЗапуска",              "Авто");
//			Результат.Вставить("УникальныйИдентификатор",   Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
//			Результат.Вставить("Язык",   "Русский");	
//			
//			НовПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", Результат);

//			НовПользователь.ДополнительныеСвойства.Вставить("ГруппаНовогоПользователя", Справочники.ГруппыПользователей.ПустаяСсылка());
//			НовПользователь.Записать();
//			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(НовПользователь.Наименование);
//						
//			ПользовательИБ.Роли.Добавить(Метаданные.Роли.БазовыеПрава);
//			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЗапускВебКлиента);
//			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЗапускТолстогоКлиента);
//			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЗапускТонкогоКлиента);
//			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЧтениеБазовойНСИ);
//			
//			Если НовПользователь.СоотвСотрудник.Должность.РегиональныйДиректор Тогда
//				ПользовательИБ.Роли.Добавить(Метаданные.Роли.ДАиК);
//			Иначе
//				ПользовательИБ.Роли.Удалить(Метаданные.Роли.ДАиК);
//			КонецЕсли;
//			
//			Если НовПользователь.СоотвСотрудник.Должность.ДепартаментПерсонала Тогда
//				ПользовательИБ.Роли.Добавить(Метаданные.Роли.ДАиК);
//			Иначе
//				ПользовательИБ.Роли.Удалить(Метаданные.Роли.ДАиК);
//			КонецЕсли;
//			
//			Если НовПользователь.СоотвСотрудник.Должность.ДепартаментАудитаИКонтроля Тогда
//				ПользовательИБ.Роли.Добавить(Метаданные.Роли.ДАиК);
//			Иначе
//				ПользовательИБ.Роли.Удалить(Метаданные.Роли.ДАиК);
//			КонецЕсли;
//			
//			Если НовПользователь.СоотвСотрудник.Должность.Директор Тогда
//				ПользовательИБ.Роли.Добавить(Метаданные.Роли.ДАиК);
//			Иначе
//				ПользовательИБ.Роли.Удалить(Метаданные.Роли.ДАиК);
//			КонецЕсли;
//			
//			Если НовПользователь.СоотвСотрудник.Должность.УправляющиеМагазинами Тогда
//				ПользовательИБ.Роли.Добавить(Метаданные.Роли.ДАиК);
//			Иначе
//				ПользовательИБ.Роли.Удалить(Метаданные.Роли.ДАиК);
//			КонецЕсли;

//			
//			ПользовательИБ.Записать();
//		КонецЕсли;
//	КонецЦикла;
//	Сообщить("Было добавлено "+новДолжности + " должностей."+Символы.ПС+"Было добавлено "+новСотрудники + " сотрудников."+Символы.ПС+"Было добавлено "+новПользователи + " пользователей.");
//	ЗаписьЖурналаРегистрации("Обновление пользователей",,,,"Было добавлено "+новДолжности + " должностей."+Символы.ПС+"Было добавлено "+новСотрудники + " сотрудников."+Символы.ПС+"Было добавлено "+новПользователи + " пользователей.");
//		

//КонецПроцедуры
#КонецОбласти	
