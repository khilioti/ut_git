////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Подсистема "Адресный классификатор".
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

//  Имя событие для записи в журнал регистрации.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Адресный классификатор'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Поиск первого файла по маске без учета регистра (особенностей операционной системы).
//
// Параметры:
//     Каталог         - Строка - каталог, в котором ищется файл.
//     МаскаИмениФайла - Строка - имя искомого файла.
//
// Возвращаемое значение:
//     Структура - описание найденного файла. Содержит поля:
//         * Существует       - Булево - флаг того, что указанный файл существует.
//         * Имя              - Строка - характеристика найденного файла, см. описания типа Файл.
//         * ИмяБезРасширения - Строка - характеристика найденного файла, см. описания типа Файл.
//         * ПолноеИмя        - Строка - характеристика найденного файла, см. описания типа Файл.
//         * Путь             - Строка - характеристика найденного файла, см. описания типа Файл.
//         * Расширение       - Строка - характеристика найденного файла, см. описания типа Файл.
//
Функция НайтиФайл(Каталог, МаскаИмениФайла) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Платформа = СистемнаяИнформация.ТипПлатформы;
	
	НеУчитыватьРегистр = Платформа = ТипПлатформы.Windows_x86 Или Платформа = ТипПлатформы.Windows_x86_64;
	
	Если НеУчитыватьРегистр Тогда
		Маска = ВРег(МаскаИмениФайла);
	Иначе
		Маска = "";
		Для Позиция = 1 По СтрДлина(МаскаИмениФайла) Цикл
			Символ = Сред(МаскаИмениФайла, Позиция, 1);
			ВерхнийРегистр = ВРег(Символ);
			НижнийРегистр  = НРег(Символ);
			Если ВерхнийРегистр = НижнийРегистр Тогда
				Маска = Маска + Символ;
			Иначе
				Маска = Маска + "[" + ВерхнийРегистр + НижнийРегистр + "]";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Результат = Новый Структура("Существует, Имя, ИмяБезРасширения, ПолноеИмя, Путь, Расширение", Ложь); 
	Варианты = НайтиФайлы(Каталог, Маска);
	Если Варианты.Количество() > 0 Тогда 
		Результат.Существует = Истина;
		ЗаполнитьЗначенияСвойств(Результат, Варианты[0]);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Проверка на доступность всех необходимых файлов для загрузки.
//
// Параметры:
//     КодыРегионов      - Массив    - содержит числовые значения - коды регионов-субъектов РФ (для последующей
//                                     загрузки).
//     Каталог           - Строка    - каталог с проверяемыми файлами.
//     ПараметрыЗагрузки - Структура - содержит поля.
//         * КодИсточникаЗагрузки - Строка - описывает набор анализируемых файлов. Возможные значения: "КАТАЛОГ",
//                                           "САЙТ, "ИТС".
//         * ПолеОшибки           - Строка - имя реквизита для привязки сообщений об ошибке.
//
// Возвращаемое значение: 
//     Структура - описание результата. Содержит поля.
//         * КодыРегионов    - Массив -       содержит числовые значения кодов регионов-субъектов для которых доступны
//                                      все файлы.
//         * ЕстьВсеФайлы    - Булево       - флаг того, что можно загружать все регионы.
//         * Ошибки          - Структура    - см. описание ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю.
//         * ФайлыПоРегионам - Соответствие - соответствие файлов регионам. Ключ может быть:
//                                          - числом (код региона), тогда значение - массив имен файлов, необходимых
//                                          для загрузки этого региона
//                                          - символом "*", тогда значение - массив имен файлов, необходимых для
//                                          загрузки всех регионов.
//
Функция АнализДоступностиФайловКлассификатораВКаталоге(КодыРегионов, Каталог, ПараметрыЗагрузки) Экспорт
	
	РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог);
	ПолеОшибки = ПараметрыЗагрузки.ПолеОшибки;
	
	Результат = Новый Структура;
	Результат.Вставить("КодыРегионов",    КодыРегионов);
	Результат.Вставить("ЕстьВсеФайлы",    Истина);
	Результат.Вставить("Ошибки",          Неопределено);
	Результат.Вставить("ФайлыПоРегионам", Новый Соответствие);
	
	ОтсутствующиеФайлы = Новый Соответствие;
	
	Для Каждого КодРегиона Из КодыРегионов Цикл
		// Набор файлов для каждого региона.
		Результат.ФайлыПоРегионам[КодРегиона] = Новый Массив;
		
		ИмяФайла = Формат(КодРегиона, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + ".ZIP";
		Файл = НайтиФайл(РабочийКаталог, ИмяФайла);
		Если Файл.Существует Тогда
			Результат.ФайлыПоРегионам[КодРегиона].Добавить(Файл.ПолноеИмя);
		Иначе
			Результат.ЕстьВсеФайлы = Ложь;
			ОтсутствующиеФайлы.Вставить(КодРегиона, ИмяФайла);
		КонецЕсли;
		
	КонецЦикла;
	
	// Собираем все в один вызов
	Представления = АдресныйКлассификаторВызовСервера.ПредставлениеРегионаПоКоду(ОтсутствующиеФайлы);
	
	Для Каждого КлючЗначение Из Представления Цикл
		СообщениеОбОшибке = НСтр("ru = 'Для региона ""%1"" не найден файл данных ""%2""'") + Символы.ПС;
		СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru = 'Актуальные адресные сведения можно загрузить по адресу http://its.1c.ru/download/fias'");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Результат.Ошибки, ПолеОшибки, 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СообщениеОбОшибке, 
				КлючЗначение.Значение, ОтсутствующиеФайлы[КлючЗначение.Ключ]), Неопределено 
		);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Разделяет исходный текст на наименование и сокращение.
// Сокращением считается последнее слово, отделенное пробельным символом.
//
// Параметры:
//     Название - Строка - Полное название, например "Москва г".
//
// Возвращаемое значение:
//     Структура - содержит поля.
//       * Наименование - Строка - Наименование, например "Москва". Если сокращение выделить не удалось, то исходное
//                                 название.
//       * Сокращение   - Строка - Сокращение, например "г". Если сокращение выделить не удалось, то пустая строка.
//
Функция НаименованиеИСокращение(Название) Экспорт
	ТекстПоиска = СокрП(Название);
	
	Позиция = СтрДлина(ТекстПоиска);
	Пока Позиция > 0 Цикл
		Если ПустаяСтрока(Сред(ТекстПоиска, Позиция, 1)) Тогда
			Прервать;
		КонецЕсли;
		Позиция = Позиция - 1;
	КонецЦикла;
	
	Результат = Новый Структура("Наименование, Сокращение");
	Если Позиция = 0 Тогда
		Результат.Наименование = ТекстПоиска;
		Результат.Сокращение   = "";
	Иначе
		Результат.Наименование = СокрП(Лев(ТекстПоиска, Позиция));
		Результат.Сокращение   = Сред(ТекстПоиска, Позиция + 1);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Набор уровней для запросов в режиме совместимости с КЛАДР.
//
// Возвращаемое значение:
//     ФиксированныйМассив - набор числовых уровней.
//
Функция УровниКлассификатораКЛАДР() Экспорт
	
	Уровни = Новый Массив;
	Уровни.Добавить(1);
	Уровни.Добавить(3);
	Уровни.Добавить(4);
	Уровни.Добавить(6);
	Уровни.Добавить(7);
	
	Возврат Новый ФиксированныйМассив(Уровни);
КонецФункции

// Набор уровней для запросов ФИАС.
//
// Возвращаемое значение:
//     ФиксированныйМассив - набор числовых уровней.
//
Функция УровниКлассификатораФИАС() Экспорт
	
	Уровни = Новый Массив;
	Уровни.Добавить(1);
	Уровни.Добавить(2);
	Уровни.Добавить(3);
	Уровни.Добавить(5);
	Уровни.Добавить(4);
	Уровни.Добавить(6);
	Уровни.Добавить(7);
	Уровни.Добавить(90);
	Уровни.Добавить(91);
	
	Возврат Новый ФиксированныйМассив(Уровни);
КонецФункции

#КонецОбласти

