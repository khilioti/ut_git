////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Подсистема "Адресный классификатор".
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет наличие обновлений адресного классификатора на сайте
// для тех субъектов, которые ранее уже загружались.
//
// Параметры:
//     ПараметрыВыполнения - ПараметрыВыполненияКоманды, Структура - параметры открытия формы.
//
Процедура ОпределитьНеобходимостьОбновленияАдресныхОбъектов(ПараметрыВыполнения = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура("Источник");
	
	Если ПараметрыВыполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ПараметрыВыполнения);
	КонецЕсли;
	
	Владелец = СтруктураПараметров.Источник;
		
	Если Не ЗапрашиватьДоступПриИспользовании() Тогда
		// Разрешения уже получены на всю конфигурацию.
		ОткрытьФормуПроверкиОбновления(ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
		
	// Нужен запрос профиля безопасности.
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучениеРазрешенияБезопасностиПроверкиНаличияОбновленияАдресныхОбъектов", 
		ЭтотОбъект, ПараметрыВыполнения
	);
	
	РаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(
		АдресныйКлассификаторВызовСервера.ЗапросРазрешенийБезопасностиОбновления(), 
		Владелец, 
		ОписаниеОповещения,
	);
	
КонецПроцедуры

// Открывает форму загрузки классификатора.
//
// Параметры:
//     Параметры - ПараметрыВыполненияКоманды, Структура - параметры открытия формы.
//
Процедура ЗагрузитьАдресныйКлассификатор(Параметры = Неопределено) Экспорт
	
	ПараметрыОкна = Новый Структура("Уникальность, Окно, НавигационнаяСсылка, Источник", Ложь);
	Если Параметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОкна, Параметры);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Для Каждого КлючЗначение Из Параметры Цикл
			ПараметрыФормы.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	Если ПараметрыРаботыКлиента.АдресныйКлассификаторУстарел И Не ПараметрыФормы.Свойство("КодРегионаДляЗагрузки") Тогда
		ИмяФормы = "РегистрСведений.АдресныеОбъекты.Форма.АктуализацияУстаревшегоКлассификатора";
	Иначе
		ИмяФормы = "РегистрСведений.АдресныеОбъекты.Форма.ЗагрузкаАдресногоКлассификатора";
	КонецЕсли;
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, 
		ПараметрыОкна.Источник, 
		ПараметрыОкна.Уникальность, 
		ПараметрыОкна.Окно, 
		ПараметрыОкна.НавигационнаяСсылка);
	
КонецПроцедуры

// Проверяет наличие обновлений адресного классификатора на сайте
// для тех субъектов, которые ранее уже загружались.
//
// Параметры:
//     ПараметрыВыполнения - ПараметрыВыполненияКоманды, Структура - параметры открытия формы.
//
Процедура ОткрытьФормуПроверкиОбновления(ПараметрыВыполнения)
	
	Если ПараметрыВыполнения = Неопределено Тогда
		ПараметрыВыполнения = Новый Структура("Уникальность, Окно, НавигационнаяСсылка, Источник", Ложь);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "ПроверкаОбновления");
	
	ОткрытьФорму("РегистрСведений.АдресныеОбъекты.Форма.ЗагрузкаАдресногоКлассификатора", ПараметрыФормы, 
		ПараметрыВыполнения.Источник, 
		ПараметрыВыполнения.Уникальность, 
		ПараметрыВыполнения.Окно, 
		ПараметрыВыполнения.НавигационнаяСсылка
	);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Вызывает диалог выбора каталога.
// 
// Параметры:
//     Форма - УправляемаяФорма - вызывающий объект.
//     ПутьКДанным          - Строка             - полное имя реквизита формы, содержащего текущее значение каталога.
//                                                 Например.
//                                                "РабочийКаталог" или "Объект.КаталогИзображений".
//     Заголовок            - Строка             - Заголовок для диалога.
//     СтандартнаяОбработка - Булево             - для использования в обработчике "ПриНачалаВыбора". Будет заполнено
//                                                 значением Ложь.
//     ОповещениеЗавершения - ОписаниеОповещения - вызывается после успешного помещения нового значения в реквизит.
//
Процедура ВыбратьКаталог(Знач Форма, Знач ПутьКДанным, Знач Заголовок = Неопределено, СтандартнаяОбработка = Ложь, ОповещениеЗавершения = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("ВыбратьКаталогЗавершениеКонтроляРасширенияРаботыСФайлами", ЭтотОбъект, Новый Структура);
	ОповещениеПродолжения.ДополнительныеПараметры.Вставить("Форма",       Форма);
	ОповещениеПродолжения.ДополнительныеПараметры.Вставить("ПутьКДанным", ПутьКДанным);
	ОповещениеПродолжения.ДополнительныеПараметры.Вставить("Заголовок",   Заголовок);
	
	ОповещениеПродолжения.ДополнительныеПараметры.Вставить("ОповещениеЗавершения",   ОповещениеЗавершения);
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОповещениеПродолжения, , Ложь);
КонецПроцедуры

// Завершение немодального выбора каталога.
//
Процедура ВыбратьКаталогЗавершениеКонтроляРасширенияРаботыСФайлами(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		// Отказ от установки расширения.
		Возврат;
		
	ИначеЕсли Не ПодключитьРасширениеРаботыСФайлами() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Расширение для работы с файлами не подключено.'"));
		Возврат;
	КонецЕсли;
	
	Форма       = ДополнительныеПараметры.Форма;
	ПутьКДанным = ДополнительныеПараметры.ПутьКДанным;
	Заголовок   = ДополнительныеПараметры.Заголовок;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если Заголовок <> Неопределено Тогда
		Диалог.Заголовок = Заголовок;
	КонецЕсли;
	
	ВладелецЗначения = Форма;
	ТекущееЗначение  = Форма;
	ИмяРеквизита     = ПутьКДанным;
	
	ЧастиПути = СтрЗаменить(ПутьКДанным, ".", Символы.ПС);
	Для Позиция = 1 По СтрЧислоСтрок(ЧастиПути) Цикл
		ИмяРеквизита     = СтрПолучитьСтроку(ЧастиПути, Позиция);
		ВладелецЗначения = ТекущееЗначение;
		ТекущееЗначение  = ТекущееЗначение[ИмяРеквизита];
	КонецЦикла;
	
	Диалог.Каталог = ТекущееЗначение;
	
	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Диалог.Каталог;
	ВладелецЗначения[ИмяРеквизита] = Результат;
	ДанныеВыбора                   = Результат;
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Создает и возвращает временный каталог на клиенте.
//
// Возвращаемое значение:
//     Строка - полное имя созданного каталога.
//
Функция ВременныйКаталогКлиента() Экспорт
	
#Если ВебКлиент Тогда
	Разделитель = ПолучитьРазделительПути();
	
	КаталогКлиента = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов()) 
		+ Разделитель + Строка(Новый УникальныйИдентификатор) + Разделитель;
#Иначе
	КаталогКлиента = ПолучитьИмяВременногоФайла();
#КонецЕсли

	СоздатьКаталог(КаталогКлиента);
	
	Возврат КаталогКлиента;
КонецФункции

// Завершение модального получения подтверждения о получении ресурсов на проверку наличия обновления классификатора.
//
Процедура ПолучениеРазрешенияБезопасностиПроверкиНаличияОбновленияАдресныхОбъектов(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> КодВозвратаДиалога.ОК Тогда
		// Нет разрешения
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуПроверкиОбновления(ДополнительныеПараметры);
КонецПроцедуры

Функция ЗапрашиватьДоступПриИспользовании()
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти