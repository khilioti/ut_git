////////////////////////////////////////////////////////////////////////////////
// Подсистема "Информация при запуске".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Добавление обработчиков служебных событий (подписок).

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПослеНачалаРаботыСистемы"].Добавить(
		"ИнформацияПриЗапускеКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПослеОбновленияИнформационнойБазы"].Добавить(
		"ИнформацияПриЗапуске");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске"].Добавить(
		"ИнформацияПриЗапуске");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий.

// Вызывается после завершения монопольного обновления данных ИБ.
//
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия подсистемы до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия подсистемы после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления
//                                             подсистемы, сгруппированных по номеру версии.
//                            Процедура обхода выполненных обработчиков:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево (возвращаемое значение)- если установить Истина,
//                                тогда выводить форму с описанием обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить("ИнформацияПриЗапуске", Неопределено, Неопределено);
	
КонецПроцедуры

// Заполняет параметры, которые используется клиентским кодом на запуске конфигурации.
//
// Параметры:
//   Параметры - Структура - Параметры запуска.
//
Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске(Параметры) Экспорт
	Параметры.Вставить("ИнформацияПриЗапуске", Новый ФиксированнаяСтруктура(ГлобальныеНастройки()));
КонецПроцедуры

// Глобальные настройки подсистемы.
Функция ГлобальныеНастройки()
	Настройки = Новый Структура;
	Настройки.Вставить("Показывать", Истина);
	
	Если Метаданные.Обработки.ИнформацияПриЗапуске.Макеты.Количество() = 0 Тогда
		Настройки.Показывать = Ложь;
	ИначеЕсли Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		// Отключение информации в ПРОФ версии если пользователь отключил флажок.
		ФлажокПользователя = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИнформацияПриЗапуске", "Показывать", Истина);
		Если Не ФлажокПользователя Тогда
			ДатаБлижайшегоПоказа = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИнформацияПриЗапуске", "ДатаБлижайшегоПоказа");
			Если ДатаБлижайшегоПоказа <> Неопределено
				И ДатаБлижайшегоПоказа > ТекущаяДатаСеанса() Тогда
				Настройки.Показывать = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Настройки.Показывать Тогда
		// Отключение информации если будет выведено описание изменений.
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеВерсииИБ") Тогда
			МодульОбновлениеИнформационнойБазыСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбновлениеИнформационнойБазыСлужебный");
			Если МодульОбновлениеИнформационнойБазыСлужебный.ПоказатьОписаниеИзмененийСистемы() Тогда
				Настройки.Показывать = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Настройки.Показывать Тогда
		// Отключение информации если будет показан помощник завершения настройки подчиненного узла РИБ.
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
			МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
			Если МодульОбменДаннымиСервер.ОткрытьПомощникСозданияОбменаДаннымиДляНастройкиПодчиненногоУзла() Тогда
				Настройки.Показывать = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Переопределение.
	ИнформацияПриЗапускеПереопределяемый.ОпределитьНастройки(Настройки);
	
	Возврат Настройки;
КонецФункции

#КонецОбласти
