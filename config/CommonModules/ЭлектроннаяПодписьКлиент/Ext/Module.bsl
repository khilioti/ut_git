////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронная подпись".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает текущую настройку использования электронных подписей.
Функция ИспользоватьЭлектронныеПодписи() Экспорт
	
	Возврат ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ИспользоватьЭлектронныеПодписи;
	
КонецФункции

// Возвращает текущую настройку использования шифрования.
Функция ИспользоватьШифрование() Экспорт
	
	Возврат ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ИспользоватьШифрование;
	
КонецФункции

// Возвращает менеджер криптографии (на клиенте) для указанной программы.
//
// Параметры:
//  Операция       - Строка - если не пустая, то должна содержать одну из строк, которые определяют
//                   операцию для вставки в описание ошибки: Подписание, ПроверкаПодписи, Шифрование,
//                   Расшифровка, ПроверкаСертификата, ПолучениеСертификатов.
//
//  ПоказатьОшибку - Булево - если Истина, тогда будет открыта форма ОшибкаОбращенияКПрограмме
//                   из которой можно перейти к списку установленных программ
//                   в форму персональных настроек на страницу "Установленные программы",
//                   в которой можно увидеть почему программу не удалось задействовать,
//                   а также открыть инструкцию по установке.
//
//  ОписаниеОшибки - Строка - возвращаемое описание ошибки, если возвращено значение Неопределено.
//
//  Программа      - Неопределено - возвращает менеджер криптографии первой
//                   программы из справочника для которой удалось его создать.
//                 - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования - программа
//                   для которой нужно создать и вернуть менеджер криптографии.
//
// Возвращаемое значение:
//   МенеджерКриптографии - менеджер криптографии.
//   Неопределено - произошла ошибка, описание которой в параметре ОписаниеОшибки.
//
Функция МенеджерКриптографии(Операция, ПоказатьОшибку = Истина, ОписаниеОшибки = "", Программа = Неопределено) Экспорт
	
	Ошибка = "";
	Результат = ЭлектроннаяПодписьСлужебныйКлиент.МенеджерКриптографии(Операция, ПоказатьОшибку, Ошибка, Программа);
	
	Если Результат = Неопределено Тогда
		ОписаниеОшибки = Ошибка;
	КонецЕсли;
	
	Возврат Результат;
	ОписаниеОшибки = "";
	
КонецФункции

// Подписывает данные, возвращает подпись и добавляет подпись в объект, если указано.
// 
// Параметры:
//  ОписаниеДанных - Структура - со свойствами:
//    * Операция            - Строка - заголовок формы подписания данных, например, Подписание файла.
//    * ЗаголовокДанных     - Строка - заголовок элемента или набора данных, например Файл.
//    * СообщитьОЗавершении - Булево - (необязательный) - если Ложь, то не будет показано оповещение о успешном
//                              завершении операции для представления данных, указанного рядом с заголовком.
//    * ПоказатьКомментарий - Булево - (необязательный) - разрешает ввод комментария в форме
//                              подписания данных. Если не указан, значит Ложь.
//    * ОтборСертификатов  - Массив - (необязательный) - содержит ссылки на элементы справочника.
//                              СертификатыЭлектроннойПодписиИШифрования, которые могут быть выбраны
//                              пользователем. Отбор блокирует возможность выбора других сертификатов
//                              из личного хранилища.
//    * БезПодтверждения   - Булево - (необязательный) - пропустить подтверждение пользователя, если
//                              в свойстве ОтборСертификатов только один сертификат и:
//                              а) либо сертификат выпущен с усиленной защитой закрытого ключа,
//                              б) либо пользователь запомнил пароль к сертификату на время сеанса,
//                              в) либо пароль установлен ранее методом УстановитьПарольСертификата.
//                              Если в процессе подписания возникла ошибка, тогда будет открыта форма
//                              с возможностью указать пароль. Параметр ПоказатьКомментарий игнорируется.
//    * КонтекстОперации   - Неопределено - (необязательный) - если указан, тогда в свойство будет
//                              установлено определенное значение произвольного типа, которое позволяет
//                              выполнить действие с тем же сертификатом повторно (у пользователя 
//                              не запрашивается ни пароль, ни подтверждение действия).
//    * -------// -------   - Произвольный - (необязательный) - если определено, то действие будет выполнено
//                              с тем же сертификатом без запроса пароля или подтверждения. Параметр.
//                              ОтборСертификатов игнорируется, а параметр БезПодтверждения считается Истина.
//    * ПередВыполнением   - ОписаниеОповещения - описание обработчика дополнительной подготовки данных,
//                              после выбора сертификата, которым будут подписаны данные. В этом обработчике
//                              можно заполнить параметр Данные, если он зависит от сертификата, который
//                              в момент вызова уже вставлен в ОписаниеДанных, как ВыбранныйСертификат (см. ниже).
//    * ВыполнятьНаСервере - Неопределено, Булево - (необязательный) - когда не указан или Неопределено,
//                              тогда выполнение будет определено автоматически: если есть сервер, то сначала
//                              на сервере, потом при неудаче на клиенте, потом сообщение о двух ошибках.
//                              Когда Истина: если есть разрешено выполнение на сервере, тогда выполнение
//                              только на сервере, при неудаче одно сообщение об ошибке на сервере.
//                              Когда Ложь: выполнение только на клиенте, как будто нет сервера.
//    * ПараметрыДополнительныхДействий - Произвольный - (необязательный) - если указан, то передается
//                              на сервер в процедуру ПередНачаломОперации общего модуля.
//                              ЭлектроннаяПодписьПереопределяемый, как ВходныеПараметры.
//    Вариант 1:
//    * Данные                - ДвоичныеДанные - данные для подписания.
//    * --// --                - Строка - адрес временного хранилища, содержащего двоичные данные.
//    * --// --                - ОписаниеОповещения - описание обработчика получения данных,
//                                 в параметр, переданный в этот обработчик. В момент вызова в.
//                                 ОписаниеДанных уже вставлен параметр ВыбранныйСертификат (см. ниже).
//    * Объект                - Ссылка - (необязательный) - ссылка на объект с табличной частью.
//                                 ЭлектронныеПодписи, в которую нужно добавить подпись.
//                                 Если не указан, то подпись не требуется добавлять.
//    * --// --                - ОписаниеОповещения - (необязательный) - описание обработчика
//                                 добавления подписи в табличную часть ЭлектронныеПодписи.
//                                 В обработчик передается ОписаниеДанных с параметром СвойстваПодписи.
//                                 В случае параметра НаборДанных, в ОписаниеДанных вставляется
//                                 свойство ТекущийЭлементНабораДанных, содержащее параметр СвойстваПодписи.
//    * ВерсияОбъекта         - Строка - (необязательный) - версия данных объекта для проверки и
//                                 блокировки объекта перед добавлением подписи.
//    * Представление         - Ссылка, Строка, Структура - (необязательный), если не указан, тогда
//                                 представление вычисляется по значению свойства Объект.
//                                 Структура содержит свойства Значение и Представление.
//    Вариант 2:
//    * НаборДанных           - Массив - структуры со свойствами, описанными в Варианте 1.
//    * ПредставлениеНабора   - Строка - представления нескольких элементов набора данных, например, "Файлы (%1)".
//                                 В это представление в параметр %1 заполняется количество элементов.
//                                 По гиперссылке можно открыть список.
//                                 Если в наборе данных 1 элемент, тогда используется значение
//                                 в свойстве Представление свойства НаборДанных, если не указано, тогда
//                                 представление вычисляется по значению свойства Объект элемента набора данных.
//    * СписокПредставлений   - СписокЗначений, Массив - (необязательный) - произвольный список элементов
//                                 или массив со значениями, как у свойства Представление, которые
//                                 сможет открыть пользователь. Если не указан, то заполняется из
//                                 свойств Представление или Объект в свойстве НаборДанных.
//
//  Форма - УправляемаяФорма - форма из которой нужно получить уникальный идентификатор, который будет
//                                использоваться при блокировке объекта.
//        - Неопределено     - использовать стандартную форму.
//
//  ОбработкаРезультата - ОписаниеОповещения - необязательный параметр.
//     Требуется для нестандартной обработки результата, например, если не указан параметр Объект и/или Форма.
//     В результат передается входной параметр ОписаниеДанных, который в успешном случае, дополняется свойствами:
//     * Успех - Булево - Истина, если все прошло успешно. Если Успех = Ложь, то частичное завершение
//               определяется по наличию свойства СвойстваПодписи. Если есть, то шаг выполнен.
//     * ВыбранныйСертификат - Структура - содержит свойства сертификата:
//         * Ссылка    - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат.
//         * Отпечаток - Строка - отпечаток сертификата в формате строки Base64.
//         * Данные    - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//     * СвойстваПодписи - Строка - адрес временного хранилища, содержащего описанную ниже структуру.
//                         При передаче параметра НаборДанных, свойство нужно проверять в нем.
//                       - Структура - развернутое описание подписи:
//         * Подпись             - ДвоичныеДанные - результат подписания.
//         * УстановившийПодпись - СправочникСсылка.Пользователи - пользователь, который
//                                    подписал объект информационной базы.
//         * Комментарий         - Строка - комментарий, если он был введен при подписании.
//         * ИмяФайлаПодписи     - Строка - пустая строка, т.к. подпись добавлена не из файла.
//         * ДатаПодписи         - Дата   - дата, когда подпись была сделана. Имеет смысл для случая,
//                                          когда дату невозможно извлечь из данных подписи. Если не
//                                          указана или пустая, тогда используется текущая дата сеанса.
//         Производные свойства:
//         * Сертификат          - ДвоичныеДанные - содержит выгрузку сертификата,
//                                    который использовался для подписания (содержится в подписи).
//         * Отпечаток           - Строка - отпечаток сертификата в формате строки Base64.
//         * КомуВыданСертификат - Строка - представление субъекта, полученное из двоичных данных сертификата.
//
Процедура Подписать(ОписаниеДанных, Форма = Неопределено, ОбработкаРезультата = Неопределено) Экспорт
	
	КлиентскиеПараметры = Новый Структура;
	КлиентскиеПараметры.Вставить("ОписаниеДанных", ОписаниеДанных);
	КлиентскиеПараметры.Вставить("Форма", Форма);
	КлиентскиеПараметры.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("СтандартноеЗавершение",
		ЭлектроннаяПодписьСлужебныйКлиент, КлиентскиеПараметры);
	
	Если ОписаниеДанных.Свойство("КонтекстОперации")
	   И ОписаниеДанных.КонтекстОперации <> Неопределено Тогда
	
		ОписаниеДанных.КонтекстОперации.ВыполнитьПодписание(КлиентскиеПараметры, ОбработкаЗавершения);
		Возврат;
	КонецЕсли;
	
	СерверныеПараметры = Новый Структура;
	СерверныеПараметры.Вставить("Операция",            НСтр("ru = 'Подписание данных'"));
	СерверныеПараметры.Вставить("ЗаголовокДанных",     НСтр("ru = 'Данные'"));
	СерверныеПараметры.Вставить("ПоказатьКомментарий", Ложь);
	СерверныеПараметры.Вставить("ОтборСертификатов");
	СерверныеПараметры.Вставить("ВыполнятьНаСервере");
	СерверныеПараметры.Вставить("ПараметрыДополнительныхДействий");
	ЗаполнитьЗначенияСвойств(СерверныеПараметры, ОписаниеДанных);
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОткрытьНовуюФорму("ПодписаниеДанных",
		КлиентскиеПараметры, СерверныеПараметры, ОбработкаЗавершения);
	
КонецПроцедуры

// Предлагает пользователю выбрать файлы подписей для добавления к объекту и добавляет их.
//
// Параметры:
//  ОписаниеДанных - Структура - со свойствами:
//    * ЗаголовокДанных     - Строка - заголовок элемента данных, например Файл.
//    * ПоказатьКомментарий - Булево - (необязательный) - разрешает ввод комментария в форме
//                              добавления подписей. Если не указан, значит Ложь.
//    * Объект             - Ссылка - (необязательный) - ссылка на объект с табличной частью.
//                              ЭлектронныеПодписи, в которую нужно добавить подпись.
//    * --// --             - ОписаниеОповещения - (необязательный) - описание обработчика
//                              добавления подписи в табличную часть ЭлектронныеПодписи.
//                              В обработчик передается ОписаниеДанных с параметром Подписи.
//    * ВерсияОбъекта      - Строка - (необязательный) - версия данных объекта для проверки и
//                              блокировки объекта перед добавлением подписи.
//    * Представление      - Ссылка, Строка - (необязательный), если не указан, тогда
//                                представление вычисляется по значению свойства Объект.
//
//  Форма - УправляемаяФорма - форма из которой нужно получить уникальный идентификатор, который будет
//                                использоваться при блокировке объекта.
//        - Неопределено     - использовать стандартную форму.
//
//  ОбработкаРезультата - ОписаниеОповещения - необязательный параметр.
//     Требуется для нестандартной обработки результата, например, если не указан параметр Объект и/или Форма.
//     В результат передается входной параметр ОписаниеДанных, который в успешном случае, дополняется свойствами:
//     * Успех - Булево - Истина, если все прошло успешно.
//     * Подписи - Массив - который содержит элементы:
//       * СвойстваПодписи - Строка - адрес временного хранилища, содержащего описанную ниже структуру.
//                         - Структура - развернутое описание подписи:
//           * Подпись             - ДвоичныеДанные - результат подписания.
//           * УстановившийПодпись - СправочникСсылка.Пользователи - пользователь, который
//                                      подписал объект информационной базы.
//           * Комментарий         - Строка - комментарий, если он был введен при подписании.
//           * ИмяФайлаПодписи     - Строка - имя файла, из которого добавлена подпись.
//           * ДатаПодписи         - Дата   - дата, когда подпись была сделана. Имеет смысл для случая,
//                                            когда дату невозможно извлечь из данных подписи. Если не
//                                            указана или пустая, тогда используется текущая дата сеанса.
//           Производные свойства:
//           * Сертификат          - ДвоичныеДанные - содержит выгрузку сертификата,
//                                      который использовался для подписания (содержится в подписи).
//           * Отпечаток           - Строка - отпечаток сертификата в формате строки Base64.
//           * КомуВыданСертификат - Строка - представление субъекта, полученное из двоичных данных сертификата.
//
Процедура ДобавитьПодписьИзФайла(ОписаниеДанных, Форма = Неопределено, ОбработкаРезультата = Неопределено) Экспорт
	
	ОписаниеДанных.Вставить("Успех", Ложь);
	
	СерверныеПараметры = Новый Структура;
	СерверныеПараметры.Вставить("ЗаголовокДанных", НСтр("ru = 'Данные'"));
	СерверныеПараметры.Вставить("ПоказатьКомментарий", Ложь);
	ЗаполнитьЗначенияСвойств(СерверныеПараметры, ОписаниеДанных);
	
	ЭлектроннаяПодписьСлужебныйКлиент.НастроитьПредставлениеДанных(ОписаниеДанных, СерверныеПараметры);
	
	КлиентскиеПараметры = Новый Структура;
	КлиентскиеПараметры.Вставить("ОписаниеДанных", ОписаниеДанных);
	КлиентскиеПараметры.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	Обработчик = Новый ОписаниеОповещения("СтандартноеЗавершение",
		ЭлектроннаяПодписьСлужебныйКлиент, КлиентскиеПараметры);
	
	ФормаДобавления = ОткрытьФорму("ОбщаяФорма.ДобавлениеЭлектроннойПодписиИзФайла", СерверныеПараметры,,,,, 
		Новый ОписаниеОповещения("СтандартноеЗавершение", ЭлектроннаяПодписьСлужебныйКлиент, КлиентскиеПараметры));
	
	Если ФормаДобавления = Неопределено Или ФормаДобавления.Открыта() = Ложь Тогда
		ВыполнитьОбработкуОповещения(ОбработкаРезультата, ОписаниеДанных);
	Иначе
		ФормаДобавления.ФормаОбъекта = Форма;
		ФормаДобавления.ОписаниеДанных = ОписаниеДанных;
	КонецЕсли;
	
КонецПроцедуры

// Предлагает пользователю выбрать подписи для сохранения вместе с данными объекта.
//
// Параметры:
//  ОписаниеДанных - Структура - со свойствами:
//    * ЗаголовокДанных     - Строка - заголовок элемента данных, например Файл.
//    * ПоказатьКомментарий - Булево - (необязательный) - разрешает ввод комментария в форме
//                              добавления подписей. Если не указан, значит Ложь.
//    * Представление      - Ссылка, Строка - (необязательный), если не указан, тогда
//                                представление вычисляется по значению свойства Объект.
//    * Объект             - Ссылка - ссылка на объект с табличной частью ЭлектронныеПодписи,
//                              из которой нужно получить список подписей.
//    * --// --             - Строка - адрес временного хранилища массива подписей с составом свойств,
//                              как возвращает процедура ДобавитьПодписьИзФайла.
//    * Данные             - ОписаниеОповещения - описание обработчика сохранения данных и
//                              получения полного имени файла с путем для сохранения электронных подписей.
//                              В обработчик передается описание оповещения в результат которого нужно
//                              поместить ПолноеИмяФайла типа Строка, после того как файл будет сохранен.
//                              Если расширение для работы с файлами не подключено, то передать имя файла без пути.
//                              Если переданное значение не будет заполнено, это считается отказом
//                              продолжения и будет вызвана ОбработкаРезультата с результатом Ложь.
//
//  ОбработкаРезультата - ОписаниеОповещения - необязательный параметр.
//     В результат передается параметр:
//     * Булево - Истина, если все прошло успешно.
//
Процедура СохранитьДанныеВместеСПодписью(ОписаниеДанных, ОбработкаРезультата = Неопределено) Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОписаниеДанных", ОписаниеДанных);
	ПараметрыВыполнения.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("СохранитьДанныеВместеСПодписьюНачало",
		ЭлектроннаяПодписьСлужебныйКлиент, ПараметрыВыполнения);
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОбработкаПродолжения);
	
КонецПроцедуры

// Проверяет действительность подписи и сертификата.
// Сертификат всегда проверяется на сервере, если администратор
// настроил проверку электронных подписей на сервере.
//
// Параметры:
//   МенеджерКриптографии - Неопределено - получить менеджер криптографии по-умолчанию
//                          (менеджер первой программы в списке, как настроил администратор).
//                        - МенеджерКриптографии - использовать указанный менеджер криптографии.
//
//   ИсходныеДанные       - ДвоичныеДанные - двоичные данные, которые были подписаны.
//                          Математическая проверка выполняется на стороне клиента, даже когда
//                          администратор настроил проверку электронных подписей на сервере,
//                          если указан менеджер криптографии или его удалось получить без ошибки.
//                          Это повышает производительность, а также безопасность когда проверяется
//                          подпись в расшифрованном файле (он не будет передан на сервер).
//                        - Строка - адрес временного хранилища, содержащего исходные двоичные данные.
//                        - Строка - полное имя файла, содержащего данные, которые были подписаны
//                          (в этом случае поведение аналогично поведению для типа ДвоичныеДанные).
//
//   Подпись              - ДвоичныеДанные - двоичные данные электронной подписи.
//                        - Строка         - адрес временного хранилища, содержащего двоичные данные.
//                        - Строка         - полное имя файла, содержащего двоичные данные
//                                           электронной подписи.
//
//   ОписаниеОшибки       - Null - вызвать исключение при ошибке проверки (для обратной совместимости).
//                        - Строка - содержит описание ошибки, если произошла ошибка (в случае ошибки
//                          получения менеджера криптографии, когда он не указан, содержит Неопределено).
// 
// Возвращаемое значение:
//  Булево - Истина, если проверка выполнена успешно.
//         - Ложь,   если не удалось получить менеджер криптографии (когда не указан),
//                   или произошла ошибка указанная в параметре ОписаниеОшибки.
//
Функция ПроверитьПодпись(МенеджерКриптографии, ИсходныеДанные, Подпись, ОписаниеОшибки = Null) Экспорт
	
	МенеджерКриптографииДляПроверки = МенеджерКриптографии;
	
	Если Не ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ПроверятьЭлектронныеПодписиНаСервере Тогда
		// Проверка подписи и сертификата на стороне клиента.
		Если МенеджерКриптографииДляПроверки = Неопределено Тогда
			МенеджерКриптографииДляПроверки = МенеджерКриптографии("ПроверкаПодписи");
			
			Если МенеджерКриптографииДляПроверки = Неопределено Тогда
				ОписаниеОшибки = Неопределено;
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ИсходныеДанныеДляПроверки = ИсходныеДанные;
		Если ТипЗнч(ИсходныеДанные) = Тип("Строка") И ЭтоАдресВременногоХранилища(ИсходныеДанные) Тогда
			ИсходныеДанныеДляПроверки = ПолучитьИзВременногоХранилища(ИсходныеДанные);
		КонецЕсли;
		
		ПодписьДляПроверки = Подпись;
		Если ТипЗнч(Подпись) = Тип("Строка") И ЭтоАдресВременногоХранилища(Подпись) Тогда
			ПодписьДляПроверки = ПолучитьИзВременногоХранилища(Подпись);
		КонецЕсли;
		
		Сертификат = Неопределено;
		Попытка
			МенеджерКриптографииДляПроверки.ПроверитьПодпись(ИсходныеДанныеДляПроверки, ПодписьДляПроверки, Сертификат);
		Исключение
			Если ОписаниеОшибки = Null Тогда
				ВызватьИсключение;
			КонецЕсли;
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Ложь;
		КонецПопытки;
		
		Если Не ПроверитьСертификат(МенеджерКриптографииДляПроверки, Сертификат, ОписаниеОшибки) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
	// Подготовка менеджера криптографии для определения возможности
	// математической проверки подписи на стороне клиента.
	Если МенеджерКриптографииДляПроверки = Неопределено Тогда
		МенеджерКриптографииДляПроверки = МенеджерКриптографии("ПроверкаПодписи", Ложь);
	КонецЕсли;
	
	Если МенеджерКриптографииДляПроверки <> Неопределено
	   И Не (ТипЗнч(ИсходныеДанные) = Тип("Строка") И ЭтоАдресВременногоХранилища(ИсходныеДанные)) Тогда
		// Математическая проверка подписи на стороне клиента для повышения производительности и
		// безопасности в случае, когда ИсходныеДанные являются результатом расшифровки секретного файла.
		
		ПодписьДляПроверки = Подпись;
		Если ТипЗнч(Подпись) = Тип("Строка") И ЭтоАдресВременногоХранилища(Подпись) Тогда
			ПодписьДляПроверки = ПолучитьИзВременногоХранилища(Подпись);
		КонецЕсли;
		
		Сертификат = Неопределено;
		Попытка
			МенеджерКриптографииДляПроверки.ПроверитьПодпись(ИсходныеДанныеДляПроверки, ПодписьДляПроверки, Сертификат);
		Исключение
			Если ОписаниеОшибки = Null Тогда
				ВызватьИсключение;
			КонецЕсли;
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Ложь;
		КонецПопытки;
		
		// Проверка сертификата на сервере и на клиенте.
		Если Не ПроверитьСертификат(, Сертификат, ОписаниеОшибки) Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		// Проверка подписи и сертификата на сервере.
		
		Если ТипЗнч(ИсходныеДанные) = Тип("Строка") И ЭтоАдресВременногоХранилища(ИсходныеДанные) Тогда
			АдресИсходныхДанных = ИсходныеДанные;
			
		ИначеЕсли ТипЗнч(ИсходныеДанные) = Тип("ДвоичныеДанные") Тогда
			АдресИсходныхДанных = ПоместитьВоВременноеХранилище(ИсходныеДанные);
		Иначе
			ИсходныеДанныеДляПроверки = Новый ДвоичныеДанные(ИсходныеДанные);
			АдресИсходныхДанных = ПоместитьВоВременноеХранилище(ИсходныеДанныеДляПроверки);
		КонецЕсли;
		
		Если ТипЗнч(Подпись) = Тип("Строка") И ЭтоАдресВременногоХранилища(Подпись) Тогда
			АдресПодписи = Подпись;
			
		ИначеЕсли ТипЗнч(Подпись) = Тип("ДвоичныеДанные") Тогда
			АдресПодписи = ПоместитьВоВременноеХранилище(Подпись);
		Иначе
			ПодписьДляПроверки = Новый ДвоичныеДанные(Подпись);
			АдресПодписи = ПоместитьВоВременноеХранилище(ПодписьДляПроверки);
		КонецЕсли;
		
		Возврат ЭлектроннаяПодписьСлужебныйВызовСервера.ПроверитьПодпись(
			АдресИсходныхДанных, АдресПодписи, ОписаниеОшибки);
	КонецЕсли;
	
КонецФункции

// Шифрует данные, возвращает сертификаты шифрования и добавляет их объект, если указано.
// 
// Параметры:
//  ОписаниеДанных - Структура - со свойствами:
//    * Операция           - Строка - заголовок формы шифрования данных, например, Шифрование файла.
//    * ЗаголовокДанных    - Строка - заголовок элемента или набора данных, например Файл.
//    * СообщитьОЗавершении - Булево - (необязательный) - если Ложь, то не будет показано оповещение о успешном
//                              завершении операции для представления данных, указанного рядом с заголовком.
//    * КонтекстОперации   - Неопределено - (необязательный) - если указан, тогда в свойство будет
//                              установлено определенное значение произвольного типа, которое позволяет
//                              выполнить действие с теми же сертификатами шифрования повторно (у пользователя
//                              не запрашивается подтверждение действия).
//    * -------// -------   - Произвольный - (необязательный) - если определено, то действие будет выполнено
//                              с теми же сертификатами шифрования.
//    * ВыполнятьНаСервере - Неопределено, Булево - (необязательный) - когда не указан или Неопределено,
//                              тогда выполнение будет определено автоматически: если есть сервер, то сначала
//                              на сервере, потом при неудаче на клиенте, потом сообщение о двух ошибках.
//                              Когда Истина: если есть разрешено выполнение на сервере, тогда выполнение
//                              только на сервере, при неудаче одно сообщение об ошибке на сервере.
//                              Когда Ложь: выполнение только на клиенте, как будто нет сервера.
//
//    Вариант 1:
//    * Данные                - ДвоичныеДанные - данные для шифрования.
//    * --// --                - Строка - адрес временного хранилища, содержащего двоичные данные.
//    * --// --                - ОписаниеОповещения - описание обработчика получения данных,
//                                 в параметр переданный в этот обработчик.
//    * РазмещениеРезультата  - Неопределено - (необязательный) - описывает куда поместить зашифрованные данные.
//                                 Если не указан или Неопределено, тогда через параметр ОбработкаРезультата.
//    * --// --                - ОписаниеОповещения - описание обработчика сохранения зашифрованных данных.
//                                 В обработчик передается ОписаниеДанных с параметром ЗашифрованныеДанные.
//                                 В случае параметра НаборДанных, в ОписаниеДанных вставляется
//                                 свойство ТекущийЭлементНабораДанных, содержащее параметр ЗашифрованныеДанные.
//    * Объект                - Ссылка - (необязательный) - ссылка на объект с табличной частью.
//                                 СертификатыШифрования, в которую нужно их добавить после шифрования.
//                                 Если не указан, то сертификаты шифрования не требуется добавлять.
//    * ВерсияОбъекта         - Строка - (необязательный) - версия данных объекта для проверки и
//                                 блокировки объекта перед добавлением сертификатов шифрования.
//    * Представление         - Ссылка, Строка, Структура - (необязательный), если не указан, тогда
//                                 представление вычисляется по значению свойства Объект.
//                                 Структура содержит свойства Значение и Представление.
//    Вариант 2:
//    * НаборДанных           - Массив - структуры со свойствами, описанными в Варианте 1.
//    * ПредставлениеНабора   - Строка - представления нескольких элементов набора данных, например, "Файлы (%1)".
//                                 В это представление в параметр %1 заполняется количество элементов.
//                                 По гиперссылке можно открыть список.
//                                 Если в наборе данных 1 элемент, тогда используется значение
//                                 в свойстве Представление свойства НаборДанных, если не указано, тогда
//                                 представление вычисляется по значению свойства Объект элемента набора данных.
//    * СписокПредставлений   - СписокЗначений, Массив - (необязательный) - произвольный список элементов
//                                 или массив со значениями, как у свойства Представление, которые
//                                 сможет открыть пользователь. Если не указан, то заполняется из
//                                 свойств Представление или Объект в свойстве НаборДанных.
//
//  Форма - УправляемаяФорма  - форма из которой нужно получить уникальный идентификатор, который будет
//                                использоваться при помещении зашифрованных данных во временное хранилище.
//        - Неопределено      - использовать стандартную форму.
//
//  ОбработкаРезультата - ОписаниеОповещения - необязательный параметр.
//     Требуется для нестандартной обработки результата, если не указан параметр Форма и/или РазмещениеРезультата.
//     В результат передается входной параметр ОписаниеДанных, который в успешном случае, дополняется свойствами:
//     * Успех - Булево - Истина, если все прошло успешно. Если Успех = Ложь, то частичное завершение
//               определяется по наличию свойства ЗашифрованныеДанные. Если есть, то шаг выполнен.
//     * СертификатыШифрования - Строка - адрес временного хранилища, содержащего массив, описанный ниже.
//                             - Массив - помещается перед началом шифрования и после этого не изменяется.
//                                 Содержит значения типа Структура со свойствами:
//                                 * Отпечаток     - Строка - отпечаток сертификата в формате строки Base64.
//                                 * Представление - Строка - сохраненное представление субъекта,
//                                                      полученное из двоичных данных сертификата.
//                                 * Сертификат    - ДвоичныеДанные - содержит выгрузку сертификата,
//                                                      который использовался для шифрования.
//     * ЗашифрованныеДанные - ДвоичныеДанные - результат шифрования.
//                             При передаче параметра НаборДанных, свойство нужно проверять в нем.
//                           - Строка - адрес временного хранилища, содержащего результат шифрования.
//
Процедура Зашифровать(ОписаниеДанных, Форма = Неопределено, ОбработкаРезультата = Неопределено) Экспорт
	
	КлиентскиеПараметры = Новый Структура;
	КлиентскиеПараметры.Вставить("ОписаниеДанных", ОписаниеДанных);
	КлиентскиеПараметры.Вставить("Форма", Форма);
	КлиентскиеПараметры.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("СтандартноеЗавершение",
		ЭлектроннаяПодписьСлужебныйКлиент, КлиентскиеПараметры);
	
	Если ОписаниеДанных.Свойство("КонтекстОперации")
	   И ОписаниеДанных.КонтекстОперации <> Неопределено Тогда
	
		ОписаниеДанных.КонтекстОперации.ВыполнитьШифрование(КлиентскиеПараметры, ОбработкаЗавершения);
		Возврат;
	КонецЕсли;
	
	СерверныеПараметры = Новый Структура;
	СерверныеПараметры.Вставить("Операция",            НСтр("ru = 'Шифрование данных'"));
	СерверныеПараметры.Вставить("ЗаголовокДанных",     НСтр("ru = 'Данные'"));
	СерверныеПараметры.Вставить("ВыполнятьНаСервере");
	ЗаполнитьЗначенияСвойств(СерверныеПараметры, ОписаниеДанных);
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОткрытьНовуюФорму("ШифрованиеДанных",
		КлиентскиеПараметры, СерверныеПараметры, ОбработкаЗавершения);
	
КонецПроцедуры

// Расшифровывает данные, возвращает их и помещает в объект, если указано.
// 
// Параметры:
//  ОписаниеДанных - Структура - со свойствами:
//    * Операция           - Строка - заголовок формы расшифровки данных, например, Расшифровка файла.
//    * ЗаголовокДанных    - Строка - заголовок элемента или набора данных, например Файл.
//    * СообщитьОЗавершении - Булево - (необязательный) - если Ложь, то не будет показано оповещение о успешном
//                              завершении операции для представления данных, указанного рядом с заголовком.
//    * ОтборСертификатов  - Массив - (необязательный) - содержит ссылки на элементы справочника.
//                              СертификатыЭлектроннойПодписиИШифрования, которые могут быть выбраны
//                              пользователем. Отбор блокирует возможность выбора других сертификатов
//                              из личного хранилища.
//    * БезПодтверждения   - Булево - (необязательный) - пропустить подтверждение пользователя, если
//                              в свойстве ОтборСертификатов только один сертификат и:
//                              а) либо сертификат выпущен с усиленной защитой закрытого ключа,
//                              б) либо пользователь запомнил пароль к сертификату на время сеанса,
//                              в) либо пароль установлен ранее методом УстановитьПарольСертификата.
//                              Если в процессе расшифровки возникла ошибка, тогда будет открыта форма
//                              с возможностью указать пароль.
//    * КонтекстОперации   - Неопределено - (необязательный) - если указан, тогда в свойство будет
//                              установлено определенное значение произвольного типа, которое позволяет
//                              выполнить действие с тем же сертификатом повторно (у пользователя 
//                              не запрашивается ни пароль, ни подтверждение действия).
//    * -------// -------   - Произвольный - (необязательный) - если определено, то действие будет выполнено
//                              с тем же сертификатом без запроса пароля или подтверждения. Параметр.
//                              ОтборСертификатов игнорируется, а параметр БезПодтверждения считается Истина.
//    * ЭтоАутентификация  - Булево - (необязательный) - если указан Истина, то вместо кнопки Расшифровать
//                              будет показана кнопка ОК. А также скорректированы некоторые надписи.
//                              Кроме того, параметр СообщитьОЗавершении устанавливается Ложь.
//    * ПередВыполнением   - ОписаниеОповещения - описание обработчика дополнительной подготовки данных,
//                              после выбора сертификата, которым будут расшифрованы данные. В этом обработчике
//                              можно заполнить параметр Данные, если необходимо. В момент вызова уже вставлен
//                              выбранный сертификат в ОписаниеДанных, как ВыбранныйСертификат (см. ниже).
//    * ВыполнятьНаСервере - Неопределено, Булево - (необязательный) - когда не указан или Неопределено,
//                              тогда выполнение будет определено автоматически: если есть сервер, то сначала
//                              на сервере, потом при неудаче на клиенте, потом сообщение о двух ошибках.
//                              Когда Истина: если есть разрешено выполнение на сервере, тогда выполнение
//                              только на сервере, при неудаче одно сообщение об ошибке на сервере.
//                              Когда Ложь: выполнение только на клиенте, как будто нет сервера.
//    * ПараметрыДополнительныхДействий - Произвольный - (необязательный) - если указан, то передается
//                              на сервер в процедуру ПередНачаломОперации общего модуля.
//                              ЭлектроннаяПодписьПереопределяемый, как ВходныеПараметры.
// 
//    Вариант 1:
//    * Данные                - ДвоичныеДанные - данные для расшифровки.
//    * --// --                - Строка - адрес временного хранилища, содержащего двоичные данные.
//    * --// --                - ОписаниеОповещения - описание обработчика получения данных,
//                                 в параметр, переданный в этот обработчик. В момент вызова в.
//                                 ОписаниеДанных уже вставлен параметр ВыбранныйСертификат (см. ниже).
//    * РазмещениеРезультата  - Неопределено - (необязательный) - описывает куда поместить расшифрованные данные.
//                                 Если не указан или Неопределено, тогда через параметр ОбработкаРезультата.
//    * --// --                - ОписаниеОповещения - описание обработчика сохранения расшифрованных данных.
//                                 В обработчик передается ОписаниеДанных с параметром РасшифрованныеДанные.
//                                 В случае параметра НаборДанных, в ОписаниеДанных вставляется
//                                 свойство ТекущийЭлементНабораДанных, содержащее параметр РасшифрованныеДанные.
//    * Объект                - Ссылка - (необязательный) - ссылка на объект с табличной частью.
//                                 СертификатыШифрования, из которой нужно получить сертификаты,
//                                 а также очистить после успешного завершения расшифровки.
//                                 Если не указан, то сертификаты не требуется получать из объекта и очищать.
//    * --// --                - Строка - адрес временного хранилища, содержащего массив сертификатов
//                                 шифрования в виде структур со свойствами:
//                                 * Отпечаток     - Строка - отпечаток сертификата в формате строки Base64.
//                                 * Представление - Строка - сохраненное представление субъекта,
//                                                      полученное из двоичных данных сертификата.
//                                 * Сертификат    - ДвоичныеДанные - содержит выгрузку сертификата,
//                                                      который использовался для шифрования.
//    * Представление         - Ссылка, Строка, Структура - (необязательный), если не указан, тогда
//                                 представление вычисляется по значению свойства Объект.
//                                 Структура содержит свойства Значение и Представление.
//    Вариант 2:
//    * НаборДанных           - Массив - структуры со свойствами, описанными в Варианте 1.
//    * ПредставлениеНабора   - Строка - представления нескольких элементов набора данных, например, "Файлы (%1)".
//                                 В это представление в параметр %1 заполняется количество элементов.
//                                 По гиперссылке можно открыть список.
//                                 Если в наборе данных 1 элемент, тогда используется значение
//                                 в свойстве Представление свойства НаборДанных, если не указано, тогда
//                                 представление вычисляется по значению свойства Объект элемента набора данных.
//    * СписокПредставлений   - СписокЗначений, Массив - (необязательный) - произвольный список элементов
//                                 или массив со значениями, как у свойства Представление, которые
//                                 сможет открыть пользователь. Если не указан, то заполняется из
//                                 свойств Представление или Объект в свойстве НаборДанных.
//    * СертификатыШифрования - Массив - (необязательный) значения, как у параметра Объект. Используется
//                                 для извлечения списков сертификатов шифрования для элементов, указанных
//                                 в параметре СписокПредставлений (порядок должен соответствовать).
//                                 Когда указан, параметр Объект не используется.
//
//  Форма - УправляемаяФорма  - форма из которой нужно получить уникальный идентификатор, который будет
//                                использоваться при помещении расшифрованных данных во временное хранилище.
//        - Неопределено      - использовать стандартную форму.
//
//  ОбработкаРезультата - ОписаниеОповещения - необязательный параметр.
//     Требуется для нестандартной обработки результата, если не указан параметр Форма и/или РазмещениеРезультата.
//     В результат передается входной параметр ОписаниеДанных, который в успешном случае, дополняется свойствами:
//     * Успех - Булево - Истина, если все прошло успешно. Если Успех = Ложь, то частичное завершение
//               определяется по наличию свойства РасшифрованныеДанные. Если есть, то шаг выполнен.
//     * ВыбранныйСертификат - Структура - содержит свойства сертификата:
//         * Ссылка    - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат.
//         * Отпечаток - Строка - отпечаток сертификата в формате строки Base64.
//         * Данные    - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//     * РасшифрованныеДанные - ДвоичныеДанные - результат расшифровки.
//                              При передаче параметра НаборДанных, свойство нужно проверять в нем.
//                            - Строка - адрес временного хранилища, содержащего результат расшифровки.
//
Процедура Расшифровать(ОписаниеДанных, Форма = Неопределено, ОбработкаРезультата = Неопределено) Экспорт
	
	КлиентскиеПараметры = Новый Структура;
	КлиентскиеПараметры.Вставить("ОписаниеДанных", ОписаниеДанных);
	КлиентскиеПараметры.Вставить("Форма", Форма);
	КлиентскиеПараметры.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("СтандартноеЗавершение",
		ЭлектроннаяПодписьСлужебныйКлиент, КлиентскиеПараметры);
	
	Если ОписаниеДанных.Свойство("КонтекстОперации")
	   И ОписаниеДанных.КонтекстОперации <> Неопределено Тогда
	
		ОписаниеДанных.КонтекстОперации.ВыполнитьРасшифровку(КлиентскиеПараметры, ОбработкаЗавершения);
		Возврат;
	КонецЕсли;
	
	СерверныеПараметры = Новый Структура;
	СерверныеПараметры.Вставить("Операция",            НСтр("ru = 'Расшифровка данных'"));
	СерверныеПараметры.Вставить("ЗаголовокДанных",     НСтр("ru = 'Данные'"));
	СерверныеПараметры.Вставить("ОтборСертификатов");
	СерверныеПараметры.Вставить("СертификатыШифрования");
	СерверныеПараметры.Вставить("ЭтоАутентификация");
	СерверныеПараметры.Вставить("ВыполнятьНаСервере");
	СерверныеПараметры.Вставить("ПараметрыДополнительныхДействий");
	СерверныеПараметры.Вставить("РазрешитьЗапоминатьПароль");
	ЗаполнитьЗначенияСвойств(СерверныеПараметры, ОписаниеДанных);
	
	Если ОписаниеДанных.Свойство("Данные") Тогда
		Если ТипЗнч(СерверныеПараметры.СертификатыШифрования) <> Тип("Массив")
		   И ОписаниеДанных.Свойство("Объект") Тогда
			
			СерверныеПараметры.Вставить("СертификатыШифрования", ОписаниеДанных.Объект);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СерверныеПараметры.СертификатыШифрования) <> Тип("Массив") Тогда
		
		СерверныеПараметры.Вставить("СертификатыШифрования", Новый Массив);
		Для каждого ЭлементДанных Из ОписаниеДанных.НаборДанных Цикл
			Если ЭлементДанных.Свойство("Объект") Тогда
				СерверныеПараметры.СертификатыШифрования.Добавить(ЭлементДанных.Объект);
			Иначе
				СерверныеПараметры.СертификатыШифрования.Добавить(Неопределено);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОткрытьНовуюФорму("РасшифровкаДанных",
		КлиентскиеПараметры, СерверныеПараметры, ОбработкаЗавершения);
	
КонецПроцедуры


// Проверяет действительность сертификата криптографии.
//
// Параметры:
//   МенеджерКриптографии - Неопределено - получить менеджер криптографии автоматически.
//                        - МенеджерКриптографии - использовать указанный менеджер криптографии
//                          (проверка на сервере не будет выполнена).
//
//   Сертификат           - СертификатКриптографии - сертификат.
//                        - ДвоичныеДанные - двоичные данные сертификата.
//                        - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//
//   ОписаниеОшибки       - Строка - содержит описание ошибки, если произошла ошибка (в случае ошибки
//                          получения менеджера криптографии, когда он не указан, содержит Неопределено).
//
// Возвращаемое значение:
//  Булево - Истина, если проверка выполнена успешно,
//         - Ложь, если не удалось получить менеджер криптографии (когда не указан).
//
Функция ПроверитьСертификат(МенеджерКриптографии, Сертификат, ОписаниеОшибки) Экспорт
	
	Если МенеджерКриптографии <> Неопределено Тогда
		// Когда менеджер криптографии указан, тогда выполняется проверка на клиенте.
		ТекущееОписаниеОшибки = ЭлектроннаяПодписьСлужебныйКлиентСервер.ОшибкаПроверкиСертификата(
			МенеджерКриптографии, Сертификат);
		
		Если ТекущееОписаниеОшибки = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		ОписаниеОшибки = ТекущееОписаниеОшибки;
		Возврат Ложь;
	КонецЕсли;
	
	ОбщиеНастройки = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки();
	
	Если ОбщиеНастройки.ПроверятьЭлектронныеПодписиНаСервере Тогда
		
		// Проверка сертификата на сервере.
		Если ТипЗнч(Сертификат) = Тип("СертификатКриптографии") Тогда
			АдресСертификата = ПоместитьВоВременноеХранилище(Сертификат.Выгрузить());
			
		ИначеЕсли ТипЗнч(Сертификат) = Тип("ДвоичныеДанные") Тогда
			АдресСертификата = ПоместитьВоВременноеХранилище(Сертификат);
		Иначе
			АдресСертификата = Сертификат;
		КонецЕсли;
		
		ТекущееОписаниеОшибки = Неопределено;
		Если ЭлектроннаяПодписьСлужебныйВызовСервера.ПроверитьСертификат(АдресСертификата, ТекущееОписаниеОшибки) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка сертификата на клиенте.
	МенеджерКриптографииДляПроверки = МенеджерКриптографии(
		"ПроверкаСертификата", ТекущееОписаниеОшибки = Неопределено);
	
	Если МенеджерКриптографииДляПроверки = Неопределено Тогда
		Если ТекущееОписаниеОшибки = Неопределено Тогда
			ОписаниеОшибки = Неопределено;
		Иначе
			ОписаниеОшибки = ТекущееОписаниеОшибки;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеОшибки = ЭлектроннаяПодписьСлужебныйКлиентСервер.ОшибкаПроверкиСертификата(
		МенеджерКриптографииДляПроверки, Сертификат);
	
	Если ОписаниеОшибки = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТекущееОписаниеОшибки <> Неопределено Тогда
		ОписаниеОшибки = ТекущееОписаниеОшибки + " " + НСтр("ru = '(на сервере)'") + Символы.ПС
			+ ОписаниеОшибки + " " + НСтр("ru = '(на клиенте)'");
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Открывает форму ПроверкаСертификата и возвращает результат проверки.
//
// Параметры:
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - проверяемый сертификат.
//
//  ДополнительныеПараметры - Неопределено - обычная проверка сертификата.
//                          - Структура - с необязательными свойствами:
//    * ВладелецФормы          - УправляемаяФорма - другая форма.
//    * ЗаголовокФормы         - Строка - если указан, тогда заменяет заголовок формы.
//    * ПроверкаПриВыборе      - Булево - если Истина, тогда кнопка Проверить будет называться
//                                  "Проверить и продолжить", а кнопка Закрыть будет называться "Отмена".
//    * ОбработкаРезультата    - ОписаниеОповещения - вызывается сразу после проверки, в процедуру
//                                 передается Результат.ПроверкиПройдены (см. ниже) с начальным значением Ложь.
//                                 В режиме ПроверкаПриВыборе, если не установить Истина,
//                                 тогда форма не будет закрыта после возврата из процедуры оповещения и
//                                 будет показано предупреждение о невозможности продолжения.
//    * БезПодтверждения       - Булево - если установить Истина, тогда при наличии пароля
//                                  проверка будет выполнена сразу без открытия формы.
//                                  Если режим ПроверкаПриВыборе и установлен параметр ОбработкаРезультата, то
//                                  форма не будет открыта, если параметр ПроверкиПройдены установлен Истина.
//    * ОбработкаЗавершения    - ОписаниеОповещения - вызывается при закрытии формы.
//    * Результат              - Неопределено - проверка ни разу не выполнялась.
//                             - Структура - (возвращаемое значение) - вставляется перед обработкой результата,
//         содержит свойства:
//         * ПроверкиПройдены  - Булево - (возвращаемое значение) устанавливается в процедуре параметра
//                                        ОбработкаРезультата.
//         * ПроверкиНаСервере - Неопределено - проверка не выполнялась на сервере:
//                             - Структура - со свойствами, как в следующем параметре.
//         * ПроверкиНаКлиенте - Структура - со свойствами:
//             * НаличиеСертификата  - Булево, Неопределено - если Истина, тогда проверка прошла успешно, если.
//                                     Ложь - проверка прошла не успешно, если Неопределено - не выполнялась.
//             * ДанныеСертификата   - Булево, Неопределено - также, как указано выше.
//             * НаличиеПрограммы    - Булево, Неопределено - также, как указано выше.
//             * Подписание          - Булево, Неопределено - также, как указано выше.
//             * ПроверкаПодписи     - Булево, Неопределено - также, как указано выше.
//             * Шифрование          - Булево, Неопределено - также, как указано выше.
//             * Расшифровка         - Булево, Неопределено - также, как указано выше.
//             * <Имя дополнительной проверки> - Булево, Неопределено - также, как указано выше.
//
//    * ПараметрыДополнительныхПроверок - Произвольный - параметры, которые передаются в процедуру.
//        ПриСозданииФормыПроверкаСертификата общего модуля ЭлектроннаяПодписьПереопределяемый.
//
Процедура ПроверитьСертификатСправочника(Сертификат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПроверитьСертификатСправочника(Сертификат, ДополнительныеПараметры);
	
КонецПроцедуры

// Показывает диалог установки расширения для работы с электронной подписью и шифрованием.
//
// Параметры:
//   БезВопроса           - Булево - если указано Истина, тогда вопроса показано не будет.
//                                   Требуется, если пользователь нажал на кнопку Установить расширение.
//
//   ОбработчикРезультата - ОписаниеОповещения - Описание процедуры, принимающей результат выбора.
//   ТекстВопроса         - Строка - Текст вопроса.
//   ЗаголовокВопроса     - Строка - Заголовок вопроса.
//
// Значение первого параметра, возвращаемого в обработчик вызывающего кода:
//   РасширениеУстановлено
//       * Истина - Пользователь подтвердил установку, после установки расширение было успешно подключено.
//       * Ложь   - Пользователь подтвердил установку, однако после установки расширение не удалось подключить.
//       * Неопределено - Пользователь отказался от установки.
//
Процедура УстановитьРасширение(БезВопроса, ОбработчикРезультата = Неопределено, ТекстВопроса = "", ЗаголовокВопроса = "") Экспорт
	
	Если ПодключитьРасширениеРаботыСКриптографией() Тогда
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, Истина);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ДополнительныеПараметры.Вставить("ТекстВопроса",         ТекстВопроса);
	ДополнительныеПараметры.Вставить("ЗаголовокВопроса",     ЗаголовокВопроса);
	ДополнительныеПараметры.Вставить("БезВопроса",           БезВопроса);
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(
		Новый ОписаниеОповещения("УстановитьРасширениеПродолжение",
			ЭлектроннаяПодписьСлужебныйКлиент, ДополнительныеПараметры),
		НСтр("ru = 'Перед установкой расширения для работы с электронной подписью и шифрованием
		           |необходимо установить расширение для работы с файлами.'"),
		Ложь);
	
КонецПроцедуры

// Открывает или активизирует форму настроек электронной подписи и шифрования.
// 
// Параметры:
//  Страница - Строка - допустимы строки "Сертификаты", "Настройки", "Программы".
//
Процедура ОткрытьНастройкиЭлектроннойПодписиИШифрования(Страница = "Сертификаты") Экспорт
	
	ПараметрыФормы = Новый Структура;
	Если Страница = "Сертификаты" Тогда
		ПараметрыФормы.Вставить("ПоказатьСтраницуСертификаты");
		
	ИначеЕсли Страница = "Настройки" Тогда
		ПараметрыФормы.Вставить("ПоказатьСтраницуНастройки");
		
	ИначеЕсли Страница = "Программы" Тогда
		ПараметрыФормы.Вставить("ПоказатьСтраницуПрограммы");
	КонецЕсли;
	
	Форма = ОткрытьФорму("ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования", ПараметрыФормы);
	
	// При повторном открытии формы требуются дополнительные действия.
	Если Страница = "Сертификаты" Тогда
		Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаСертификаты;
		
	ИначеЕсли Страница = "Настройки" Тогда
		Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаНастройки;
		
	ИначеЕсли Страница = "Программы" Тогда
		Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаПрограммы;
	КонецЕсли;
	
	Форма.Открыть();
	
КонецПроцедуры

// Устанавливает пароль в хранилище паролей на клиенте на время сеанса.
// Установка пароля позволяют не вводить пароль пользователю при очередной
// операции, что полезно при выполнении пакета операций.
// Если для сертификата установлен пароль, тогда флажок ЗапомнитьПароль
// в формах ПодписаниеДанных и РасшифровкаДанных становится невидимым.
// Для отмены установленного пароля достаточно установить значение пароля Неопределено.
//
// Параметры:
//  СертификатСсылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат,
//                        для которого устанавливается пароль.
//
//  Пароль           - Строка - устанавливаемый пароль. Может быть пустой.
//                   - Неопределено - сбросить установленный пароль, если был установлен.
//
//  ПояснениеПароля   - Структура - со свойствами, описывающими пояснение, которое будет написано
//                      под паролем вместо флажка ЗапомнитьПароль:
//     * ТекстПояснения       - Строка - только текст;
//     * ПояснениеГиперссылка - Булево - если истина, то при нажатии на пояснение, вызывать ОбработкаДействия.
//     * ТекстПодсказки       - Строка, ФорматированнаяСтрока - текст или текст со ссылками.
//     * ОбработкаДействия    - ОписаниеОповещения - вызывает процедуру, в которую передается
//          структура со свойствами:
//          * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка
//                         на выбранный сертификат;
//          * Действие   - Строка - "ПояснениеНажатие" или навигационная ссылка подсказки.
// 
Процедура УстановитьПарольСертификата(СертификатСсылка, Пароль, ПояснениеПароля = Неопределено) Экспорт
	
	ЭлектроннаяПодписьСлужебныйКлиент.УстановитьПарольСертификата(СертификатСсылка, Пароль, ПояснениеПароля);
	
КонецПроцедуры

// Переопределяет обычный выбор сертификата из справочника на выбор сертификата
// из личного хранилища с подтверждением паролем и автоматическим добавлением в справочник,
// если сертификата в справочнике еще нет.
//
// Параметры:
//  Элемент    - ПолеФормы - элемент формы, в который будет передано выбранное значение.
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - текущее значение,
//               выбранное в поле Элемент, которое нужно чтобы выделить соответствующую строку списка.
//
//  СтандартнаяОбработка - Булево - стандартный параметр события НачалоВыбора, который нужно сбросить в Ложь.
//  
//  ДляШифрованияИРасшифровки - Булево - управляет заголовком формы выбора. Начальное значение Ложь.
//                              Ложь - для подписания, Истина - для шифрования и расшифровки,
//                            - Неопределено - для подписания и шифрования.
//
Процедура СертификатНачалоВыбораСПодтверждением(Элемент, Сертификат, СтандартнаяОбработка, ДляШифрованияИРасшифровки = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбранныйСертификат", Сертификат);
	ПараметрыФормы.Вставить("ДляШифрованияИРасшифровки", Истина);
	
	ЭлектроннаяПодписьСлужебныйКлиент.ВыборСертификатаДляПодписанияИлиРасшифровки(ПараметрыФормы, Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Устаревшие процедуры и функции.

// Устарела. Следует использовать ОткрытьНастройкиЭлектроннойПодписиИШифрования.
Процедура ОткрытьФормуНастройкиЭП() Экспорт
	
	ОткрытьНастройкиЭлектроннойПодписиИШифрования();
	
КонецПроцедуры

// Устарела. Следует использовать процедуру Подписать.
Функция СформироватьДанныеПодписи(
			МенеджерКриптографии,
			ОбъектДляПодписиСсылка,
			ДвоичныеДанные,
			СтруктураПараметровПодписи) Экспорт
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.Пароль;
	ДатаПодписи = Дата('00010101');
	
	НоваяПодписьДвоичныеДанные = МенеджерКриптографии.Подписать(ДвоичныеДанные, СтруктураПараметровПодписи.Сертификат);
	ОписаниеОшибки = "";
	Если ЭлектроннаяПодписьСлужебныйКлиентСервер.ПустыеДанныеПодписи(НоваяПодписьДвоичныеДанные, ОписаниеОшибки) Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Отпечаток = Base64Строка(СтруктураПараметровПодписи.Сертификат.Отпечаток);
	КомуВыдан = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СтруктураПараметровПодписи.Сертификат);
	ДвоичныеДанныеСертификата = СтруктураПараметровПодписи.Сертификат.Выгрузить();
	
	ДанныеПодписи = Новый Структура;
	ДанныеПодписи.Вставить("ОбъектСсылка", ОбъектДляПодписиСсылка);
	ДанныеПодписи.Вставить("НоваяПодписьДвоичныеДанные", НоваяПодписьДвоичныеДанные);
	ДанныеПодписи.Вставить("Отпечаток", Отпечаток);
	ДанныеПодписи.Вставить("ДатаПодписи", ДатаПодписи);
	ДанныеПодписи.Вставить("Комментарий", СтруктураПараметровПодписи.Комментарий);
	ДанныеПодписи.Вставить("ИмяФайлаПодписи", "");
	ДанныеПодписи.Вставить("КомуВыданСертификат", КомуВыдан);
	ДанныеПодписи.Вставить("АдресФайла", "");
	ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);
	
	Возврат ДанныеПодписи;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Открывает форму просмотра подписи ЭП.
Процедура ОткрытьПодпись(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваПодписи = Новый Структура(
		"ДатаПодписи, Комментарий, КомуВыданСертификат, Отпечаток,
		|АдресПодписи, УстановившийПодпись, АдресСертификата");
	
	ЗаполнитьЗначенияСвойств(СвойстваПодписи, ТекущиеДанные);
	
	ПараметрыФормы = Новый Структура("СвойстваПодписи", СвойстваПодписи);
	ОткрытьФорму("ОбщаяФорма.ЭлектроннаяПодпись", ПараметрыФормы);
	
КонецПроцедуры

// Сохраняет подпись на диск
Процедура СохранитьПодпись(АдресПодписи) Экспорт
	
	РасширениеДляФайловПодписи = ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файлы электронных подписей (*.%1)|*.%1|Все файлы (*.*)|*.*'"),
		РасширениеДляФайловПодписи);
	
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл для сохранения подписи'");
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		ПолныйПутьПодписи = ДиалогОткрытияФайла.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		ПередаваемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьПодписи, АдресПодписи);
		ПередаваемыеФайлы.Добавить(Описание);
		
		ПутьКФайлу = Файл.Путь;
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу);
		
		// Сохранение Файла из информационной базы на диск.
		ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь);
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Электронная подпись сохранена в файл
			           |""%1"".'"),
			ДиалогОткрытияФайла.ПолноеИмяФайла);
		
		Состояние(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму просмотра данных сертификата.
//
// Параметры:
//  ДанныеСертификата - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат.
//                    - СертификатКриптографии - имеющийся сертификат.
//                    - ДвоичныеДанные - двоичные данные сертификата.
//                    - Строка - адрес временного хранилища содержащий ДвоичныеДанные сертификата.
//                    - Строка - отпечаток сертификата для поиска во всех хранилищах.
//
//  ОткрытьДанные     - Булево - открыть данные сертификата, а не форму элемента справочника.
//                      Если передана не ссылка на элемент справочника и элемент справочника
//                      не удалось найти по отпечатку, тогда будут открыты данные сертификата.
//
Процедура ОткрытьСертификат(ДанныеСертификата, ОткрытьДанные = Ложь) Экспорт
	
	Если ТипЗнч(ДанныеСертификата) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		Ссылка = ДанныеСертификата;
		
	ИначеЕсли ТипЗнч(ДанныеСертификата) = Тип("ДвоичныеДанные") Тогда
		АдресСертификата = ПоместитьВоВременноеХранилище(ДанныеСертификата);
		
	ИначеЕсли ТипЗнч(ДанныеСертификата) = Тип("СертификатКриптографии") Тогда
		АдресСертификата = ПоместитьВоВременноеХранилище(ДанныеСертификата.Выгрузить());
		
	ИначеЕсли ТипЗнч(ДанныеСертификата) <> Тип("Строка") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при вызове процедуры ОткрытьСертификат общего модуля ЭлектроннаяПодписьКлиент:
			           |Некорректное значение параметра ДанныеСертификата ""%1"".'"), Строка(ДанныеСертификата));
	
	ИначеЕсли ЭтоАдресВременногоХранилища(ДанныеСертификата) Тогда
		АдресСертификата = ДанныеСертификата;
	Иначе
		Отпечаток = ДанныеСертификата;
	КонецЕсли;
	
	Если Не ОткрытьДанные Тогда
		Если Ссылка = Неопределено Тогда
			Ссылка = ЭлектроннаяПодписьСлужебныйВызовСервера.СсылкаНаСертификат(Отпечаток, АдресСертификата);
		КонецЕсли;
		Если ЗначениеЗаполнено(Ссылка) Тогда
			ПоказатьЗначение(, Ссылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если АдресСертификата = Неопределено И Ссылка = Неопределено Тогда
		Сертификат = ПолучитьСертификатПоОтпечатку(Отпечаток, Ложь, , Ложь);
		Если Сертификат <> Неопределено Тогда
			АдресСертификата = ПоместитьВоВременноеХранилище(Сертификат.Выгрузить());
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка", Ссылка);
	ПараметрыФормы.Вставить("АдресСертификата", АдресСертификата);
	ПараметрыФормы.Вставить("Отпечаток", Отпечаток);
	
	ОткрытьФорму("ОбщаяФорма.Сертификат", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// По окончании подписания сообщает о подписании.
//
// Параметры:
//  ПредставлениеДанных - Произвольный - ссылка на объект, в табличную
//                          часть которого добавлена электронная подпись.
//  МножествоДанных     - Булево - определяет вид сообщения множественное
//                          или единственное число элементов.
//  ИзФайла             - Булево - определяет вид сообщения добавления
//                          электронной подписи или файла.
//
Процедура ИнформироватьОПодписанииОбъекта(ПредставлениеДанных, МножествоДанных = Ложь, ИзФайла = Ложь) Экспорт
	
	Если ИзФайла Тогда
		Если МножествоДанных Тогда
			ШаблонСообщения = НСтр("ru = 'Добавлены подписи из файлов для ""%1""'");
		Иначе
			ШаблонСообщения = НСтр("ru = 'Добавлена подпись из файла для ""%1""'");
		КонецЕсли;
	Иначе
		Если МножествоДанных Тогда
			ШаблонСообщения = НСтр("ru = 'Установлены подписи для ""%1""'");
		Иначе
			ШаблонСообщения = НСтр("ru = 'Установлена подпись для ""%1""'");
		КонецЕсли;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения, ПредставлениеДанных);
	
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// По окончании шифрования сообщает о завершении.
//
// Параметры:
//  ПредставлениеДанных - Произвольный - ссылка на объект,
//                          данные которого зашифрованы.
//  МножествоДанных     - Булево - определяет вид сообщения множественное
//                          или единственное число элементов.
//
Процедура ИнформироватьОШифрованииОбъекта(ПредставлениеДанных, МножествоДанных = Ложь) Экспорт
	
	Если МножествоДанных Тогда
		ШаблонСообщения = НСтр("ru = '""%1"" зашифрованы.'");
	Иначе
		ШаблонСообщения = НСтр("ru = '""%1"" зашифрован.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения, ПредставлениеДанных);
	
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// По окончании расшифровки сообщает о завершении.
//
// Параметры:
//  ПредставлениеДанных - Произвольный - ссылка на объект,
//                          данные которого расшифрованы.
//  МножествоДанных     - Булево - определяет вид сообщения множественное
//                          или единственное число элементов.
//
Процедура ИнформироватьОРасшифровкеОбъекта(ПредставлениеДанных, МножествоДанных = Ложь) Экспорт
	
	Если МножествоДанных Тогда
		ШаблонСообщения = НСтр("ru = '""%1"" расшифрованы.'");
	Иначе
		ШаблонСообщения = НСтр("ru = '""%1"" расшифрован.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения, ПредставлениеДанных);
	
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// Находит сертификат на компьютере по строке отпечатка.
//
// Параметры:
//   Отпечаток              - Строка - Base64 кодированный отпечаток сертификата.
//   ТолькоВЛичномХранилище - Булево - Если Истина, то поиск производится только в личном хранилище.
//
// Возвращаемое значение:
//   СертификатКриптографии - сертификат электронной подписи и шифрования.
//   Неопределено - сертификат не найден.
//
Функция ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище,
			Программа = Неопределено, ПоказатьОшибку = Истина, ОписаниеОшибки = "") Экспорт
	
	МенеджерКриптографии = ЭлектроннаяПодписьСлужебныйКлиент.МенеджерКриптографии("ПолучениеСертификатов",
		ПоказатьОшибку, ОписаниеОшибки, Программа);
	
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Сертификат = ЭлектроннаяПодписьСлужебныйКлиентСервер.ПолучитьСертификатПоОтпечатку(
		МенеджерКриптографии, Отпечаток, ТолькоВЛичномХранилище, ПоказатьОшибку, ОписаниеОшибки);
	
	Если Сертификат = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Сертификат не найден на компьютере.'");
		Если ТипЗнч(ОписаниеОшибки) = Тип("Структура") Тогда
			ОписаниеОшибки.Вставить("ОписаниеОшибки", ТекстОшибки);
		Иначе
			ОписаниеОшибки = ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Сертификат;
	
КонецФункции

// Заполняет структуру полями сертификата.
//
// Параметры:
//   Отпечаток - Строка - Base64 кодированный отпечаток сертификата.
//
// Возвращаемое значение:
//   Структура - Структура с полями сертификата.
//
Функция ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	МенеджерКриптографии = МенеджерКриптографии("ПолучениеСертификатов");
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Если Сертификат = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Сертификат не найден'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	
КонецФункции

// Получает массив структур сертификатов для показа в диалоге выбора сертификатов для подписи или шифрования.
//
// Параметры:
//  ТолькоЛичные - Булево - Если Ложь, то берутся также и сертификаты получателей.
//
// Возвращаемое значение:
//   Массив - массив структур с полями сертификата.
//
Функция ПолучитьМассивСтруктурСертификатов(Знач ТолькоЛичные) Экспорт
	
	МассивСтруктурСертификатов = Новый Массив;
	
	МенеджерКриптографии = МенеджерКриптографии("ПолучениеСертификатов");
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат МассивСтруктурСертификатов;
	КонецЕсли;
	
	// Используется для выявления истекших сертификатов, которые хранятся на клиентском компьютере.
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаУниверсальная();
	
	Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	СертификатыХранилища = Хранилище.ПолучитьВсе();
	
	МассивСтрокОтпечатков = Новый Массив;
	
	Для Каждого Сертификат Из СертификатыХранилища Цикл
		Если Сертификат.ДатаОкончания < ТекущаяДата Тогда
			Продолжить; // Пропуск истекших сертификатов.
		КонецЕсли;
		
		СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
		Если СтруктураСертификата <> Неопределено Тогда
			СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
			
			Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
				МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
				МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТолькоЛичные Тогда
		Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.СертификатыПолучателей);
		СертификатыХранилища = Хранилище.ПолучитьВсе();
		
		Для Каждого Сертификат Из СертификатыХранилища Цикл
			Если Сертификат.ДатаОкончания < ТекущаяДата Тогда
				Продолжить; // Пропуск истекших сертификатов.
			КонецЕсли;
			
			СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
			Если СтруктураСертификата <> Неопределено Тогда
				СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
				
				Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
					МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
					МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивСтруктурСертификатов;
	
КонецФункции

// Сохраняет сертификат в файл на диск.
// 
// Параметры:
//   Сертификат           - СертификатКриптографии - сертификат.
//                        - ДвоичныеДанные - двоичные данные сертификата.
//                        - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//
Процедура СохранитьСертификат(Сертификат, ИмяФайлаБезРасширения = "") Экспорт
	
	Параметры =  Новый Структура;
	Параметры.Вставить("Сертификат", Сертификат);
	Параметры.Вставить("ИмяФайлаБезРасширения", ИмяФайлаБезРасширения);
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(
		Новый ОписаниеОповещения("СохранитьСертификатПослеУстановкиРасширения", ЭтотОбъект, Параметры));
	
КонецПроцедуры

// Продолжение процедуры СохранитьСертификат.
Процедура СохранитьСертификатПослеУстановкиРасширения(РасширениеПодключено, Параметры) Экспорт
	
	Сертификат            = Параметры.Сертификат;
	ИмяФайлаБезРасширения = Параметры.ИмяФайлаБезРасширения;
	
	Если ТипЗнч(Сертификат) = Тип("СертификатКриптографии") Тогда
		АдресСертификата = ПоместитьВоВременноеХранилище(Сертификат.Выгрузить());
		
	ИначеЕсли ТипЗнч(Сертификат) = Тип("ДвоичныеДанные") Тогда
		АдресСертификата = ПоместитьВоВременноеХранилище(Сертификат);
		
	ИначеЕсли ТипЗнч(Сертификат) = Тип("Строка") И ЭтоАдресВременногоХранилища(Сертификат) Тогда
		АдресСертификата = Сертификат;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФайлаБезРасширения) Тогда
		ИмяФайлаБезРасширения = ЭлектроннаяПодписьСлужебныйВызовСервера.ПредставлениеСертификата(АдресСертификата);
	КонецЕсли;
	ИмяФайла = ЭлектроннаяПодписьСлужебныйКлиент.ПодготовитьСтрокуДляИмениФайла(ИмяФайлаБезРасширения) + ".cer";
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		Результат = ПолучитьФайл(АдресСертификата, ИмяФайла);
		Если Результат = Ложь Или Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.Заголовок = НСтр("ru = 'Выберите файл для сохранения сертификата'");
		Диалог.Фильтр    = НСтр("ru = 'Файлы сертификатов (*.cer)|*.cer|Все файлы (*.*)|*.*'");
		Диалог.МножественныйВыбор = Ложь;
		
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресСертификата));
		
		Если Не ПолучитьФайлы(ПолучаемыеФайлы, , Диалог) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Сертификат сохранен в файл.'"));
	
КонецПроцедуры

// Сохраняет запрос на сертификат в файл на диск.
// 
// Параметры:
//   ЗапросНаСертификат    - ДвоичныеДанные - данные запроса на сертификат.
//                         - Строка - адрес временного хранилища, содержащего данные запроса на сертификат.
//   ИмяФайлаБезРасширения - Строка - начальное имя файла без расширения.
//
Процедура СохранитьЗапросНаСертификат(ЗапросНаСертификат, ИмяФайлаБезРасширения = "") Экспорт
	
	Параметры =  Новый Структура;
	Параметры.Вставить("ЗапросНаСертификат", ЗапросНаСертификат);
	Параметры.Вставить("ИмяФайлаБезРасширения", ИмяФайлаБезРасширения);
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(
		Новый ОписаниеОповещения("СохранитьЗапросНаСертификатПослеУстановкиРасширения", ЭтотОбъект, Параметры));
	
КонецПроцедуры

// Продолжение процедуры СохранитьСертификат.
Процедура СохранитьЗапросНаСертификатПослеУстановкиРасширения(РасширениеПодключено, Параметры) Экспорт
	
	ЗапросНаСертификат    = Параметры.ЗапросНаСертификат;
	ИмяФайлаБезРасширения = Параметры.ИмяФайлаБезРасширения;
	
	Если ТипЗнч(ЗапросНаСертификат) = Тип("ДвоичныеДанные") Тогда
		АдресЗапросаНаСертификат = ПоместитьВоВременноеХранилище(ЗапросНаСертификат);
		
	ИначеЕсли ТипЗнч(ЗапросНаСертификат) = Тип("Строка") И ЭтоАдресВременногоХранилища(ЗапросНаСертификат) Тогда
		АдресЗапросаНаСертификат = ЗапросНаСертификат;
	Иначе
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ЭлектроннаяПодписьСлужебныйКлиент.ПодготовитьСтрокуДляИмениФайла(ИмяФайлаБезРасширения + ".p10");
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		Результат = ПолучитьФайл(АдресЗапросаНаСертификат, ИмяФайла);
		Если Результат = Ложь Или Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.Заголовок = НСтр("ru = 'Выберите файл для сохранения запроса на сертификат'");
		Диалог.Фильтр    = НСтр("ru = 'Файлы сертификатов (*.p10)|*.p10|Все файлы (*.*)|*.*'");
		Диалог.МножественныйВыбор = Ложь;
		
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресЗапросаНаСертификат));
		
		Если Не ПолучитьФайлы(ПолучаемыеФайлы, , Диалог) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Запрос на сертификат сохранен в файл.'"));
	
КонецПроцедуры

#КонецОбласти
