&НаКлиенте
Перем ВнутренниеДанные, ОписаниеДанных, ФормаОбъекта, ОбработкаПослеПредупреждения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебный.НастроитьФормуПодписанияШифрованияРасшифровки(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВРег(ИмяСобытия) = ВРег("Запись_СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		ПодключитьОбработчикОжидания("ПриИзмененииСпискаСертификатов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеДанныхНажатие(Элемент, СтандартнаяОбработка)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПредставлениеДанныхНажатие(ЭтотОбъект,
		Элемент, СтандартнаяОбработка, ОписаниеДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатПриИзменении(Элемент)
	
	СертификатПриИзмененииНаСервере(ЭлектроннаяПодписьСлужебныйКлиент.ОтпечаткиСертификатовНаКлиенте());
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектроннаяПодписьКлиент.СертификатНачалоВыбораСПодтверждением(Элемент,
		Сертификат, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Сертификат) Тогда
		ЭлектроннаяПодписьКлиент.ОткрытьСертификат(Сертификат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Сертификат = ВыбранноеЗначение;
	
	СертификатПриИзмененииНаСервере(ЭлектроннаяПодписьСлужебныйКлиент.ОтпечаткиСертификатовНаКлиенте());
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СертификатСписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СертификатСписокВыбора;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификатыШифрования

&НаКлиенте
Процедура СертификатыШифрованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Значение Из ВыбранноеЗначение Цикл
		Отбор = Новый Структура("Сертификат", Значение);
		Строки = СертификатыШифрования.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		СертификатыШифрования.Добавить().Сертификат = Значение;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подобрать(Команда)
	
	ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодборСертификатовДляШифрования",
		, Элементы.СертификатыШифрования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	ТекущиеДанные = Элементы.СертификатыШифрования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.ОткрытьСертификат(ТекущиеДанные.Отпечаток);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗашифроватьДанные() Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПродолжитьОткрытие(ОбщиеВнутренниеДанные, КлиентскиеПараметры) Экспорт
	
	Если Не ЭлектроннаяПодписьСлужебныйКлиент.ПродолжитьОткрытиеНачало(ЭтотОбъект, КлиентскиеПараметры, Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("ПродолжитьОткрытие", ЭтотОбъект);
	
	ВнутренниеДанные = ОбщиеВнутренниеДанные;
	ОписаниеДанных = КлиентскиеПараметры.ОписаниеДанных;
	ФормаОбъекта   = КлиентскиеПараметры.Форма;
	
	Если БезПодтверждения Тогда
		ОбработкаПослеПредупреждения = Неопределено;
		
		Если ЗашифроватьДанные() Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Истина);
			Возврат Истина;
		КонецЕсли;
	Иначе
		Открыть();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьШифрование(КлиентскиеПараметры, ОбработкаЗавершения) Экспорт
	
	ОписаниеДанных = КлиентскиеПараметры.ОписаниеДанных;
	ФормаОбъекта   = КлиентскиеПараметры.Форма;
	
	ОбработкаПослеПредупреждения = ОбработкаЗавершения;
	ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьШифрование", ЭтотОбъект);
	
	Если ЗашифроватьДанные() Тогда
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСпискаСертификатов()
	
	СертификатПриИзмененииНаСервере(ЭлектроннаяПодписьСлужебныйКлиент.ОтпечаткиСертификатовНаКлиенте(), Истина);
	
КонецПроцедуры

&НаСервере
Процедура СертификатПриИзмененииНаСервере(ОтпечаткиСертификатовНаКлиенте, ПроверитьСсылку = Ложь)
	
	Если ПроверитьСсылку
	   И ЗначениеЗаполнено(Сертификат)
	   И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сертификат, "Ссылка") <> Сертификат Тогда
		
		Сертификат = Неопределено;
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебный.СертификатПриИзмененииНаСервере(ЭтотОбъект, ОтпечаткиСертификатовНаКлиенте, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ЗашифроватьДанные()
	
	ОшибкаНаКлиенте = Новый Структура;
	ОшибкаНаСервере = Новый Структура;
	
	Если СертификатДействителенДо < ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
		ОшибкаНаКлиенте.Вставить("ОписаниеОшибки",
			НСтр("ru = 'У выбранного личного сертификата истек срок действия.
			           |Выберите другой сертификат.'"));
		ПоказатьОшибку(ОшибкаНаКлиенте, ОшибкаНаСервере);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СертификатПрограмма) Тогда
		ОшибкаНаКлиенте.Вставить("ОписаниеОшибки",
			НСтр("ru = 'У выбранного личного сертификата не указана программа для закрытого ключа.
			           |Выберите другой сертификат.'"));
		ПоказатьОшибку(ОшибкаНаКлиенте, ОшибкаНаСервере);
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторФормы = УникальныйИдентификатор;
	Если ТипЗнч(ФормаОбъекта) = Тип("УправляемаяФорма") Тогда
		ИдентификаторФормы = ФормаОбъекта.УникальныйИдентификатор;
	ИначеЕсли ТипЗнч(ФормаОбъекта) = Тип("УникальныйИдентификатор") Тогда
		ИдентификаторФормы = ФормаОбъекта;
	КонецЕсли;
	
	Ссылки = Новый Массив;
	Ссылки.Добавить(Сертификат);
	Для каждого Строка Из СертификатыШифрования Цикл
		Если ЗначениеЗаполнено(Строка.Сертификат) И Строка.Сертификат <> Сертификат Тогда
			Ссылки.Добавить(Строка.Сертификат);
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеДанных.Вставить("СертификатыШифрования", СвойстваСертификатов(Ссылки, ИдентификаторФормы));
	
	Успех = Ложь;
	
	Если ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().СоздаватьЭлектронныеПодписиНаСервере Тогда
		Если ЗначениеЗаполнено(СертификатНаСервереОписаниеОшибки) Тогда
			ОшибкаНаСервере = СертификатНаСервереОписаниеОшибки;
			СертификатНаСервереОписаниеОшибки = Новый Структура;
		Иначе
			// Попытка подписания на сервере.
			Успех = ЗашифроватьНаСторонеСервера(ИдентификаторФормы, ОшибкаНаСервере);
		КонецЕсли;
		
		Если Не Успех Тогда
			// Попытка подписания на клиенте.
			Успех = ЗашифроватьНаСторонеКлиента(ИдентификаторФормы, ОшибкаНаКлиенте);
		КонецЕсли;
	Иначе
		// Попытка подписания на клиенте.
		Успех = ЗашифроватьНаСторонеКлиента(ИдентификаторФормы, ОшибкаНаКлиенте, Истина);
	КонецЕсли;
	
	Если Не Успех Тогда
		ПоказатьОшибку(ОшибкаНаКлиенте, ОшибкаНаСервере);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗаписатьСертификатыШифрования(ИдентификаторФормы, ОшибкаНаКлиенте) Тогда
		ПоказатьОшибку(ОшибкаНаКлиенте, ОшибкаНаСервере);
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеДанных)
	   И (Не ОписаниеДанных.Свойство("СообщитьОЗавершении")
	      Или ОписаниеДанных.СообщитьОЗавершении <> Ложь) Тогда
		
		ЭлектроннаяПодписьКлиент.ИнформироватьОШифрованииОбъекта(ПредставлениеДанных,
			ОписаниеДанных.ТекущийСписокПредставлений.Количество() > 1);
	КонецЕсли;
	
	Если ОписаниеДанных.Свойство("КонтекстОперации") Тогда
		ОписаниеДанных.КонтекстОперации = ЭтотОбъект;
	КонецЕсли;
	
	Если ОповеститьОбОкончанииСрокаДействия Тогда
		ПараметрыФормы = Новый Структура("Сертификат", Сертификат);
		ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ОповещениеОбОкончанииСрокаДействия",
			ПараметрыФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗашифроватьНаСторонеКлиента(ИдентификаторФормы, ОшибкаНаКлиенте, ТолькоНаСторонеКлиента = Ложь)
	
	МенеджерКриптографии = ЭлектроннаяПодписьСлужебныйКлиент.МенеджерКриптографии("Шифрование",
		ТолькоНаСторонеКлиента, ОшибкаНаКлиенте, СертификатПрограмма);
		
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СертификатКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(СертификатОтпечаток,
		Истина, СертификатПрограмма, Ложь, ОшибкаНаКлиенте);
	
	Если СертификатКриптографии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Успех = Ложь;
	ОперацияНачалась = Ложь;
	
	Если ОписаниеДанных.Свойство("Данные") Тогда
		Успех = ЗашифроватьЭлементДанныхНаСторонеКлиента(ОписаниеДанных, МенеджерКриптографии,
			ИдентификаторФормы, ОперацияНачалась, ОшибкаНаКлиенте);
	Иначе
		Для каждого ЭлементДанных Из ОписаниеДанных.НаборДанных Цикл
			ОписаниеДанных.Вставить("ТекущийЭлементНабораДанных", ЭлементДанных);
			
			Если ЭлементДанных.Свойство("СвойстваПодписи") Тогда
				Успех = Истина;
				Продолжить;
			КонецЕсли;
			
			Успех = ЗашифроватьЭлементДанныхНаСторонеКлиента(ЭлементДанных, МенеджерКриптографии,
				ИдентификаторФормы, ОперацияНачалась, ОшибкаНаКлиенте);
			
			Если Не Успех Тогда
				Если ОперацияНачалась Тогда
					ЗаблокироватьИзменениеПараметровОперации();
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

&НаКлиенте
Функция ЗашифроватьЭлементДанныхНаСторонеКлиента(ЭлементДанных, МенеджерКриптографии,
			ИдентификаторФормы, ОперацияНачалась, ОшибкаНаКлиенте)
	
	Попытка
		ДанныеДляШифрования = ДанныеИзОписанияДанных(ЭлементДанных.Данные);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОшибкаНаКлиенте.Вставить("ОписаниеОшибки",
			НСтр("ru = 'При получении данных для шифрования возникла ошибка:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат Ложь;
	КонецПопытки;
	
	Сертификаты = СертификатыКриптографии(ОписаниеДанных.СертификатыШифрования);
	
	Попытка
		ДвоичныеЗашифрованныеДанные = МенеджерКриптографии.Зашифровать(ДанныеДляШифрования, Сертификаты);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОшибкаНаКлиенте.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ОшибкаНаКлиенте.Вставить("Инструкция", Истина);
		Возврат Ложь;
	КонецПопытки;
	
	ОписаниеОшибки = "";
	Если ЭлектроннаяПодписьСлужебныйКлиентСервер.ПустыеЗашифрованныеДанные(ДвоичныеЗашифрованныеДанные, ОписаниеОшибки) Тогда
		ОшибкаНаКлиенте.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ОперацияНачалась = Истина;
	
	ЭлементДанных.Вставить("ЗашифрованныеДанные", ДвоичныеЗашифрованныеДанные);
	
	Если ЭлементДанных.Свойство("РазмещениеРезультата") Тогда
		Если ТипЗнч(ЭлементДанных.РазмещениеРезультата) = Тип("ОписаниеОповещения") Тогда
			Попытка
				ВыполнитьОбработкуОповещения(ЭлементДанных.РазмещениеРезультата, ОписаниеДанных);
			Исключение
				ЭлементДанных.Удалить("ЗашифрованныеДанные");
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ОшибкаНаКлиенте.Вставить("ОписаниеОшибки", НСтр("ru = 'При записи зашифрованных данных возникла ошибка:'")
					+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗашифроватьНаСторонеСервера(ИдентификаторФормы, ОшибкаНаСервере)
	
	Успех = Ложь;
	ОперацияНачалась = Ложь;
	
	Если ОписаниеДанных.Свойство("Данные") Тогда
		Успех = ЗашифроватьЭлементДанныхНаСторонеСервера(ОписаниеДанных, ИдентификаторФормы,
			ОперацияНачалась, ОшибкаНаСервере);
	Иначе
		Для каждого ЭлементДанных Из ОписаниеДанных.НаборДанных Цикл
			ОписаниеДанных.Вставить("ТекущийЭлементНабораДанных", ЭлементДанных);
			
			Если ЭлементДанных.Свойство("ЗашифрованныеДанные") Тогда
				Успех = Истина;
				Продолжить;
			КонецЕсли;
			
			Успех = ЗашифроватьЭлементДанныхНаСторонеСервера(ЭлементДанных, ИдентификаторФормы,
				ОперацияНачалась, ОшибкаНаСервере);
			
			Если Не Успех Тогда
				Если ОперацияНачалась Тогда
					ЗаблокироватьИзменениеПараметровОперации();
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

&НаКлиенте
Функция ЗашифроватьЭлементДанныхНаСторонеСервера(ЭлементДанных, ИдентификаторФормы, ОперацияНачалась, ОшибкаНаСервере)
	
	ПараметрыДляСервера = Новый Структура;
	ПараметрыДляСервера.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыДляСервера.Вставить("СертификатПрограмма", СертификатПрограмма);
	ПараметрыДляСервера.Вставить("СертификатОтпечаток", СертификатОтпечаток);
	
	АдресЗашифрованныхДанных = Неопределено;
	ЭлементДанныхДляСервера = Новый Структура;
	ЭлементДанныхДляСервера.Вставить("Данные", ДанныеИзОписанияДанных(ЭлементДанных.Данные, Ложь));
	
	АдресСертификатов = ОписаниеДанных.СертификатыШифрования;
	
	Если Не ЗашифроватьЭлементДанныхНаСервере(ЭлементДанныхДляСервера, ПараметрыДляСервера,
			АдресСертификатов, АдресЗашифрованныхДанных, ОперацияНачалась, ОшибкаНаСервере) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементДанных.Вставить("ЗашифрованныеДанные", АдресЗашифрованныхДанных);
	
	Если ЭлементДанных.Свойство("РазмещениеРезультата") Тогда
		Если ТипЗнч(ЭлементДанных.РазмещениеРезультата) = Тип("ОписаниеОповещения") Тогда
			Попытка
				ВыполнитьОбработкуОповещения(ЭлементДанных.РазмещениеРезультата, ОписаниеДанных);
			Исключение
				ЭлементДанных.Удалить("ЗашифрованныеДанные");
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ОшибкаНаСервере.Вставить("ОписаниеОшибки", НСтр("ru = 'При записи зашифрованных данных возникла ошибка:'")
					+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗашифроватьЭлементДанныхНаСервере(Знач ЭлементДанныхДляСервера, Знач Параметры,
			АдресСертификатов, АдресЗашифрованныхДанных, ОперацияНачалась, ОшибкаНаСервере)
	
	МенеджерКриптографии = ЭлектроннаяПодписьСлужебный.МенеджерКриптографии("Шифрование",
		Ложь, ОшибкаНаСервере, Параметры.СертификатПрограмма);
	
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СертификатКриптографии = ЭлектроннаяПодпись.ПолучитьСертификатПоОтпечатку(
		Параметры.СертификатОтпечаток, Истина, Параметры.СертификатПрограмма, Ложь, ОшибкаНаСервере);
	
	Если СертификатКриптографии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ДанныеДляШифрования = ПолучитьИзВременногоХранилища(ЭлементДанныхДляСервера.Данные);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОшибкаНаСервере.Вставить("ОписаниеОшибки",
			НСтр("ru = 'При получении данных для шифрования возникла ошибка:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат Ложь;
	КонецПопытки;
	
	Сертификаты = СертификатыКриптографии(АдресСертификатов);
	
	Попытка
		ДвоичныеЗашифрованныеДанные = МенеджерКриптографии.Зашифровать(ДанныеДляШифрования, Сертификаты);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОшибкаНаСервере.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ОшибкаНаСервере.Вставить("Инструкция", Истина);
		Возврат Ложь;
	КонецПопытки;
	
	ОписаниеОшибки = "";
	Если ЭлектроннаяПодписьСлужебныйКлиентСервер.ПустыеЗашифрованныеДанные(ДвоичныеЗашифрованныеДанные, ОписаниеОшибки) Тогда
		ОшибкаНаСервере.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ОперацияНачалась = Истина;
	
	АдресЗашифрованныхДанных = ПоместитьВоВременноеХранилище(ДвоичныеЗашифрованныеДанные, Параметры.ИдентификаторФормы);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ДанныеИзОписанияДанных(Знач Данные, ДляСтороныКлиента = Истина)
	
	Если ТипЗнч(Данные) = Тип("ОписаниеОповещения") Тогда
		ОбработкаПолученияДанных = Данные;
		Данные = Неопределено;
		ВыполнитьОбработкуОповещения(ОбработкаПолученияДанных, Данные);
	КонецЕсли;
	
	Если ДляСтороныКлиента Тогда
		// Для стороны клиента требуются двоичные данные или путь к файлу.
		
		Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			Возврат Данные;
		КонецЕсли;
		
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			Если ЭтоАдресВременногоХранилища(Данные) Тогда
				Возврат ПолучитьИзВременногоХранилища(Данные);
			КонецЕсли;
		Иначе // Путь к файлу
			Возврат Данные;
		КонецЕсли;
	Иначе
		// Для стороны сервера требуется адрес двоичных данных во временном хранилище.
		
		Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			Возврат ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
		КонецЕсли;
		
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			Если ЭтоАдресВременногоХранилища(Данные) Тогда
				Возврат Данные;
			КонецЕсли;
		Иначе // Путь к файлу
			Данные = Новый ДвоичныеДанные(Данные);
			Возврат ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


&НаСервереБезКонтекста
Функция СвойстваСертификатов(Знач Ссылки, Знач ИдентификаторФормы)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сертификаты.Ссылка КАК Ссылка,
	|	Сертификаты.Наименование КАК Наименование,
	|	Сертификаты.Программа,
	|	Сертификаты.ДанныеСертификата
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|ГДЕ
	|	Сертификаты.Ссылка В(&Ссылки)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СвойстваСертификатов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеСертификата = Выборка.ДанныеСертификата.Получить();
		Если ТипЗнч(ДанныеСертификата) <> Тип("ДвоичныеДанные") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Данные сертификата ""%1"" не найдены в справочнике'"), Выборка.Наименование);
		КонецЕсли;
		
		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(ДанныеСертификата);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Данные сертификата ""%1"" в справочнике не корректны по причине:
				           |%2'"),
				Выборка.Наименование,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		СвойстваСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(СертификатКриптографии);
		
		Свойства = Новый Структура;
		Свойства.Вставить("Отпечаток",     СвойстваСертификата.Отпечаток);
		Свойства.Вставить("Представление", СвойстваСертификата.КомуВыдан);
		Свойства.Вставить("Сертификат",    ДанныеСертификата);
		
		СвойстваСертификатов.Добавить(Свойства);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(СвойстваСертификатов, ИдентификаторФормы);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СертификатыКриптографии(Знач СвойстваСертификатов)
	
	Если ТипЗнч(СвойстваСертификатов) = Тип("Строка") Тогда
		СвойстваСертификатов = ПолучитьИзВременногоХранилища(СвойстваСертификатов);
	КонецЕсли;
	
	Сертификаты = Новый Массив;
	Для каждого Свойства Из СвойстваСертификатов Цикл
		Сертификаты.Добавить(Новый СертификатКриптографии(Свойства.Сертификат));
	КонецЦикла;
	
	Возврат Сертификаты;
	
КонецФункции


&НаКлиенте
Функция ЗаписатьСертификатыШифрования(ИдентификаторФормы, Ошибка)
	
	ОписаниеОбъектов = Новый Массив;
	Если ОписаниеДанных.Свойство("Данные") Тогда
		ДобавитьОписаниеОбъекта(ОписаниеОбъектов, ОписаниеДанных);
	Иначе
		Для каждого ЭлементДанных Из ОписаниеДанных.НаборДанных Цикл
			ДобавитьОписаниеОбъекта(ОписаниеОбъектов, ОписаниеДанных);
		КонецЦикла;
	КонецЕсли;
	
	АдресСертификатов = ОписаниеДанных.СертификатыШифрования;
	
	Ошибка = Новый Структура;
	ЗаписатьСертификатыШифрованияНаСервере(ОписаниеОбъектов, АдресСертификатов, ИдентификаторФормы, Ошибка);
	
	Возврат Не ЗначениеЗаполнено(Ошибка);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОписаниеОбъекта(ОписаниеОбъектов, ЭлементДанных)
	
	Если Не ЭлементДанных.Свойство("Объект") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияОбъекта = Неопределено;
	ЭлементДанных.Свойство("ВерсияОбъекта", ВерсияОбъекта);
	
	ОписаниеОбъекта = Новый Структура;
	ОписаниеОбъекта.Вставить("Ссылка", ЭлементДанных.Объект);
	ОписаниеОбъекта.Вставить("Версия", ВерсияОбъекта);
	
	ОписаниеОбъектов.Добавить(ОписаниеОбъекта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСертификатыШифрованияНаСервере(ОписаниеОбъектов, АдресСертификатов, ИдентификаторФормы, Ошибка)
	
	СвойстваСертификатов = ПолучитьИзВременногоХранилища(АдресСертификатов);
	
	НачатьТранзакцию();
	Попытка
		Для каждого ОписаниеОбъекта Из ОписаниеОбъектов Цикл
			ЭлектроннаяПодпись.ЗаписатьСертификатыШифрования(ОписаниеОбъекта.Ссылка,
				СвойстваСертификатов, ИдентификаторФормы, ОписаниеОбъекта.Версия);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		Ошибка.Вставить("ОписаниеОшибки", НСтр("ru = 'При записи сертификатов шифрования возникла ошибка:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьОшибку(ОшибкаНаКлиенте, ОшибкаНаСервере)
	
	Если Не Открыта() И ОбработкаПослеПредупреждения = Неопределено Тогда
		Открыть();
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПоказатьОшибкуОбращенияКПрограмме(
		НСтр("ru = 'Не удалось зашифровать данные'"), "",
		ОшибкаНаКлиенте, ОшибкаНаСервере, , ОбработкаПослеПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьИзменениеПараметровОперации()
	
	// После начала шифрования изменять сертификаты более недопустимо,
	// иначе набор данных будет обработан по-разному.
	Элементы.Сертификат.ТолькоПросмотр = Истина;
	Элементы.СертификатыШифрования.ТолькоПросмотр = Истина;
	
КонецПроцедуры

#КонецОбласти
