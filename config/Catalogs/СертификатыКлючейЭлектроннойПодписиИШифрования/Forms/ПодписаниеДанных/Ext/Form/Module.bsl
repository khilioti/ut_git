&НаКлиенте
Перем ВнутренниеДанные, СвойстваПароля, ОписаниеДанных, ФормаОбъекта, ОбработкаПослеПредупреждения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебный.НастроитьФормуПодписанияШифрованияРасшифровки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВнутренниеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВРег(ИмяСобытия) = ВРег("Запись_СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		ПодключитьОбработчикОжидания("ПриИзмененииСпискаСертификатов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеДанныхНажатие(Элемент, СтандартнаяОбработка)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПредставлениеДанныхНажатие(ЭтотОбъект,
		Элемент, СтандартнаяОбработка, ОписаниеДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатПриИзменении(Элемент)
	
	СертификатПриИзмененииНаСервере(ЭлектроннаяПодписьСлужебныйКлиент.ОтпечаткиСертификатовНаКлиенте());
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект, ВнутренниеДанные, СвойстваПароля);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОтборСертификатов.Количество() > 0 Тогда
		ЭлектроннаяПодписьСлужебныйКлиент.НачалоВыбораСертификатаПриУстановленномОтборе(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбранныйСертификат", Сертификат);
	ПараметрыФормы.Вставить("ДляШифрованияИРасшифровки", Ложь);
	ПараметрыФормы.Вставить("ВернутьПароль", Истина);
	
	ЭлектроннаяПодписьСлужебныйКлиент.ВыборСертификатаДляПодписанияИлиРасшифровки(ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Сертификат) Тогда
		ЭлектроннаяПодписьКлиент.ОткрытьСертификат(Сертификат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = Истина Тогда
		Сертификат = ВнутренниеДанные["ВыбранныйСертификат"];
		ВнутренниеДанные.Удалить("ВыбранныйСертификат");
	Иначе
		Сертификат = ВыбранноеЗначение;
	КонецЕсли;
	
	СертификатПриИзмененииНаСервере(ЭлектроннаяПодписьСлужебныйКлиент.ОтпечаткиСертификатовНаКлиенте());
	
	Если ВыбранноеЗначение = Истина
	   И ВнутренниеДанные["ВыбранныйСертификатПароль"] <> Неопределено Тогда
		
		ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
			ВнутренниеДанные, СвойстваПароля,, ВнутренниеДанные["ВыбранныйСертификатПароль"]);
		ВнутренниеДанные.Удалить("ВыбранныйСертификатПароль");
	Иначе
		ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект, ВнутренниеДанные, СвойстваПароля);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СертификатСписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СертификатСписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриИзмененииРеквизитаПароль", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьПарольПриИзменении(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриИзмененииРеквизитаЗапомнитьПароль", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеУстановленногоПароляНажатие(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПояснениеУстановленногоПароляНажатие(ЭтотОбъект, Элемент, СвойстваПароля);
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеУстановленногоПароляРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПояснениеУстановленногоПароляОбработкаНавигационнойСсылки(
		ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка, СвойстваПароля);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подписать(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПодписатьДанные() Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПродолжитьОткрытие(ОбщиеВнутренниеДанные, КлиентскиеПараметры) Экспорт
	
	Если Не ЭлектроннаяПодписьСлужебныйКлиент.ПродолжитьОткрытиеНачало(ЭтотОбъект, КлиентскиеПараметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("ПродолжитьОткрытие", ЭтотОбъект);
	
	ВнутренниеДанные = ОбщиеВнутренниеДанные;
	ОписаниеДанных = КлиентскиеПараметры.ОписаниеДанных;
	ФормаОбъекта   = КлиентскиеПараметры.Форма;
	
	ДополнительныеПараметры = Новый Структура;
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, ДополнительныеПараметры);
	
	Если БезПодтверждения
	   И (    ДополнительныеПараметры.ПарольУказан
	      Или ДополнительныеПараметры.УсиленнаяЗащитаЗакрытогоКлюча) Тогда
		
		ОбработкаПослеПредупреждения = Неопределено;
		
		Если ПодписатьДанные() Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Истина);
			Возврат Истина;
		КонецЕсли;
	Иначе
		Открыть();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПодписание(КлиентскиеПараметры, ОбработкаЗавершения) Экспорт
	
	ОписаниеДанных = КлиентскиеПараметры.ОписаниеДанных;
	ФормаОбъекта   = КлиентскиеПараметры.Форма;
	
	ОбработкаПослеПредупреждения = ОбработкаЗавершения;
	ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьПодписание", ЭтотОбъект);
	
	Если ПодписатьДанные() Тогда
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСпискаСертификатов()
	
	СертификатПриИзмененииНаСервере(ЭлектроннаяПодписьСлужебныйКлиент.ОтпечаткиСертификатовНаКлиенте(), Истина);
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриИзмененииСвойствСертификата", Истина));
	
КонецПроцедуры

&НаСервере
Процедура СертификатПриИзмененииНаСервере(ОтпечаткиСертификатовНаКлиенте, ПроверитьСсылку = Ложь)
	
	Если ПроверитьСсылку
	   И ЗначениеЗаполнено(Сертификат)
	   И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сертификат, "Ссылка") <> Сертификат Тогда
		
		Сертификат = Неопределено;
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебный.СертификатПриИзмененииНаСервере(ЭтотОбъект, ОтпечаткиСертификатовНаКлиенте);
	
КонецПроцедуры

&НаКлиенте
Функция ПодписатьДанные()
	
	ОшибкаНаКлиенте = Новый Структура;
	ОшибкаНаСервере = Новый Структура;
	
	Если СертификатДействителенДо < ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
		ОшибкаНаКлиенте.Вставить("ОписаниеОшибки",
			НСтр("ru = 'У выбранного сертификата истек срок действия.
			           |Выберите другой сертификат.'"));
		ПоказатьОшибку(ОшибкаНаКлиенте, ОшибкаНаСервере);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СертификатПрограмма) Тогда
		ОшибкаНаКлиенте.Вставить("ОписаниеОшибки",
			НСтр("ru = 'У выбранного сертификата не указана программа для закрытого ключа.
			           |Выберите другой сертификат.'"));
		ПоказатьОшибку(ОшибкаНаКлиенте, ОшибкаНаСервере);
		Возврат Ложь;
	КонецЕсли;
	
	ВыбранныйСертификат = Новый Структура;
	ВыбранныйСертификат.Вставить("Ссылка",    Сертификат);
	ВыбранныйСертификат.Вставить("Отпечаток", СертификатОтпечаток);
	ВыбранныйСертификат.Вставить("Данные",    СертификатАдрес);
	ОписаниеДанных.Вставить("ВыбранныйСертификат", ВыбранныйСертификат);
	
	Если ОписаниеДанных.Свойство("ПередВыполнением")
	   И ТипЗнч(ОписаниеДанных.ПередВыполнением) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеДанных.ПередВыполнением, Неопределено);
	КонецЕсли;
	
	ИдентификаторФормы = Неопределено;
	Если ТипЗнч(ФормаОбъекта) = Тип("УправляемаяФорма") Тогда
		ИдентификаторФормы = ФормаОбъекта.УникальныйИдентификатор;
	ИначеЕсли ТипЗнч(ФормаОбъекта) = Тип("УникальныйИдентификатор") Тогда
		ИдентификаторФормы = ФормаОбъекта;
	КонецЕсли;
	
	Успех = Ложь;
	
	Если ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().СоздаватьЭлектронныеПодписиНаСервере Тогда
		Если ЗначениеЗаполнено(СертификатНаСервереОписаниеОшибки) Тогда
			ОшибкаНаСервере = СертификатНаСервереОписаниеОшибки;
			СертификатНаСервереОписаниеОшибки = Новый Структура;
		Иначе
			// Попытка подписания на сервере.
			Успех = ПодписатьНаСторонеСервера(ИдентификаторФормы, ОшибкаНаСервере);
		КонецЕсли;
		
		Если Не Успех Тогда
			// Попытка подписания на клиенте.
			Успех = ПодписатьНаСторонеКлиента(ИдентификаторФормы, ОшибкаНаКлиенте);
		КонецЕсли;
	Иначе
		// Попытка подписания на клиенте.
		Успех = ПодписатьНаСторонеКлиента(ИдентификаторФормы, ОшибкаНаКлиенте, Истина);
	КонецЕсли;
	
	Если Не Успех Тогда
		ПоказатьОшибку(ОшибкаНаКлиенте, ОшибкаНаСервере);
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеДанных)
	   И (Не ОписаниеДанных.Свойство("СообщитьОЗавершении")
	      Или ОписаниеДанных.СообщитьОЗавершении <> Ложь) Тогда
		
		ЭлектроннаяПодписьКлиент.ИнформироватьОПодписанииОбъекта(ПредставлениеДанных,
			ОписаниеДанных.ТекущийСписокПредставлений.Количество() > 1);
	КонецЕсли;
	
	Если ОписаниеДанных.Свойство("КонтекстОперации") Тогда
		ОписаниеДанных.КонтекстОперации = ЭтотОбъект;
	КонецЕсли;
	
	Если ОповеститьОбОкончанииСрокаДействия Тогда
		ПараметрыФормы = Новый Структура("Сертификат", Сертификат);
		ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ОповещениеОбОкончанииСрокаДействия",
			ПараметрыФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПодписатьНаСторонеКлиента(ИдентификаторФормы, ОшибкаНаКлиенте, ТолькоНаСторонеКлиента = Ложь)
	
	МенеджерКриптографии = ЭлектроннаяПодписьСлужебныйКлиент.МенеджерКриптографии("Подписание",
		ТолькоНаСторонеКлиента, ОшибкаНаКлиенте, СертификатПрограмма);
		
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СертификатКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(СертификатОтпечаток,
		Истина, СертификатПрограмма, Ложь, ОшибкаНаКлиенте);
	
	Если СертификатКриптографии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СвойстваСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(СертификатКриптографии);
	СвойстваСертификата.Вставить("ДвоичныеДанные", СертификатКриптографии.Выгрузить());
	
	Успех = Ложь;
	ПарольПринят = Ложь;
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СвойстваПароля.Значение;
	
	Если ОписаниеДанных.Свойство("Данные") Тогда
		Успех = ПодписатьЭлементДанныхНаСторонеКлиента(ОписаниеДанных, МенеджерКриптографии,
			СертификатКриптографии, ИдентификаторФормы, СвойстваСертификата, ПарольПринят, ОшибкаНаКлиенте);
	Иначе
		Для каждого ЭлементДанных Из ОписаниеДанных.НаборДанных Цикл
			ОписаниеДанных.Вставить("ТекущийЭлементНабораДанных", ЭлементДанных);
			
			Если ЭлементДанных.Свойство("СвойстваПодписи") Тогда
				Успех = Истина;
				Продолжить;
			КонецЕсли;
			
			Успех = ПодписатьЭлементДанныхНаСторонеКлиента(ЭлементДанных, МенеджерКриптографии,
				СертификатКриптографии, ИдентификаторФормы, СвойстваСертификата, ПарольПринят, ОшибкаНаКлиенте);
			
			Если Не Успех Тогда
				Если ПарольПринят Тогда
					ЗаблокироватьИзменениеПараметровОперации();
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПарольПринят Тогда
		ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
			ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриУспешномВыполненииОперации", Истина));
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

&НаКлиенте
Функция ПодписатьЭлементДанныхНаСторонеКлиента(ЭлементДанных, МенеджерКриптографии, СертификатКриптографии,
			ИдентификаторФормы, СвойстваСертификата, ПарольПринят, ОшибкаНаКлиенте)
	
	Попытка
		ДанныеДляПодписания = ДанныеИзОписанияДанных(ЭлементДанных.Данные);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОшибкаНаКлиенте.Вставить("ОписаниеОшибки",
			НСтр("ru = 'При получении данных для подписания возникла ошибка:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		ДвоичныеДанныеПодписи = МенеджерКриптографии.Подписать(ДанныеДляПодписания, СертификатКриптографии);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОшибкаНаКлиенте.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ОшибкаНаКлиенте.Вставить("Инструкция", Истина);
		Возврат Ложь;
	КонецПопытки;
	
	ОписаниеОшибки = "";
	Если ЭлектроннаяПодписьСлужебныйКлиентСервер.ПустыеДанныеПодписи(ДвоичныеДанныеПодписи, ОписаниеОшибки) Тогда
		ОшибкаНаКлиенте.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ПарольПринят = Истина;
	
	СвойстваПодписи = СвойстваПодписи(ДвоичныеДанныеПодписи, СвойстваСертификата, Комментарий);
	ЭлементДанных.Вставить("СвойстваПодписи", СвойстваПодписи);
	
	Если ЭлементДанных.Свойство("Объект") Тогда
		Если ТипЗнч(ЭлементДанных.Объект) = Тип("ОписаниеОповещения") Тогда
			Попытка
				ВыполнитьОбработкуОповещения(ЭлементДанных.Объект, ОписаниеДанных);
			Исключение
				ЭлементДанных.Удалить("СвойстваПодписи");
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ОшибкаНаКлиенте.Вставить("ОписаниеОшибки", НСтр("ru = 'При записи подписи возникла ошибка:'")
					+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				Возврат Ложь;
			КонецПопытки;
		Иначе
			ВерсияОбъекта = Неопределено;
			ЭлементДанных.Свойство("ВерсияОбъекта", ВерсияОбъекта);
			Попытка
				ДобавитьПодпись(ЭлементДанных.Объект, СвойстваПодписи, ИдентификаторФормы, ВерсияОбъекта);
			Исключение
				ЭлементДанных.Удалить("СвойстваПодписи");
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ОшибкаНаКлиенте.Вставить("ОписаниеОшибки", НСтр("ru = 'При записи подписи возникла ошибка:'")
					+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				Возврат Ложь;
			КонецПопытки;
			ОповеститьОбИзменении(ЭлементДанных.Объект);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПодписатьНаСторонеСервера(ИдентификаторФормы, ОшибкаНаСервере)
	
	Успех = Ложь;
	ПарольПринят = Ложь;
	
	Если ОписаниеДанных.Свойство("Данные") Тогда
		Успех = ПодписатьЭлементДанныхНаСторонеСервера(ОписаниеДанных, ИдентификаторФормы,
			ПарольПринят, ОшибкаНаСервере);
	Иначе
		Для каждого ЭлементДанных Из ОписаниеДанных.НаборДанных Цикл
			ОписаниеДанных.Вставить("ТекущийЭлементНабораДанных", ЭлементДанных);
			
			Если ЭлементДанных.Свойство("СвойстваПодписи") Тогда
				Успех = Истина;
				Продолжить;
			КонецЕсли;
			
			Успех = ПодписатьЭлементДанныхНаСторонеСервера(ЭлементДанных, ИдентификаторФормы,
				ПарольПринят, ОшибкаНаСервере);
			
			Если Не Успех Тогда
				Если ПарольПринят Тогда
					ЗаблокироватьИзменениеПараметровОперации();
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПарольПринят Тогда
		ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
			ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриУспешномВыполненииОперации", Истина));
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

&НаКлиенте
Функция ПодписатьЭлементДанныхНаСторонеСервера(ЭлементДанных, ИдентификаторФормы, ПарольПринят, ОшибкаНаСервере)
	
	ПараметрыДляСервера = Новый Структура;
	ПараметрыДляСервера.Вставить("Комментарий", Комментарий);
	ПараметрыДляСервера.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыДляСервера.Вставить("СертификатПрограмма", СертификатПрограмма);
	ПараметрыДляСервера.Вставить("СертификатОтпечаток", СертификатОтпечаток);
	
	АдресПодписи = Неопределено;
	ЭлементДанныхДляСервера = Новый Структура;
	ЭлементДанныхДляСервера.Вставить("Данные", ДанныеИзОписанияДанных(ЭлементДанных.Данные, Ложь));
	
	Если ЭлементДанных.Свойство("Объект")
	   И Не ТипЗнч(ЭлементДанных.Объект) = Тип("ОписаниеОповещения") Тогда
		
		ЭлементДанныхДляСервера.Вставить("Объект", ЭлементДанных.Объект);
		
		Если ЭлементДанных.Свойство("ВерсияОбъекта") Тогда
			ЭлементДанныхДляСервера.Свойство("ВерсияОбъекта", ЭлементДанных.ВерсияОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПодписатьЭлементДанныхНаСервере(ЭлементДанныхДляСервера, ПараметрыДляСервера,
			СвойстваПароля.Значение, АдресПодписи, ПарольПринят, ОшибкаНаСервере) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементДанных.Вставить("СвойстваПодписи", АдресПодписи);
	
	Если ЭлементДанных.Свойство("Объект") Тогда
		Если ТипЗнч(ЭлементДанных.Объект) = Тип("ОписаниеОповещения") Тогда
			Попытка
				ВыполнитьОбработкуОповещения(ЭлементДанных.Объект, ОписаниеДанных);
			Исключение
				ЭлементДанных.Удалить("СвойстваПодписи");
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ОшибкаНаСервере.Вставить("ОписаниеОшибки", НСтр("ru = 'При записи подписи возникла ошибка:'")
					+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				Возврат Ложь;
			КонецПопытки;
		Иначе
			ОповеститьОбИзменении(ЭлементДанных.Объект);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодписатьЭлементДанныхНаСервере(Знач ЭлементДанныхДляСервера, Знач Параметры,
			Знач ЗначениеПароля, АдресПодписи, ПарольПринят, ОшибкаНаСервере)
	
	МенеджерКриптографии = ЭлектроннаяПодписьСлужебный.МенеджерКриптографии("Подписание",
		Ложь, ОшибкаНаСервере, Параметры.СертификатПрограмма);
	
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СертификатКриптографии = ЭлектроннаяПодпись.ПолучитьСертификатПоОтпечатку(
		Параметры.СертификатОтпечаток, Истина, Параметры.СертификатПрограмма, Ложь, ОшибкаНаСервере);
	
	Если СертификатКриптографии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ЗначениеПароля;
	Попытка
		ДанныеДляПодписания = ПолучитьИзВременногоХранилища(ЭлементДанныхДляСервера.Данные);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОшибкаНаСервере.Вставить("ОписаниеОшибки",
			НСтр("ru = 'При получении данных для подписания возникла ошибка:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		ДвоичныеДанныеПодписи = МенеджерКриптографии.Подписать(ДанныеДляПодписания, СертификатКриптографии);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОшибкаНаСервере.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ОшибкаНаСервере.Вставить("Инструкция", Истина);
		Возврат Ложь;
	КонецПопытки;
	
	ОписаниеОшибки = "";
	Если ЭлектроннаяПодписьСлужебныйКлиентСервер.ПустыеДанныеПодписи(ДвоичныеДанныеПодписи, ОписаниеОшибки) Тогда
		ОшибкаНаСервере.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ПарольПринят = Истина;
	
	СвойстваСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(СертификатКриптографии);
	СвойстваСертификата.Вставить("ДвоичныеДанные", СертификатКриптографии.Выгрузить());
	
	СвойстваПодписи = СвойстваПодписи(ДвоичныеДанныеПодписи, СвойстваСертификата, Параметры.Комментарий);
	АдресПодписи = ПоместитьВоВременноеХранилище(СвойстваПодписи, Параметры.ИдентификаторФормы);
	
	Если ЭлементДанныхДляСервера.Свойство("Объект") Тогда
		ВерсияОбъекта = Неопределено;
		ЭлементДанныхДляСервера.Свойство("ВерсияОбъекта", ВерсияОбъекта);
		Попытка
			ДобавитьПодпись(ЭлементДанныхДляСервера.Объект, СвойстваПодписи,
				Параметры.ИдентификаторФормы, ВерсияОбъекта);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОшибкаНаСервере.Вставить("ОписаниеОшибки", НСтр("ru = 'При записи подписи возникла ошибка:'")
				+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОшибку(ОшибкаНаКлиенте, ОшибкаНаСервере)
	
	Если Не Открыта() И ОбработкаПослеПредупреждения = Неопределено Тогда
		Открыть();
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПоказатьОшибкуОбращенияКПрограмме(
		НСтр("ru = 'Не удалось подписать данные'"), "",
		ОшибкаНаКлиенте, ОшибкаНаСервере, , ОбработкаПослеПредупреждения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваПодписи(ДвоичныеДанныеПодписи, СвойстваСертификата, Комментарий)
	
	СвойстваПодписи = Новый Структура;
	СвойстваПодписи.Вставить("Подпись",             ДвоичныеДанныеПодписи);
	СвойстваПодписи.Вставить("УстановившийПодпись", ПользователиКлиентСервер.АвторизованныйПользователь());
	СвойстваПодписи.Вставить("Комментарий",         Комментарий);
	СвойстваПодписи.Вставить("ИмяФайлаПодписи",     "");
	СвойстваПодписи.Вставить("ДатаПодписи",         Дата('00010101')); // Устанавливается перед записью.
	// Производные свойства:
	СвойстваПодписи.Вставить("Сертификат",          СвойстваСертификата.ДвоичныеДанные);
	СвойстваПодписи.Вставить("Отпечаток",           СвойстваСертификата.Отпечаток);
	СвойстваПодписи.Вставить("КомуВыданСертификат", СвойстваСертификата.КомуВыдан);
	
	Возврат СвойстваПодписи;
	
КонецФункции

&НаКлиенте
Функция ДанныеИзОписанияДанных(Знач Данные, ДляСтороныКлиента = Истина)
	
	Если ТипЗнч(Данные) = Тип("ОписаниеОповещения") Тогда
		ОбработкаПолученияДанных = Данные;
		Данные = Неопределено;
		ВыполнитьОбработкуОповещения(ОбработкаПолученияДанных, Данные);
	КонецЕсли;
	
	Если ДляСтороныКлиента Тогда
		// Для стороны клиента требуются двоичные данные или путь к файлу.
		
		Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			Возврат Данные;
		КонецЕсли;
		
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			Если ЭтоАдресВременногоХранилища(Данные) Тогда
				Возврат ПолучитьИзВременногоХранилища(Данные);
			КонецЕсли;
		Иначе // Путь к файлу
			Возврат Данные;
		КонецЕсли;
	Иначе
		// Для стороны сервера требуется адрес двоичных данных во временном хранилище.
		
		Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			Возврат ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
		КонецЕсли;
		
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			Если ЭтоАдресВременногоХранилища(Данные) Тогда
				Возврат Данные;
			КонецЕсли;
		Иначе // Путь к файлу
			Данные = Новый ДвоичныеДанные(Данные);
			Возврат ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьПодпись(СсылкаНаОбъект, СвойстваПодписи, ИдентификаторФормы, ВерсияОбъекта)
	
	ЭлектроннаяПодпись.ДобавитьПодпись(СсылкаНаОбъект, СвойстваПодписи, ИдентификаторФормы, ВерсияОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьИзменениеПараметровОперации()
	
	// После начала подписания изменять сертификат более недопустимо,
	// иначе набор данных будет обработан по-разному.
	Элементы.Сертификат.ТолькоПросмотр = Истина;
	Элементы.Комментарий.ТолькоПросмотр = Истина;
	
КонецПроцедуры

#КонецОбласти
