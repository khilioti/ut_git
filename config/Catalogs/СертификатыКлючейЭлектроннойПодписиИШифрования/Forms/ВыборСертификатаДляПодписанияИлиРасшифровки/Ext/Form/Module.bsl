&НаКлиенте
Перем ВнутренниеДанные, СвойстваПароля;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.ДобавлениеВСписок Тогда
		ДобавлениеВСписок = Истина;
		Элементы.Выбрать.Заголовок = НСтр("ru = 'Добавить'");
		
		Элементы.ПояснениеУсиленногоПароля.Заголовок =
			НСтр("ru = 'Нажмите Добавить, чтобы перейти к вводу пароля.'");
		
		ЛичныйСписокПриДобавлении = Параметры.ЛичныйСписокПриДобавлении;
		Элементы.ПоказатьВсе.Подсказка =
			НСтр("ru = 'Показать все сертификаты (включая добавленные и просроченные)'");
	КонецЕсли;
	
	ДляШифрованияИРасшифровки = Параметры.ДляШифрованияИРасшифровки;
	ВернутьПароль = Параметры.ВернутьПароль;
	
	Если ДляШифрованияИРасшифровки = Истина Тогда
		Если Параметры.ДобавлениеВСписок Тогда
			Заголовок = НСтр("ru = 'Добавление сертификата для шифрования и расшифровки данных'");
		Иначе
			Заголовок = НСтр("ru = 'Выбор сертификата для шифрования и расшифровки данных'");
		КонецЕсли;
	ИначеЕсли ДляШифрованияИРасшифровки = Ложь Тогда
		Если Параметры.ДобавлениеВСписок Тогда
			Заголовок = НСтр("ru = 'Добавление сертификата для подписания данных'");
		КонецЕсли;
	ИначеЕсли ЭлектроннаяПодпись.ИспользоватьШифрование() Тогда
		Заголовок = НСтр("ru = 'Добавление сертификата для подписания и шифрования данных'");
	Иначе
		Заголовок = НСтр("ru = 'Добавление сертификата для подписания данных'");
	КонецЕсли;
	
	СоздаватьЭлектронныеПодписиНаСервере = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки(
		).СоздаватьЭлектронныеПодписиНаСервере;
	
	Если СоздаватьЭлектронныеПодписиНаСервере Тогда
		Элементы.ГруппаСертификаты.Заголовок =
			НСтр("ru = 'Личные сертификаты на компьютере и сервере'");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Организации") Тогда
		МодульОрганизацииСлужебный = ОбщегоНазначения.ОбщийМодуль("ОрганизацииСлужебный");
		Элементы.СертификатОрганизация.Видимость =
			Не ЗначениеЗаполнено(МодульОрганизацииСлужебный.ОрганизацияПоУмолчанию())
			Или МодульОрганизацииСлужебный.ИспользуетсяНесколькоОрганизация();
	КонецЕсли;
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Организации") Тогда
		Элементы.СертификатОрганизация.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СертификатПользователь.Подсказка =
		Метаданные.Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.Реквизиты.Пользователь.Подсказка;
	
	Элементы.СертификатОрганизация.Подсказка =
		Метаданные.Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.Реквизиты.Организация.Подсказка;
	
	
	Если ЗначениеЗаполнено(Параметры.ОтпечатокВыбранногоСертификата) Тогда
		ОтпечатокВыбранногоСертификатаНеНайден = Ложь;
		ОтпечатокВыбранногоСертификата = Параметры.ОтпечатокВыбранногоСертификата;
	Иначе
		ОтпечатокВыбранногоСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Параметры.ВыбранныйСертификат, "Отпечаток");
	КонецЕсли;
	
	ОшибкаПолученияСертификатовНаКлиенте = Параметры.ОшибкаПолученияСертификатовНаКлиенте;
	ОбновитьСписокСертификатовНаСервере(Параметры.СвойстваСертификатовНаКлиенте);
	
	Если ЗначениеЗаполнено(Параметры.ОтпечатокВыбранногоСертификата)
	   И Параметры.ОтпечатокВыбранногоСертификата <> ОтпечатокВыбранногоСертификата Тогда
		
		ОтпечатокВыбранногоСертификатаНеНайден = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОтпечатокВыбранногоСертификатаНеНайден = Истина
	 Или ОтпечатокВыбранногоСертификатаНеНайден = Ложь
	   И Не ПерейтиКВыборуТекущегоСертификата() Тогда
		
		Отказ = Истина;
		ОповеститьОВыборе(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВРег(ИмяСобытия) = ВРег("Запись_ПрограммыЭлектроннойПодписиИШифрования")
	 Или ВРег(ИмяСобытия) = ВРег("Запись_ПутиКПрограммамЭлектроннойПодписиИШифрованияНаСерверахLinux") Тогда
		
		ОбновитьПовторноИспользуемыеЗначения();
		ОбновитьСписокСертификатов();
	КонецЕсли;
	
	Если ВРег(ИмяСобытия) = ВРег("Запись_СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		ОбновитьСписокСертификатов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка уникальности наименования.
	ЭлектроннаяПодписьСлужебный.ПроверитьУникальностьПредставления(
		СертификатНаименование, Сертификат, "СертификатНаименование", Отказ);
		
	// Проверка заполнения организации.
	Если Элементы.СертификатОрганизация.Видимость
	   И Не Элементы.СертификатОрганизация.ТолькоПросмотр
	   И Элементы.СертификатОрганизация.АвтоОтметкаНезаполненного = Истина
	   И Не ЗначениеЗаполнено(СертификатОрганизация) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле Организация не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СертификатОрганизация",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СертификатыНедоступныНаКлиентеНадписьНажатие(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПоказатьОшибкуОбращенияКПрограмме(
		НСтр("ru = 'Сертификаты на компьютере'"), "", ОшибкаПолученияСертификатовНаКлиенте, Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыНедоступныНаСервереНадписьНажатие(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПоказатьОшибкуОбращенияКПрограмме(
		НСтр("ru = 'Сертификаты на сервере'"), "", ОшибкаПолученияСертификатовНаСервере, Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеПриИзменении(Элемент)
	
	ОбновитьСписокСертификатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияНажатие(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОткрытьИнструкциюПоРаботеСПрограммами();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатУсиленнаяЗащитаЗакрытогоКлючаПриИзменении(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриИзмененииСвойствСертификата", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриИзмененииРеквизитаПароль", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьПарольПриИзменении(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриИзмененииРеквизитаЗапомнитьПароль", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеУстановленногоПароляНажатие(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПояснениеУстановленногоПароляНажатие(ЭтотОбъект, Элемент, СвойстваПароля);
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеУстановленногоПароляРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПояснениеУстановленногоПароляОбработкаНавигационнойСсылки(
		ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка, СвойстваПароля);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификаты

&НаКлиенте
Процедура СертификатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Далее(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Сертификаты.ТекущиеДанные = Неопределено Тогда
		ОтпечатокВыбранногоСертификата = "";
	Иначе
		ОтпечатокВыбранногоСертификата = Элементы.Сертификаты.ТекущиеДанные.Отпечаток;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписокСертификатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДанныеТекущегоСертификата(Команда)
	
	ТекущиеДанные = Элементы.Сертификаты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.ОткрытьСертификат(ТекущиеДанные.Отпечаток, Не ТекущиеДанные.ЭтоЗаявление);
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ОписаниеОшибки = "";
	ОбновитьСписокСертификатов = Ложь;
	
	Если ПерейтиКВыборуТекущегоСертификата(ОписаниеОшибки, ОбновитьСписокСертификатов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновитьСписокСертификатов Тогда
		ОбновитьСписокСертификатов();
	КонецЕсли;
	
	ПоказатьПредупреждение(, ОписаниеОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Элементы.ГлавныеСтраницы.ТекущаяСтраница = Элементы.СтраницаВыборСертификата;
	Элементы.Далее.КнопкаПоУмолчанию = Истина;
	
	ОбновитьСписокСертификатов();
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОшибкаНаСервере = Новый Структура;
	ОшибкаНаКлиенте = Новый Структура;
	СертификатЗаписан = Ложь;
	Программа = Неопределено;
	
	Если СертификатНаСервере Тогда
		
		Если ПроверитьСертификатИЗаписатьВСправочник(СвойстваПароля.Значение, ОшибкаНаСервере) Тогда
			СертификатЗаписан = Истина;
			
		ИначеЕсли ПроверитьСертификат(Программа, ОшибкаНаКлиенте) Тогда
			
			ЗаписатьСертификатВСправочник(Программа);
			СертификатЗаписан = Истина;
		КонецЕсли;
	Иначе
		Если ПроверитьСертификат(Программа, ОшибкаНаКлиенте) Тогда
			ЗаписатьСертификатВСправочник(Программа);
			СертификатЗаписан = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не СертификатЗаписан Тогда
		Если ДляШифрованияИРасшифровки = Истина Тогда
			ЗаголовокФормы = НСтр("ru = 'Проверка шифрования и расшифровки'");
		Иначе
			ЗаголовокФормы = НСтр("ru = 'Проверка установки электронной подписи'");
		КонецЕсли;
		ЭлектроннаяПодписьСлужебныйКлиент.ПоказатьОшибкуОбращенияКПрограмме(
			ЗаголовокФормы, "", ОшибкаНаКлиенте, ОшибкаНаСервере);
		
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриУспешномВыполненииОперации", Истина));
	
	ОповеститьОбИзменении(Сертификат);
	
	Если ВернутьПароль Тогда
		ВнутренниеДанные.Вставить("ВыбранныйСертификат", Сертификат);
		Если Не ЗапомнитьПароль Тогда
			ВнутренниеДанные.Вставить("ВыбранныйСертификатПароль", СвойстваПароля.Значение);
		КонецЕсли;
		ОповеститьОВыборе(Истина);
	Иначе
		ОповеститьОВыборе(Сертификат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДанныеСертификата(Команда)
	
	Если ЗначениеЗаполнено(СертификатАдрес) Тогда
		ЭлектроннаяПодписьКлиент.ОткрытьСертификат(СертификатАдрес, Истина);
	Иначе
		ЭлектроннаяПодписьКлиент.ОткрытьСертификат(СертификатОтпечаток, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПродолжитьОткрытие(ОбщиеВнутренниеДанные) Экспорт
	
	ВнутренниеДанные = ОбщиеВнутренниеДанные;
	ОбработкаПродолжения = Новый ОписаниеОповещения("ПродолжитьОткрытие", ЭтотОбъект);
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект, ВнутренниеДанные, СвойстваПароля);
	
	Если Не Открыта() Тогда
		Открыть();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСвойстваТекущегоСертификатаНаСервере(Знач Отпечаток, СохраненныеСвойства);
	
	СертификатКриптографии = ЭлектроннаяПодпись.ПолучитьСертификатПоОтпечатку(Отпечаток, Ложь);
	Если СертификатКриптографии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СертификатАдрес = ПоместитьВоВременноеХранилище(СертификатКриптографии.Выгрузить(),
		УникальныйИдентификатор);
	
	СертификатОтпечаток = Отпечаток;
	
	ЭлектроннаяПодписьКлиентСервер.ЗаполнитьОписаниеДанныхСертификата(СертификатОписаниеДанных,
		СертификатКриптографии);
	
	СохраненныеСвойства = СохраненныеСвойстваСертификата(Отпечаток,
		СертификатАдрес, СертификатПараметрыРеквизитов);
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохраненныеСвойстваСертификата(Знач Отпечаток, Знач Адрес, ПараметрыРеквизитов)
	
	Возврат ЭлектроннаяПодписьСлужебный.СохраненныеСвойстваСертификата(Отпечаток, Адрес, ПараметрыРеквизитов);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокСертификатов()
	
	СвойстваСертификатовНаКлиенте = Новый Массив;
	ОшибкаПолученияСертификатовНаКлиенте = Новый Структура;
	
	МенеджерКриптографии = ЭлектроннаяПодписьСлужебныйКлиент.МенеджерКриптографии("ПолучениеСертификатов",
		Ложь, ОшибкаПолученияСертификатовНаКлиенте);
	
	ЭлектроннаяПодписьСлужебныйКлиентСервер.ДобавитьСвойстваСертификатовИзХранилища(
		СвойстваСертификатовНаКлиенте, МенеджерКриптографии, Истина, ПоказатьВсе);
	
	ОбновитьСписокСертификатовНаСервере(СвойстваСертификатовНаКлиенте);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСертификатовНаСервере(Знач СвойстваСертификатовНаКлиенте)
	
	ОшибкаПолученияСертификатовНаСервере = Новый Структура;
	
	ЭлектроннаяПодписьСлужебный.ОбновитьСписокСертификатов(Сертификаты, СвойстваСертификатовНаКлиенте,
		ДобавлениеВСписок, Истина, ОшибкаПолученияСертификатовНаСервере, ПоказатьВсе);
	
	Если ЗначениеЗаполнено(ОтпечатокВыбранногоСертификата)
	   И (    Элементы.Сертификаты.ТекущаяСтрока = Неопределено
	      Или Сертификаты.НайтиПоИдентификатору(Элементы.Сертификаты.ТекущаяСтрока) = Неопределено
	      Или Сертификаты.НайтиПоИдентификатору(Элементы.Сертификаты.ТекущаяСтрока).Отпечаток
	              <> ОтпечатокВыбранногоСертификата) Тогда
		
		Отбор = Новый Структура("Отпечаток", ОтпечатокВыбранногоСертификата);
		Строки = Сертификаты.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			Элементы.Сертификаты.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаСертификатыНедоступныНаКлиенте.Видимость =
		ЗначениеЗаполнено(ОшибкаПолученияСертификатовНаКлиенте);
	
	Элементы.ГруппаСертификатыНедоступныНаСервере.Видимость =
		ЗначениеЗаполнено(ОшибкаПолученияСертификатовНаСервере);
	
	Если Элементы.Сертификаты.ТекущаяСтрока = Неопределено Тогда
		ОтпечатокВыбранногоСертификата = "";
	Иначе
		Строка = Сертификаты.НайтиПоИдентификатору(Элементы.Сертификаты.ТекущаяСтрока);
		ОтпечатокВыбранногоСертификата = ?(Строка = Неопределено, "", Строка.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПерейтиКВыборуТекущегоСертификата(ОписаниеОшибки = "", ОбновитьСписокСертификатов = Ложь)
	
	Если Элементы.Сертификаты.ТекущиеДанные = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Выделите сертификат, который будет использоваться.'");
		Возврат Ложь;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Сертификаты.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоЗаявление Тогда
		ОбновитьСписокСертификатов = Истина;
		ОписаниеОшибки = НСтр("ru = 'Для этого сертификата заявление на выпуск еще не исполнено.
		                            |Откройте заявление на выпуск сертификата и выполните требуемые шаги.'");
		Возврат Ложь;
	КонецЕсли;
	
	СертификатНаКлиенте = ТекущиеДанные.НаКлиенте;
	СертификатНаСервере = ТекущиеДанные.НаСервере;
	
	СохраненныеСвойства = Неопределено;
	
	Если СертификатНаСервере Тогда
		Если Не ЗаполнитьСвойстваТекущегоСертификатаНаСервере(ТекущиеДанные.Отпечаток, СохраненныеСвойства) Тогда
			ОписаниеОшибки = НСтр("ru = 'Сертификат удален на сервере.'");
			ОбновитьСписокСертификатов = Истина;
			Возврат Ложь;
		КонецЕсли;
	Иначе // СертификатНаКлиенте
		СертификатКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ТекущиеДанные.Отпечаток, Ложь);
		Если СертификатКриптографии = Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Сертификат удален на компьютере.'");
			ОбновитьСписокСертификатов = Истина;
			Возврат Ложь;
		КонецЕсли;
		
		СертификатАдрес = ПоместитьВоВременноеХранилище(СертификатКриптографии.Выгрузить(),
			УникальныйИдентификатор);
		
		СертификатОтпечаток = ТекущиеДанные.Отпечаток;
		
		ЭлектроннаяПодписьКлиентСервер.ЗаполнитьОписаниеДанныхСертификата(СертификатОписаниеДанных,
			СертификатКриптографии);
		
		СохраненныеСвойства = СохраненныеСвойстваСертификата(ТекущиеДанные.Отпечаток,
			СертификатАдрес, СертификатПараметрыРеквизитов);
	КонецЕсли;
	
	Если СертификатПараметрыРеквизитов.Свойство("Наименование") Тогда
		Если СертификатПараметрыРеквизитов.Наименование.ТолькоПросмотр Тогда
			Элементы.СертификатНаименование.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Организации") Тогда
		Если СертификатПараметрыРеквизитов.Свойство("Организация") Тогда
			Если Не СертификатПараметрыРеквизитов.Организация.Видимость Тогда
				Элементы.СертификатОрганизация.Видимость = Ложь;
			ИначеЕсли СертификатПараметрыРеквизитов.Организация.ТолькоПросмотр Тогда
				Элементы.СертификатОрганизация.ТолькоПросмотр = Истина;
			ИначеЕсли СертификатПараметрыРеквизитов.Организация.ПроверкаЗаполнения Тогда
				Элементы.СертификатОрганизация.АвтоОтметкаНезаполненного = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СертификатПараметрыРеквизитов.Свойство("УсиленнаяЗащитаЗакрытогоКлюча") Тогда
		Если Не СертификатПараметрыРеквизитов.УсиленнаяЗащитаЗакрытогоКлюча.Видимость Тогда
			Элементы.СертификатУсиленнаяЗащитаЗакрытогоКлюча.Видимость = Ложь;
		ИначеЕсли СертификатПараметрыРеквизитов.УсиленнаяЗащитаЗакрытогоКлюча.ТолькоПросмотр Тогда
			Элементы.СертификатУсиленнаяЗащитаЗакрытогоКлюча.ТолькоПросмотр = Истина
		КонецЕсли;
	КонецЕсли;
	
	Сертификат             = СохраненныеСвойства.Ссылка;
	СертификатПользователь = СохраненныеСвойства.Пользователь;
	СертификатОрганизация  = СохраненныеСвойства.Организация;
	СертификатНаименование = СохраненныеСвойства.Наименование;
	СертификатУсиленнаяЗащитаЗакрытогоКлюча = СохраненныеСвойства.УсиленнаяЗащитаЗакрытогоКлюча;
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект, ВнутренниеДанные, СвойстваПароля);
	
	Элементы.ГлавныеСтраницы.ТекущаяСтраница = Элементы.СтраницаУточнениеСвойствСертификата;
	Элементы.Выбрать.КнопкаПоУмолчанию = Истина;
	
	Если ДобавлениеВСписок Тогда
		Строка = ?(ЗначениеЗаполнено(Сертификат), НСтр("ru = 'Обновить'"), НСтр("ru = 'Добавить'"));
		Если Элементы.Выбрать.Заголовок <> Строка Тогда
			Элементы.Выбрать.Заголовок = Строка;
		КонецЕсли;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияАктивизироватьЭлементПароль", 0.1, Истина);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОжиданияАктивизироватьЭлементПароль()
	
	ТекущийЭлемент = Элементы.Пароль;
	
КонецПроцедуры


&НаКлиенте
Функция ПроверитьСертификат(Программа, ОшибкаНаКлиенте)
	
	Если ДляШифрованияИРасшифровки = Истина Тогда
		Успех = ПроверитьШифрованиеИРасшифровку(ЭтотОбъект, Программа, СвойстваПароля.Значение, ОшибкаНаКлиенте,
			ЭлектроннаяПодписьСлужебныйКлиент);
	Иначе
		Успех = ПроверитьПодписание(ЭтотОбъект, Программа, СвойстваПароля.Значение, ОшибкаНаКлиенте,
			ЭлектроннаяПодписьСлужебныйКлиент);
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

&НаСервере
Функция ПроверитьСертификатИЗаписатьВСправочник(Знач ЗначениеПароля, ОшибкаНаСервере)
	
	Программа = Неопределено;
	
	Если ДляШифрованияИРасшифровки = Истина Тогда
		Успех = ПроверитьШифрованиеИРасшифровку(ЭтотОбъект, Программа, ЗначениеПароля, ОшибкаНаСервере,
			ЭлектроннаяПодписьСлужебный);
	Иначе
		Успех = ПроверитьПодписание(ЭтотОбъект, Программа, ЗначениеПароля, ОшибкаНаСервере,
			ЭлектроннаяПодписьСлужебный);
	КонецЕсли;
	
	Если Успех Тогда
		ЗаписатьСертификатВСправочник(Программа);
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьШифрованиеИРасшифровку(Форма, Программа, ЗначениеПароля, Ошибка, Модуль)
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("ЗаголовокОшибки", НСтр("ru = 'Не удалось пройти проверку шифрования по причине:'"));
	Если Модуль.МенеджерКриптографии("", Ложь, Ошибка) = Неопределено И Ошибка.Общая Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(Форма.СертификатАдрес);
	СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("ОписаниеОшибки", "");
	Ошибка.Вставить("Ошибки", Новый Массив);
	
	ОписаниеОшибки = "";
	
	ОписанияПрограмм = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ОписанияПрограмм;
	Для каждого ОписаниеПрограммы Из ОписанияПрограмм Цикл
		ОшибкаМенеджера = Новый Структура;
		МенеджерКриптографии = Модуль.МенеджерКриптографии("", Ложь, ОшибкаМенеджера, ОписаниеПрограммы.Ссылка);
		Если МенеджерКриптографии = Неопределено Тогда
			Если ОшибкаМенеджера.Ошибки.Количество() > 0 Тогда
				Ошибка.Ошибки.Добавить(ОшибкаМенеджера.Ошибки[0]);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ПредставлениеОшибки = "";
		Попытка
			ЗашифрованныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанныеСертификата, СертификатКриптографии);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		Если ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
			ТекущаяОшибка = Новый Структура;
			ТекущаяОшибка.Вставить("Описание", ПредставлениеОшибки);
			ТекущаяОшибка.Вставить("Инструкция", Истина);
			ТекущаяОшибка.Вставить("НастройкаПрограмм", Истина);
			Ошибка.Ошибки.Добавить(ТекущаяОшибка);
			ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось пройти проверку шифрования с помощью программы %1 по причине:
					           |%2'"),
					ОписаниеПрограммы.Наименование,
					ПредставлениеОшибки);
			Продолжить;
		КонецЕсли;
		
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ЗначениеПароля;
		ПредставлениеОшибки = "";
		Попытка
			РасшифрованныеДанные = МенеджерКриптографии.Расшифровать(ЗашифрованныеДанные);
			ЭлектроннаяПодписьСлужебныйКлиентСервер.ПустыеРасшифрованныеДанные(РасшифрованныеДанные, ПредставлениеОшибки);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		Если ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
			ТекущаяОшибка = Новый Структура;
			ТекущаяОшибка.Вставить("Описание", ПредставлениеОшибки);
			ТекущаяОшибка.Вставить("Инструкция", Истина);
			Ошибка.Ошибки.Добавить(ТекущаяОшибка);
			ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось пройти проверку расшифровки с помощью программы %1 по причине:
					           |%2'"),
					ОписаниеПрограммы.Наименование,
					ПредставлениеОшибки);
			Продолжить;
		КонецЕсли;
		
		Программа = ОписаниеПрограммы.Ссылка;
		Возврат Истина;
	КонецЦикла;
	
	Ошибка.Вставить("ОписаниеОшибки", СокрЛП(ОписаниеОшибки));
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьПодписание(Форма, Программа, ЗначениеПароля, Ошибка, Модуль)
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("ЗаголовокОшибки", НСтр("ru = 'Не удалось пройти проверку подписания по причине:'"));
	Если Модуль.МенеджерКриптографии("", Ложь, Ошибка) = Неопределено И Ошибка.Общая Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(Форма.СертификатАдрес);
	СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("ОписаниеОшибки", "");
	Ошибка.Вставить("Ошибки", Новый Массив);
	
	ОписаниеОшибки = "";
	
	ОписанияПрограмм = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ОписанияПрограмм;
	Для каждого ОписаниеПрограммы Из ОписанияПрограмм Цикл
		ОшибкаМенеджера = Новый Структура;
		МенеджерКриптографии = Модуль.МенеджерКриптографии("", Ложь, ОшибкаМенеджера, ОписаниеПрограммы.Ссылка);
		Если МенеджерКриптографии = Неопределено Тогда
			Если ОшибкаМенеджера.Ошибки.Количество() > 0 Тогда
				Ошибка.Ошибки.Добавить(ОшибкаМенеджера.Ошибки[0]);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ЗначениеПароля;
		ПредставлениеОшибки = "";
		ТекущаяОшибка = Новый Структура;
		Попытка
			ДанныеПодписи = МенеджерКриптографии.Подписать(ДвоичныеДанныеСертификата, СертификатКриптографии);
			ЭлектроннаяПодписьСлужебныйКлиентСервер.ПустыеДанныеПодписи(ДанныеПодписи, ПредставлениеОшибки);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекущаяОшибка.Вставить("Инструкция", Истина);
			Ошибка.Ошибки.Добавить(ТекущаяОшибка);
		КонецПопытки;
		Если ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
			ТекущаяОшибка.Вставить("Описание", ПредставлениеОшибки);
			Ошибка.Ошибки.Добавить(ТекущаяОшибка);
			ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось пройти проверку подписания с помощью программы %1 по причине:
					           |%2'"),
					ОписаниеПрограммы.Наименование,
					ПредставлениеОшибки);
			Продолжить;
		КонецЕсли;
		Программа = ОписаниеПрограммы.Ссылка;
		Возврат Истина;
	КонецЦикла;
	
	Ошибка.Вставить("ОписаниеОшибки", СокрЛП(ОписаниеОшибки));
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаписатьСертификатВСправочник(Программа)
	
	ЭлектроннаяПодписьСлужебный.ЗаписатьСертификатВСправочник(ЭтотОбъект, Программа);
	
КонецПроцедуры

#КонецОбласти
