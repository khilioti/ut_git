&НаКлиенте
Перем ВнутренниеДанные, СвойстваПароля, ОписаниеДанных, ФормаОбъекта, ОбработкаПослеПредупреждения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебный.НастроитьФормуПодписанияШифрованияРасшифровки(ЭтотОбъект, , Истина);
	
	РазрешитьЗапоминатьПароль = Параметры.РазрешитьЗапоминатьПароль;
	ЭтоАутентификация = Параметры.ЭтоАутентификация;
	
	Если ЭтоАутентификация Тогда
		Элементы.ФормаРасшифровать.Заголовок = НСтр("ru = 'ОК'");
		Элементы.ПояснениеУсиленногоПароля.Заголовок = НСтр("ru = 'Нажмите ОК, чтобы перейти к вводу пароля.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВнутренниеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВРег(ИмяСобытия) = ВРег("Запись_СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		ПодключитьОбработчикОжидания("ПриИзмененииСпискаСертификатов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеДанныхНажатие(Элемент, СтандартнаяОбработка)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПредставлениеДанныхНажатие(ЭтотОбъект,
		Элемент, СтандартнаяОбработка, ОписаниеДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатПриИзменении(Элемент)
	
	СертификатПриИзмененииНаСервере(ЭлектроннаяПодписьСлужебныйКлиент.ОтпечаткиСертификатовНаКлиенте());
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект, ВнутренниеДанные, СвойстваПароля);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОтборСертификатов.Количество() > 0 Тогда
		ЭлектроннаяПодписьСлужебныйКлиент.НачалоВыбораСертификатаПриУстановленномОтборе(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбранныйСертификат", Сертификат);
	ПараметрыФормы.Вставить("ДляШифрованияИРасшифровки", Истина);
	ПараметрыФормы.Вставить("ВернутьПароль", Истина);
	
	ЭлектроннаяПодписьСлужебныйКлиент.ВыборСертификатаДляПодписанияИлиРасшифровки(ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Сертификат) Тогда
		ЭлектроннаяПодписьКлиент.ОткрытьСертификат(Сертификат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = Истина Тогда
		Сертификат = ВнутренниеДанные["ВыбранныйСертификат"];
		ВнутренниеДанные.Удалить("ВыбранныйСертификат");
		
	ИначеЕсли ВыбранноеЗначение = Ложь Тогда
		Сертификат = Неопределено;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОтпечатокВыбранногоСертификата", ВыбранноеЗначение);
		ПараметрыФормы.Вставить("ДляШифрованияИРасшифровки", Истина);
		ПараметрыФормы.Вставить("ВернутьПароль", Истина);
		
		ЭлектроннаяПодписьСлужебныйКлиент.ВыборСертификатаДляПодписанияИлиРасшифровки(ПараметрыФормы, Элемент);
		Возврат;
	Иначе
		Сертификат = ВыбранноеЗначение;
	КонецЕсли;
	
	СертификатПриИзмененииНаСервере(ЭлектроннаяПодписьСлужебныйКлиент.ОтпечаткиСертификатовНаКлиенте());
	
	Если ВыбранноеЗначение = Истина
	   И ВнутренниеДанные["ВыбранныйСертификатПароль"] <> Неопределено Тогда
		
		ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
			ВнутренниеДанные, СвойстваПароля,, ВнутренниеДанные["ВыбранныйСертификатПароль"]);
		ВнутренниеДанные.Удалить("ВыбранныйСертификатПароль");
		Элементы.ЗапомнитьПароль.ТолькоПросмотр = Ложь;
	Иначе
		ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект, ВнутренниеДанные, СвойстваПароля);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СертификатСписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СертификатСписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриИзмененииРеквизитаПароль", Истина));
	
	Если Не РазрешитьЗапоминатьПароль
	   И Не ЗапомнитьПароль
	   И Не СвойстваПароля.ПарольПроверен Тогда
		
		Элементы.ЗапомнитьПароль.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьПарольПриИзменении(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриИзмененииРеквизитаЗапомнитьПароль", Истина));
	
	Если Не РазрешитьЗапоминатьПароль
	   И Не ЗапомнитьПароль
	   И Не СвойстваПароля.ПарольПроверен Тогда
		
		Элементы.ЗапомнитьПароль.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеУстановленногоПароляНажатие(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПояснениеУстановленногоПароляНажатие(ЭтотОбъект, Элемент, СвойстваПароля);
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеУстановленногоПароляРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПояснениеУстановленногоПароляОбработкаНавигационнойСсылки(
		ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка, СвойстваПароля);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РасшифроватьДанные() Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПродолжитьОткрытие(ОбщиеВнутренниеДанные, КлиентскиеПараметры) Экспорт
	
	Если Не ЭлектроннаяПодписьСлужебныйКлиент.ПродолжитьОткрытиеНачало(ЭтотОбъект, КлиентскиеПараметры,, Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("ПродолжитьОткрытие", ЭтотОбъект);
	
	ВнутренниеДанные = ОбщиеВнутренниеДанные;
	ОписаниеДанных = КлиентскиеПараметры.ОписаниеДанных;
	ФормаОбъекта   = КлиентскиеПараметры.Форма;
	
	ДополнительныеПараметры = Новый Структура;
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, ДополнительныеПараметры);
	
	Если Не РазрешитьЗапоминатьПароль
	   И Не ЗапомнитьПароль
	   И Не СвойстваПароля.ПарольПроверен Тогда
		
		Элементы.ЗапомнитьПароль.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если БезПодтверждения
	   И (    ДополнительныеПараметры.ПарольУказан
	      Или ДополнительныеПараметры.УсиленнаяЗащитаЗакрытогоКлюча) Тогда
	
		ОбработкаПослеПредупреждения = Неопределено;
		
		Если РасшифроватьДанные() Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Истина);
			Возврат Истина;
		КонецЕсли;
	Иначе
		Открыть();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьРасшифровку(КлиентскиеПараметры, ОбработкаЗавершения) Экспорт
	
	ОписаниеДанных = КлиентскиеПараметры.ОписаниеДанных;
	ФормаОбъекта   = КлиентскиеПараметры.Форма;
	
	ОбработкаПослеПредупреждения = ОбработкаЗавершения;
	ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьРасшифровку", ЭтотОбъект);
	
	Если РасшифроватьДанные() Тогда
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСпискаСертификатов()
	
	СертификатПриИзмененииНаСервере(ЭлектроннаяПодписьСлужебныйКлиент.ОтпечаткиСертификатовНаКлиенте(), Истина);
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриИзмененииСвойствСертификата", Истина));
	
КонецПроцедуры

&НаСервере
Процедура СертификатПриИзмененииНаСервере(ОтпечаткиСертификатовНаКлиенте, ПроверитьСсылку = Ложь)
	
	Если ПроверитьСсылку
	   И ЗначениеЗаполнено(Сертификат)
	   И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сертификат, "Ссылка") <> Сертификат Тогда
		
		Сертификат = Неопределено;
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебный.СертификатПриИзмененииНаСервере(ЭтотОбъект, ОтпечаткиСертификатовНаКлиенте,, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция РасшифроватьДанные()
	
	ОшибкаНаКлиенте = Новый Структура;
	ОшибкаНаСервере = Новый Структура;
	
	Если Не ЗначениеЗаполнено(СертификатПрограмма) Тогда
		ОшибкаНаКлиенте.Вставить("ОписаниеОшибки",
			НСтр("ru = 'У выбранного сертификата не указана программа для закрытого ключа.
			           |Выберите сертификат повторно из полного списка или
			           |откройте сертификат и укажите программу вручную.'"));
		ПоказатьОшибку(ОшибкаНаКлиенте, ОшибкаНаСервере);
		Возврат Ложь;
	КонецЕсли;
	
	ВыбранныйСертификат = Новый Структура;
	ВыбранныйСертификат.Вставить("Ссылка",    Сертификат);
	ВыбранныйСертификат.Вставить("Отпечаток", СертификатОтпечаток);
	ВыбранныйСертификат.Вставить("Данные",    СертификатАдрес);
	ОписаниеДанных.Вставить("ВыбранныйСертификат", ВыбранныйСертификат);
	
	Если ОписаниеДанных.Свойство("ПередВыполнением")
	   И ТипЗнч(ОписаниеДанных.ПередВыполнением) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеДанных.ПередВыполнением, Неопределено);
	КонецЕсли;
	
	ИдентификаторФормы = Неопределено;
	Если ТипЗнч(ФормаОбъекта) = Тип("УправляемаяФорма") Тогда
		ИдентификаторФормы = ФормаОбъекта.УникальныйИдентификатор;
	ИначеЕсли ТипЗнч(ФормаОбъекта) = Тип("УникальныйИдентификатор") Тогда
		ИдентификаторФормы = ФормаОбъекта;
	КонецЕсли;
	
	Успех = Ложь;
	
	Если ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().СоздаватьЭлектронныеПодписиНаСервере Тогда
		Если ЗначениеЗаполнено(СертификатНаСервереОписаниеОшибки) Тогда
			ОшибкаНаСервере = СертификатНаСервереОписаниеОшибки;
			СертификатНаСервереОписаниеОшибки = Новый Структура;
		Иначе
			// Попытка подписания на сервере.
			Успех = РасшифроватьНаСторонеСервера(ИдентификаторФормы, ОшибкаНаСервере);
		КонецЕсли;
		
		Если Не Успех Тогда
			// Попытка подписания на клиенте.
			Успех = РасшифроватьНаСторонеКлиента(ИдентификаторФормы, ОшибкаНаКлиенте);
		КонецЕсли;
	Иначе
		// Попытка подписания на клиенте.
		Успех = РасшифроватьНаСторонеКлиента(ИдентификаторФормы, ОшибкаНаКлиенте, Истина);
	КонецЕсли;
	
	Если Не Успех Тогда
		ПоказатьОшибку(ОшибкаНаКлиенте, ОшибкаНаСервере);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗаписатьСертификатыШифрования(ИдентификаторФормы, ОшибкаНаКлиенте) Тогда
		ПоказатьОшибку(ОшибкаНаКлиенте, ОшибкаНаСервере);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЭтоАутентификация
	   И ЗначениеЗаполнено(ПредставлениеДанных)
	   И (Не ОписаниеДанных.Свойство("СообщитьОЗавершении")
	      Или ОписаниеДанных.СообщитьОЗавершении <> Ложь) Тогда
		
		ЭлектроннаяПодписьКлиент.ИнформироватьОРасшифровкеОбъекта(ПредставлениеДанных,
			ОписаниеДанных.ТекущийСписокПредставлений.Количество() > 1);
	КонецЕсли;
	
	Если ОписаниеДанных.Свойство("КонтекстОперации") Тогда
		ОписаниеДанных.КонтекстОперации = ЭтотОбъект;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция РасшифроватьНаСторонеКлиента(ИдентификаторФормы, ОшибкаНаКлиенте, ТолькоНаСторонеКлиента = Ложь)
	
	МенеджерКриптографии = ЭлектроннаяПодписьСлужебныйКлиент.МенеджерКриптографии("Расшифровка",
		ТолькоНаСторонеКлиента, ОшибкаНаКлиенте, СертификатПрограмма);
		
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СертификатКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(СертификатОтпечаток,
		Истина, СертификатПрограмма, Ложь, ОшибкаНаКлиенте);
	
	Если СертификатКриптографии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Успех = Ложь;
	ПарольПринят = Ложь;
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СвойстваПароля.Значение;
	
	Если ОписаниеДанных.Свойство("Данные") Тогда
		Успех = РасшифроватьЭлементДанныхНаСторонеКлиента(ОписаниеДанных, МенеджерКриптографии,
			СертификатКриптографии, ИдентификаторФормы, ПарольПринят, ОшибкаНаКлиенте);
	Иначе
		Для каждого ЭлементДанных Из ОписаниеДанных.НаборДанных Цикл
			ОписаниеДанных.Вставить("ТекущийЭлементНабораДанных", ЭлементДанных);
			
			Если ЭлементДанных.Свойство("РасшифрованныеДанные") Тогда
				Успех = Истина;
				Продолжить;
			КонецЕсли;
			
			Успех = РасшифроватьЭлементДанныхНаСторонеКлиента(ЭлементДанных, МенеджерКриптографии,
				СертификатКриптографии, ИдентификаторФормы, ПарольПринят, ОшибкаНаКлиенте);
			
			Если Не Успех Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПарольПринят Тогда
		ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
			ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриУспешномВыполненииОперации", Истина));
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

&НаКлиенте
Функция РасшифроватьЭлементДанныхНаСторонеКлиента(ЭлементДанных, МенеджерКриптографии, СертификатКриптографии,
			ИдентификаторФормы, ПарольПринят, ОшибкаНаКлиенте)
	
	Попытка
		ДанныеДляРасшифровки = ДанныеИзОписанияДанных(ЭлементДанных.Данные);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОшибкаНаКлиенте.Вставить("ОписаниеОшибки",
			НСтр("ru = 'При получении данных для расшифровки возникла ошибка:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		ДвоичныеРасшифрованныеДанные = МенеджерКриптографии.Расшифровать(ДанныеДляРасшифровки);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОшибкаНаКлиенте.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ОшибкаНаКлиенте.Вставить("Инструкция", Истина);
		Возврат Ложь;
	КонецПопытки;
	
	ПарольПринят = Истина;
	
	ЭлементДанных.Вставить("РасшифрованныеДанные", ДвоичныеРасшифрованныеДанные);
	
	Если ЭлементДанных.Свойство("РазмещениеРезультата") Тогда
		Если ТипЗнч(ЭлементДанных.РазмещениеРезультата) = Тип("ОписаниеОповещения") Тогда
			Попытка
				ВыполнитьОбработкуОповещения(ЭлементДанных.РазмещениеРезультата, ОписаниеДанных);
			Исключение
				ЭлементДанных.Удалить("РасшифрованныеДанные");
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ОшибкаНаКлиенте.Вставить("ОписаниеОшибки", НСтр("ru = 'При записи расшифрованных данных возникла ошибка:'")
					+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция РасшифроватьНаСторонеСервера(ИдентификаторФормы, ОшибкаНаСервере)
	
	Успех = Ложь;
	ПарольПринят = Ложь;
	
	Если ОписаниеДанных.Свойство("Данные") Тогда
		Успех = РасшифроватьЭлементДанныхНаСторонеСервера(ОписаниеДанных, ИдентификаторФормы,
			ПарольПринят, ОшибкаНаСервере);
	Иначе
		Для каждого ЭлементДанных Из ОписаниеДанных.НаборДанных Цикл
			ОписаниеДанных.Вставить("ТекущийЭлементНабораДанных", ЭлементДанных);
			
			Если ЭлементДанных.Свойство("РасшифрованныеДанные") Тогда
				Успех = Истина;
				Продолжить;
			КонецЕсли;
			
			Успех = РасшифроватьЭлементДанныхНаСторонеСервера(ЭлементДанных, ИдентификаторФормы,
				ПарольПринят, ОшибкаНаСервере);
			
			Если Не Успех Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПарольПринят Тогда
		ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
			ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриУспешномВыполненииОперации", Истина));
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

&НаКлиенте
Функция РасшифроватьЭлементДанныхНаСторонеСервера(ЭлементДанных, ИдентификаторФормы, ПарольПринят, ОшибкаНаСервере)
	
	ПараметрыДляСервера = Новый Структура;
	ПараметрыДляСервера.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыДляСервера.Вставить("СертификатПрограмма", СертификатПрограмма);
	ПараметрыДляСервера.Вставить("СертификатОтпечаток", СертификатОтпечаток);
	
	АдресРасшифрованныхДанных = Неопределено;
	ЭлементДанныхДляСервера = Новый Структура;
	ЭлементДанныхДляСервера.Вставить("Данные", ДанныеИзОписанияДанных(ЭлементДанных.Данные, Ложь));
	
	Если Не РасшифроватьЭлементДанныхНаСервере(ЭлементДанныхДляСервера, ПараметрыДляСервера,
			СвойстваПароля.Значение, АдресРасшифрованныхДанных, ПарольПринят, ОшибкаНаСервере) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементДанных.Вставить("РасшифрованныеДанные", АдресРасшифрованныхДанных);
	
	Если ЭлементДанных.Свойство("РазмещениеРезультата") Тогда
		Если ТипЗнч(ЭлементДанных.РазмещениеРезультата) = Тип("ОписаниеОповещения") Тогда
			Попытка
				ВыполнитьОбработкуОповещения(ЭлементДанных.РазмещениеРезультата, ОписаниеДанных);
			Исключение
				ЭлементДанных.Удалить("РасшифрованныеДанные");
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ОшибкаНаСервере.Вставить("ОписаниеОшибки", НСтр("ru = 'При записи расшифрованных данных возникла ошибка:'")
					+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция РасшифроватьЭлементДанныхНаСервере(Знач ЭлементДанныхДляСервера, Знач Параметры,
			Знач ЗначениеПароля, АдресРасшифрованныхДанных, ПарольПринят, ОшибкаНаСервере)
	
	МенеджерКриптографии = ЭлектроннаяПодписьСлужебный.МенеджерКриптографии("Расшифровка",
		Ложь, ОшибкаНаСервере, Параметры.СертификатПрограмма);
	
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СертификатКриптографии = ЭлектроннаяПодпись.ПолучитьСертификатПоОтпечатку(
		Параметры.СертификатОтпечаток, Истина, Параметры.СертификатПрограмма, Ложь, ОшибкаНаСервере);
	
	Если СертификатКриптографии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ЗначениеПароля;
	Попытка
		ДанныеДляРасшифровки = ПолучитьИзВременногоХранилища(ЭлементДанныхДляСервера.Данные);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОшибкаНаСервере.Вставить("ОписаниеОшибки",
			НСтр("ru = 'При получении данных для расшифровки возникла ошибка:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		ДвоичныеРасшифрованныеДанные = МенеджерКриптографии.Расшифровать(ДанныеДляРасшифровки);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОшибкаНаСервере.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ОшибкаНаСервере.Вставить("Инструкция", Истина);
		Возврат Ложь;
	КонецПопытки;
	
	ПарольПринят = Истина;
	
	АдресРасшифрованныхДанных = ПоместитьВоВременноеХранилище(ДвоичныеРасшифрованныеДанные, Параметры.ИдентификаторФормы);
	
	Возврат Истина;
	
КонецФункции


&НаКлиенте
Функция ДанныеИзОписанияДанных(Знач Данные, ДляСтороныКлиента = Истина)
	
	Если ТипЗнч(Данные) = Тип("ОписаниеОповещения") Тогда
		ОбработкаПолученияДанных = Данные;
		Данные = Неопределено;
		ВыполнитьОбработкуОповещения(ОбработкаПолученияДанных, Данные);
	КонецЕсли;
	
	Если ДляСтороныКлиента Тогда
		// Для стороны клиента требуются двоичные данные или путь к файлу.
		
		Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			Возврат Данные;
		КонецЕсли;
		
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			Если ЭтоАдресВременногоХранилища(Данные) Тогда
				Возврат ПолучитьИзВременногоХранилища(Данные);
			КонецЕсли;
		Иначе // Путь к файлу
			Возврат Данные;
		КонецЕсли;
	Иначе
		// Для стороны сервера требуется адрес двоичных данных во временном хранилище.
		
		Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			Возврат ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
		КонецЕсли;
		
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			Если ЭтоАдресВременногоХранилища(Данные) Тогда
				Возврат Данные;
			КонецЕсли;
		Иначе // Путь к файлу
			Данные = Новый ДвоичныеДанные(Данные);
			Возврат ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Функция ЗаписатьСертификатыШифрования(ИдентификаторФормы, Ошибка)
	
	ОписаниеОбъектов = Новый Массив;
	Если ОписаниеДанных.Свойство("Данные") Тогда
		ДобавитьОписаниеОбъекта(ОписаниеОбъектов, ОписаниеДанных);
	Иначе
		Для каждого ЭлементДанных Из ОписаниеДанных.НаборДанных Цикл
			ДобавитьОписаниеОбъекта(ОписаниеОбъектов, ОписаниеДанных);
		КонецЦикла;
	КонецЕсли;
	
	Ошибка = Новый Структура;
	ЗаписатьСертификатыШифрованияНаСервере(ОписаниеОбъектов, ИдентификаторФормы, Ошибка);
	
	Возврат Не ЗначениеЗаполнено(Ошибка);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОписаниеОбъекта(ОписаниеОбъектов, ЭлементДанных)
	
	Если Не ЭлементДанных.Свойство("Объект") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияОбъекта = Неопределено;
	ЭлементДанных.Свойство("ВерсияОбъекта", ВерсияОбъекта);
	
	ОписаниеОбъекта = Новый Структура;
	ОписаниеОбъекта.Вставить("Ссылка", ЭлементДанных.Объект);
	ОписаниеОбъекта.Вставить("Версия", ВерсияОбъекта);
	
	ОписаниеОбъектов.Добавить(ОписаниеОбъекта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСертификатыШифрованияНаСервере(ОписаниеОбъектов, ИдентификаторФормы, Ошибка)
	
	СертификатыШифрования = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		Для каждого ОписаниеОбъекта Из ОписаниеОбъектов Цикл
			ЭлектроннаяПодпись.ЗаписатьСертификатыШифрования(ОписаниеОбъекта.Ссылка,
				СертификатыШифрования, ИдентификаторФормы, ОписаниеОбъекта.Версия);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		Ошибка.Вставить("ОписаниеОшибки", НСтр("ru = 'При очистке сертификатов шифрования возникла ошибка:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьОшибку(ОшибкаНаКлиенте, ОшибкаНаСервере)
	
	Если Не Открыта() И ОбработкаПослеПредупреждения = Неопределено Тогда
		Открыть();
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПоказатьОшибкуОбращенияКПрограмме(
		НСтр("ru = 'Не удалось расшифровать данные'"), "",
		ОшибкаНаКлиенте, ОшибкаНаСервере, , ОбработкаПослеПредупреждения);
	
КонецПроцедуры

#КонецОбласти
