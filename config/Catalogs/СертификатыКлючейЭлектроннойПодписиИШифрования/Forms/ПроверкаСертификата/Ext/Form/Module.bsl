&НаКлиенте
Перем ВнутренниеДанные, КлиентскиеПараметры, СвойстваПароля;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Сертификат        = Параметры.Сертификат;
	ПроверкаПриВыборе = Параметры.ПроверкаПриВыборе;
	
	Если ЗначениеЗаполнено(Параметры.ЗаголовокФормы) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;
	
	Если ПроверкаПриВыборе Тогда
		Элементы.ФормаПроверить.Заголовок = НСтр("ru = 'Проверить и продолжить'");
		Элементы.ФормаЗакрыть.Заголовок   = НСтр("ru = 'Отмена'");
	КонецЕсли;
	
	Проверки = Новый ТаблицаЗначений;
	Проверки.Колонки.Добавить("Имя",           Новый ОписаниеТипов("Строка"));
	Проверки.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Проверки.Колонки.Добавить("Подсказка",     Новый ОписаниеТипов("Строка"));
	
	ЭлектроннаяПодписьПереопределяемый.ПриСозданииФормыПроверкаСертификата(Параметры.Сертификат,
		Проверки, Параметры.ПараметрыДополнительныхПроверок);
	
	Для каждого Проверка Из Проверки Цикл
		Группа = Элементы.Добавить("Группа" + Проверка.Имя, Тип("ГруппаФормы"), Элементы.ГруппаДополнительныеПроверки);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		
		Картинка = Элементы.Добавить(Проверка.Имя + "НаКлиентеКартинка", Тип("ДекорацияФормы"), Группа);
		Картинка.Вид = ВидДекорацииФормы.Картинка;
		Картинка.Картинка = БиблиотекаКартинок.ПустоеСостояние;
		Картинка.РазмерКартинки = РазмерКартинки.АвтоРазмер;
		Картинка.Ширина = 3;
		Картинка.Высота = 1;
		Картинка.Гиперссылка = Истина;
		Картинка.УстановитьДействие("Нажатие", "КартинкаНажатие");
		
		Картинка = Элементы.Добавить(Проверка.Имя + "НаСервереКартинка", Тип("ДекорацияФормы"), Группа);
		Картинка.Вид = ВидДекорацииФормы.Картинка;
		Картинка.Картинка = БиблиотекаКартинок.ПустоеСостояние;
		Картинка.РазмерКартинки = РазмерКартинки.АвтоРазмер;
		Картинка.Ширина = 3;
		Картинка.Высота = 1;
		Картинка.Гиперссылка = Истина;
		Картинка.УстановитьДействие("Нажатие", "КартинкаНажатие");
		
		Надпись = Элементы.Добавить(Проверка.Имя + "Надпись", Тип("ДекорацияФормы"), Группа);
		Надпись.Заголовок = Проверка.Представление;
		Надпись.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Надпись.РасширеннаяПодсказка.Заголовок = Проверка.Подсказка;
		
		ДополнительныеПроверки.Добавить(Проверка.Имя);
	КонецЦикла;
	
	
	СвойстваСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сертификат,
		"ДанныеСертификата, Программа, УсиленнаяЗащитаЗакрытогоКлюча");
	
	Программа = СвойстваСертификата.Программа;
	ДанныеСертификата = СвойстваСертификата.ДанныеСертификата.Получить();
	СертификатУсиленнаяЗащитаЗакрытогоКлюча = СвойстваСертификата.УсиленнаяЗащитаЗакрытогоКлюча;
	
	ОбновитьВидимостьНаСервере();
	
	Если Элементы.ГруппаЗаконныйСертификат.Видимость Тогда
		ИмяПервойПроверки = "ЗаконныйСертификат";
	Иначе
		ИмяПервойПроверки = "НаличиеСертификата";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// При изменении настроек использования.
	Если ВРег(ИмяСобытия) <> ВРег("Запись_НаборКонстант") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(Источник) = ВРег("ПроверятьЭлектронныеПодписиНаСервере")
	 Или ВРег(Источник) = ВРег("СоздаватьЭлектронныеПодписиНаСервере") Тогда
		
		ПодключитьОбработчикОжидания("ПриИзмененияИспользованияПодписанияИлиШифрования", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КартинкаНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Подсказка) Тогда
		ПоказатьПредупреждение(, Элемент.Подсказка);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриИзмененииРеквизитаПароль", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьПарольПриИзменении(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриИзмененииРеквизитаЗапомнитьПароль", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеУстановленногоПароляНажатие(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПояснениеУстановленногоПароляНажатие(ЭтотОбъект, Элемент, СвойстваПароля);
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеУстановленногоПароляРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПояснениеУстановленногоПароляОбработкаНавигационнойСсылки(
		ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка, СвойстваПароля);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Проверить(Команда)
	
	ПроверитьСертификат();
	
	Если Не ПроверкаПриВыборе Тогда
		Возврат;
	КонецЕсли;
	
	Если КлиентскиеПараметры.Результат.ПроверкиПройдены Тогда
		Закрыть(Истина);
	Иначе
		ПоказатьПредупреждениеОНевозможностиПродолжения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПродолжитьОткрытие(ОбщиеВнутренниеДанные, ВходящиеКлиентскиеПараметры) Экспорт
	
	ВнутренниеДанные = ОбщиеВнутренниеДанные;
	КлиентскиеПараметры = ВходящиеКлиентскиеПараметры;
	КлиентскиеПараметры.Вставить("Результат");
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("ПродолжитьОткрытие", ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура;
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, ДополнительныеПараметры);
	
	Если Не Элементы.Пароль.Доступность Тогда
		ТекущийЭлемент = Элементы.ФормаПроверить;
	КонецЕсли;
	
	ПоказатьПредупреждение = Ложь;
	
	Если КлиентскиеПараметры.Свойство("БезПодтверждения")
	   И КлиентскиеПараметры.БезПодтверждения
	   И (    ДополнительныеПараметры.ПарольУказан
	      Или ДополнительныеПараметры.УсиленнаяЗащитаЗакрытогоКлюча) Тогда
	
		ПроверитьСертификат();
		
		Если КлиентскиеПараметры.Результат.ПроверкиПройдены Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПроверкаПриВыборе Тогда
			ПоказатьПредупреждение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Открыта() Тогда
		Открыть();
	КонецЕсли;
	
	Если ПоказатьПредупреждение Тогда
		ПоказатьПредупреждениеОНевозможностиПродолжения()
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененияИспользованияПодписанияИлиШифрования()
	
	ОбновитьВидимостьНаСервере()
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьНаСервере()
	
	ПроверятьНаСервере = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ПроверятьЭлектронныеПодписиНаСервере;
	СоздаватьНаСервере = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().СоздаватьЭлектронныеПодписиНаСервере;
	
	ОперацииНаСервере = ПроверятьНаСервере Или СоздаватьНаСервере;
	
	Элементы.НаСервереКартинка.Видимость                   = ОперацииНаСервере;
	Элементы.ЗаконныйСертификатНаСервереКартинка.Видимость = ОперацииНаСервере;
	Элементы.НаличиеСертификатаНаСервереКартинка.Видимость = ОперацииНаСервере;
	Элементы.ДанныеСертификатаНаСервереКартинка.Видимость  = ОперацииНаСервере;
	Элементы.НаличиеПрограммыНаСервереКартинка.Видимость   = ОперацииНаСервере;
	Элементы.ПодписаниеНаСервереКартинка.Видимость         = ОперацииНаСервере;
	Элементы.ПроверкаПодписиНаСервереКартинка.Видимость    = ОперацииНаСервере;
	Элементы.ШифрованиеНаСервереКартинка.Видимость         = ОперацииНаСервере;
	Элементы.РасшифровкаНаСервереКартинка.Видимость        = ОперацииНаСервере;
	
	Для каждого ЭлементСписка Из ДополнительныеПроверки Цикл
		Элементы[ЭлементСписка.Значение + "НаСервереКартинка"].Видимость = ОперацииНаСервере;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОНевозможностиПродолжения()
	
	ПоказатьПредупреждение(,
		НСтр("ru = 'Не удалось продолжить, т.к. пройдены не все требуемые проверки.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСертификат()
	
	ПарольПринят = Ложь;
	
	ПроверкиНаКлиенте = Новый Структура;
	ПроверитьНаСторонеКлиента(ПарольПринят);
	
	Если ОперацииНаСервере Тогда
		ПроверкиНаСервере = Новый Структура;
		ПроверитьНаСторонеСервера(СвойстваПароля.Значение, ПарольПринят);
	Иначе
		ПроверкиНаСервере = Неопределено;
	КонецЕсли;
	
	Если ПарольПринят Тогда
		ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
			ВнутренниеДанные, СвойстваПароля, Новый Структура("ПриУспешномВыполненииОперации", Истина));
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ПроверкиПройдены", Ложь);
	Результат.Вставить("ПроверкиНаКлиенте", ПроверкиНаКлиенте);
	Результат.Вставить("ПроверкиНаСервере", ПроверкиНаСервере);
	
	КлиентскиеПараметры.Вставить("Результат", Результат);
	
	Если КлиентскиеПараметры.Свойство("ОбработкаРезультата")
	   И ТипЗнч(КлиентскиеПараметры.ОбработкаРезультата) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(КлиентскиеПараметры.ОбработкаРезультата, Результат.ПроверкиПройдены);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаСторонеКлиента(ПарольПринят)
	
	НаСервере = Ложь;
	
	Попытка
		СертификатКриптографии = Новый СертификатКриптографии(ДанныеСертификата);
		ОписаниеОшибки = "";
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		УстановитьЭлемент(ЭтотОбъект, ИмяПервойПроверки, НаСервере, ОписаниеОшибки, Истина);
		Возврат;
	КонецЕсли;
	
	// Законный сертификат
	Если СертификатКриптографии.Субъект.Свойство("SN") Тогда
		ОписаниеОшибки = "";
	Иначе
		ОписаниеОшибки = НСтр("ru = 'В описании субъекта сертификата не найдено поле ""SN"".'");
	КонецЕсли;
	УстановитьЭлемент(ЭтотОбъект, "ЗаконныйСертификат", НаСервере, ОписаниеОшибки);
	
	// Наличие сертификата в личном списке.
	ОписаниеОшибки = "";
	ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Base64Строка(СертификатКриптографии.Отпечаток),
		Истина, , Ложь, ОписаниеОшибки);
	УстановитьЭлемент(ЭтотОбъект, "НаличиеСертификата", НаСервере, ОписаниеОшибки);
	
	// Проверка данных сертификата.
	ОписаниеОшибки = "";
	МенеджерКриптографии = ЭлектроннаяПодписьСлужебныйКлиент.МенеджерКриптографии("ПроверкаСертификата",
		Ложь, ОписаниеОшибки);
	
	Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ЭлектроннаяПодписьКлиент.ПроверитьСертификат(МенеджерКриптографии, СертификатКриптографии, ОписаниеОшибки);
	КонецЕсли;
	УстановитьЭлемент(ЭтотОбъект, "ДанныеСертификата", НаСервере, ОписаниеОшибки, Истина);
	
	// Наличие программы
	Если ЗначениеЗаполнено(Программа) Тогда
		ОписаниеОшибки = "";
		МенеджерКриптографии = ЭлектроннаяПодписьСлужебныйКлиент.МенеджерКриптографии("",
			Ложь, ОписаниеОшибки, Программа);
	Иначе
		МенеджерКриптографии = Неопределено;
		ОписаниеОшибки = НСтр("ru = 'Программа для использования закрытого ключа не указана в сертификате.'");
	КонецЕсли;
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Проверка подписания, проверка созданной подписи, проверка шифрования
			             |и проверка расшифровки не могут быть выполнены.'");
	КонецЕсли;
	УстановитьЭлемент(ЭтотОбъект, "НаличиеПрограммы", НаСервере, ОписаниеОшибки, Истина);
	
	УстановитьЭлемент(ЭтотОбъект, "Подписание",      НаСервере);
	УстановитьЭлемент(ЭтотОбъект, "ПроверкаПодписи", НаСервере);
	УстановитьЭлемент(ЭтотОбъект, "Шифрование",      НаСервере);
	УстановитьЭлемент(ЭтотОбъект, "Расшифровка",     НаСервере);
	Для каждого ЭлементСписка Из ДополнительныеПроверки Цикл
		УстановитьЭлемент(ЭтотОбъект, ЭлементСписка.Значение, НаСервере);
	КонецЦикла;
	
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СвойстваПароля.Значение;
	
	ПроверитьОперации(ЭтотОбъект, МенеджерКриптографии, СертификатКриптографии,
		ДанныеСертификата, НаСервере, ПарольПринят, ЭлектроннаяПодписьПереопределяемыйКлиент);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаСторонеСервера(Знач ЗначениеПароля, ПарольПринят)
	
	НаСервере = Истина;
	
	Попытка
		СертификатКриптографии = Новый СертификатКриптографии(ДанныеСертификата);
		ОписаниеОшибки = "";
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		УстановитьЭлемент(ЭтотОбъект, ИмяПервойПроверки, НаСервере, ОписаниеОшибки, Истина);
		Возврат;
	КонецЕсли;
	
	// Законный сертификат
	Если СертификатКриптографии.Субъект.Свойство("SN") Тогда
		ОписаниеОшибки = "";
	Иначе
		ОписаниеОшибки = НСтр("ru = 'В описании субъекта сертификата не найдено поле ""SN"".'");
	КонецЕсли;
	УстановитьЭлемент(ЭтотОбъект, "ЗаконныйСертификат", НаСервере, ОписаниеОшибки);
	
	// Наличие сертификата в личном списке.
	ОписаниеОшибки = "";
	ЭлектроннаяПодпись.ПолучитьСертификатПоОтпечатку(Base64Строка(СертификатКриптографии.Отпечаток),
		Истина, , Ложь, ОписаниеОшибки);
	УстановитьЭлемент(ЭтотОбъект, "НаличиеСертификата", НаСервере, ОписаниеОшибки);
	
	// Проверка данных сертификата.
	ОписаниеОшибки = "";
	МенеджерКриптографии = ЭлектроннаяПодписьСлужебный.МенеджерКриптографии("ПроверкаСертификата",
		Ложь, ОписаниеОшибки);
	
	Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ЭлектроннаяПодпись.ПроверитьСертификат(МенеджерКриптографии, СертификатКриптографии, ОписаниеОшибки);
	КонецЕсли;
	УстановитьЭлемент(ЭтотОбъект, "ДанныеСертификата", НаСервере, ОписаниеОшибки, Истина);
	
	// Наличие программы
	Если ЗначениеЗаполнено(Программа) Тогда
		ОписаниеОшибки = "";
		МенеджерКриптографии = ЭлектроннаяПодписьСлужебный.МенеджерКриптографии("",
			Ложь, ОписаниеОшибки, Программа);
	Иначе
		МенеджерКриптографии = Неопределено;
		ОписаниеОшибки = НСтр("ru = 'Программа для использования закрытого ключа не указана в сертификате.'");
	КонецЕсли;
	УстановитьЭлемент(ЭтотОбъект, "НаличиеПрограммы", НаСервере, ОписаниеОшибки, Истина);
	
	УстановитьЭлемент(ЭтотОбъект, "Подписание",      НаСервере);
	УстановитьЭлемент(ЭтотОбъект, "ПроверкаПодписи", НаСервере);
	УстановитьЭлемент(ЭтотОбъект, "Шифрование",      НаСервере);
	УстановитьЭлемент(ЭтотОбъект, "Расшифровка",     НаСервере);
	Для каждого ЭлементСписка Из ДополнительныеПроверки Цикл
		УстановитьЭлемент(ЭтотОбъект, ЭлементСписка.Значение, НаСервере);
	КонецЦикла;
	
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ЗначениеПароля;
	
	ПроверитьОперации(ЭтотОбъект, МенеджерКриптографии, СертификатКриптографии,
		ДанныеСертификата, НаСервере, ПарольПринят, ЭлектроннаяПодписьПереопределяемый);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьОперации(Форма, МенеджерКриптографии, СертификатКриптографии, Данные, НаСервере, ПарольПринят, Модуль)
	
	// Подписание.
	ОписаниеОшибки = "";
	Попытка
		ДанныеПодписи = МенеджерКриптографии.Подписать(Данные, СертификатКриптографии);
		ЭлектроннаяПодписьСлужебныйКлиентСервер.ПустыеДанныеПодписи(ДанныеПодписи, ОписаниеОшибки);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПарольПринят = Истина;
	КонецЕсли;
	УстановитьЭлемент(Форма, "Подписание", НаСервере, ОписаниеОшибки, Истина);
	
	// Проверка подписи.
	Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОписаниеОшибки = "";
		Попытка
			МенеджерКриптографии.ПроверитьПодпись(Данные, ДанныеПодписи);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		УстановитьЭлемент(Форма, "ПроверкаПодписи", НаСервере, ОписаниеОшибки, Истина);
	КонецЕсли;
	
	// Шифрование.
	ОписаниеОшибки = "";
	Попытка
		ЗашифрованныеДанные = МенеджерКриптографии.Зашифровать(Данные, СертификатКриптографии);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	УстановитьЭлемент(Форма, "Шифрование", НаСервере, ОписаниеОшибки, Истина);
	
	// Расшифровка.
	Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОписаниеОшибки = "";
		Попытка
			РасшифрованныеДанные = МенеджерКриптографии.Расшифровать(ЗашифрованныеДанные);
			ЭлектроннаяПодписьСлужебныйКлиентСервер.ПустыеРасшифрованныеДанные(РасшифрованныеДанные, ОписаниеОшибки);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		УстановитьЭлемент(Форма, "Расшифровка", НаСервере, ОписаниеОшибки, Истина);
	КонецЕсли;
	
	// Дополнительные проверки.
	Для каждого ЭлементСписка Из Форма.ДополнительныеПроверки Цикл
		ОписаниеОшибки = "";
		ЭтоПредупреждение = Ложь;
		Попытка
			Модуль.ПриДополнительнойПроверкеСертификата(Форма.Сертификат, ЭлементСписка.Значение,
				МенеджерКриптографии, ОписаниеОшибки, ЭтоПредупреждение);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		УстановитьЭлемент(Форма, ЭлементСписка.Значение, НаСервере, ОписаниеОшибки, ЭтоПредупреждение <> Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЭлемент(Форма, НачалоЭлемента, НаСервере, ОписаниеОшибки = Неопределено, ЭтоОшибка = Ложь)
	
	ЭлементКартинка = Форма.Элементы[НачалоЭлемента + ?(НаСервере, "НаСервере", "НаКлиенте") + "Картинка"];
	Проверки = Форма["Проверки" + ?(НаСервере, "НаСервере", "НаКлиенте")];
	
	Если ОписаниеОшибки = Неопределено Тогда
		ЭлементКартинка.Картинка    = БиблиотекаКартинок.ПустоеСостояние;
		ЭлементКартинка.Подсказка   = НСтр("ru = 'Проверка не выполнялась.'");
		Проверки.Вставить(НачалоЭлемента, Неопределено);
		
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ЭлементКартинка.Картинка    = ?(ЭтоОшибка, БиблиотекаКартинок.Ошибка32, БиблиотекаКартинок.Предупреждение32);
		ЭлементКартинка.Подсказка   = ОписаниеОшибки;
		Проверки.Вставить(НачалоЭлемента, Ложь);
	Иначе
		ЭлементКартинка.Картинка    = БиблиотекаКартинок.Успешно32;
		ЭлементКартинка.Подсказка   = НСтр("ru = 'Проверка выполнена успешно.'");;
		Проверки.Вставить(НачалоЭлемента, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
