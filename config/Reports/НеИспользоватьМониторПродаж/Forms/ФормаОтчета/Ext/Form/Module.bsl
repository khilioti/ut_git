
&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	
	СтандартнаяОбработка = Ложь;
	
	МожноСформироватьЗадачу = Проверка(Расшифровка, Ложь);
	
	Если НЕ МожноСформироватьЗадачу Тогда
		Сообщить("Задачу можно сформировать только в поле комментарий, и если у магазина заполнен Управляющий.");
	Иначе
		Если Элемент.ТекущаяОбласть.Текст="Изменен. Для обновления требуется сформировать отчет." Тогда
			Возврат;
		КонецЕсли;
		ЕстьЗадача = ПроверкаНаличияЗадачи(Расшифровка);
		Если ЕстьЗадача Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Удалить текущую задачу и создать новую?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Сформировать новую задачу для магазина?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		
		ОписаниеЗадачи = "";
		Подсказка = "Введите описание задачи";
		Если ВвестиСтроку(ОписаниеЗадачи, Подсказка, 0, Истина) Тогда
			// запомнить текст напоминания
			Если НЕ ПустаяСтрока(ОписаниеЗадачи) Тогда
				ДатаНапоминания = ТекущаяДата();
				Подсказка = "Введите срок выполнения";
				ЧастьДаты = ЧастиДаты.ДатаВремя;
				Если ВвестиДату(ДатаНапоминания, Подсказка, ЧастьДаты) Тогда
					// запомнить дату напоминания
					
					//Если ВвестиЗначение(ОписаниеЗадачи, "Описание задачи и дата устранения", ОписаниеТипов) Тогда
					Задача = ПолучитьРасшифровкуНаСервере(Расшифровка, Ложь,ОписаниеЗадачи,ДатаНапоминания);
					Если Задача Тогда
						Элемент.ТекущаяОбласть.Текст="Изменен. Для обновления требуется сформировать отчет.";
						Сообщить("Задача добавлена");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция Проверка(Расшифровка, ЭтоГруппа = Ложь)
	
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	Если НЕ Данные.Элементы[Расшифровка].ПолучитьПоля()[0].Поле="Комментарий" Тогда
		Возврат Ложь;
	Иначе
		Магазин = Данные.Элементы[Расшифровка].ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение;
		Если Магазин.Управляющий = Справочники.Пользователи.ПустаяСсылка() Тогда
			Возврат Ложь;	
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверкаНаличияЗадачи(Расшифровка)
	
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Возврат ЗначениеЗаполнено(Данные.Элементы[Расшифровка].ПолучитьПоля()[0].Значение);
	
КонецФункции


&НаСервере

Функция ПолучитьРасшифровкуНаСервере(Расшифровка, ЭтоГруппа = Ложь,ОписаниеЗадачи,ДатаНапоминания)
	
	
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	Магазин 		= Данные.Элементы[Расшифровка].ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение;
	Управляющий 	= Магазин.Управляющий;
	
	РД = Данные.Элементы[Данные.Элементы[Расшифровка].ПолучитьРодителей()[0].ПолучитьРодителей()[0].Идентификатор].ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение;
	НД = Данные.Элементы[Данные.Элементы[Данные.Элементы[Расшифровка].ПолучитьРодителей()[0].ПолучитьРодителей()[0].Идентификатор].ПолучитьРодителей()[0].ПолучитьРодителей()[0].Идентификатор].ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение;
	ИдентификаторНД = Данные.Элементы[Данные.Элементы[Данные.Элементы[Расшифровка].ПолучитьРодителей()[0].ПолучитьРодителей()[0].Идентификатор].ПолучитьРодителей()[0].ПолучитьРодителей()[0].Идентификатор].ПолучитьРодителей()[0].Идентификатор;
	ДатаТочка = Данные.Элементы[ИдентификаторНД].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение;
	
	ЗадачаУправляющему = Данные.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	
	СформироватьЗадачу(Магазин,Управляющий,ДатаТочка,ЗадачаУправляющему,ОписаниеЗадачи,ДатаНапоминания,Расшифровка); //магазин

	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СформироватьЗадачу(Подразделение,Управляющий,ДатаТочка,ЗадачаУправляющему,ОписаниеЗадачи,ДатаНапоминания,Расшифровка)
	
	//удаляем задачи
	НаборЗаписейДляУдаления = РегистрыСведений.ЗадачиМонитораПродаж.СоздатьНаборЗаписей();
	НаборЗаписейДляУдаления.Отбор.Период.Установить(ДатаТочка);
	НаборЗаписейДляУдаления.Отбор.Подразделение.Установить(Подразделение);
	НаборЗаписейДляУдаления.Отбор.Задача.Установить(ЗадачаУправляющему);
	НаборЗаписейДляУдаления.Записать();

	

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЗадачаУправляющему);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.ОбменДанными.Загрузка = истина;
		ЗадачаОбъект.Удалить();
	КонецЦикла;
	
	ТекЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ТекЗадача.РезультатВыполнения = Перечисления.СтатусыВыполнения.НеВыполнено;
	ТекЗадача.РезультатВыполненияСтрокой = Строка(ТекЗадача.РезультатВыполнения);
	
	
	
	Автор = ПараметрыСеанса.ТекущийПользователь;
	ТекЗадача.Автор = Автор;
	ТекЗадача.Дата = ТекущаяДата();//ТекущаяДатаСеанса();
	//ТекЗадача.Город = Город;
	ТекЗадача.Подразделение = Подразделение;
	ТекЗадача.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
	ТекЗадача.Исполнитель = Управляющий;//ТекущийОбъект.Управляющий;
	//ТекЗадача.Предмет = ЗадачаСсылка;
	//ТекЗадача.ДокОснование = Ссылка;
	ТекЗадача.СрокИсполнения = ДатаНапоминания;
	
	ТекЗадача.Описание = ОписаниеЗадачи;
	ТекЗадача.Наименование = "Задача по Монитору продаж за: " + ДатаТочка;
	
	ТекЗадача.Записать();
	
	НаборЗаписей = РегистрыСведений.ЗадачиМонитораПродаж.СоздатьМенеджерЗаписи();
    НаборЗаписей.Подразделение = Подразделение;
	НаборЗаписей.Период = ДатаТочка;
	НаборЗаписей.Задача = ТекЗадача.Ссылка; 

	НаборЗаписей.Записать(Истина);		
	
	//Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	//ПоместитьВоВременноеХранилище(ТекЗадача,ДанныеРасшифровки)
		
КонецПроцедуры

